// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/attendancerecord"
	"github.com/ogidi/church-media/ent/predicate"
	"github.com/ogidi/church-media/ent/service"
)

// AttendanceRecordUpdate is the builder for updating AttendanceRecord entities.
type AttendanceRecordUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceRecordMutation
}

// Where appends a list predicates to the AttendanceRecordUpdate builder.
func (aru *AttendanceRecordUpdate) Where(ps ...predicate.AttendanceRecord) *AttendanceRecordUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetMales sets the "males" field.
func (aru *AttendanceRecordUpdate) SetMales(i int) *AttendanceRecordUpdate {
	aru.mutation.ResetMales()
	aru.mutation.SetMales(i)
	return aru
}

// SetNillableMales sets the "males" field if the given value is not nil.
func (aru *AttendanceRecordUpdate) SetNillableMales(i *int) *AttendanceRecordUpdate {
	if i != nil {
		aru.SetMales(*i)
	}
	return aru
}

// AddMales adds i to the "males" field.
func (aru *AttendanceRecordUpdate) AddMales(i int) *AttendanceRecordUpdate {
	aru.mutation.AddMales(i)
	return aru
}

// SetFemales sets the "females" field.
func (aru *AttendanceRecordUpdate) SetFemales(i int) *AttendanceRecordUpdate {
	aru.mutation.ResetFemales()
	aru.mutation.SetFemales(i)
	return aru
}

// SetNillableFemales sets the "females" field if the given value is not nil.
func (aru *AttendanceRecordUpdate) SetNillableFemales(i *int) *AttendanceRecordUpdate {
	if i != nil {
		aru.SetFemales(*i)
	}
	return aru
}

// AddFemales adds i to the "females" field.
func (aru *AttendanceRecordUpdate) AddFemales(i int) *AttendanceRecordUpdate {
	aru.mutation.AddFemales(i)
	return aru
}

// SetOffering sets the "offering" field.
func (aru *AttendanceRecordUpdate) SetOffering(f float64) *AttendanceRecordUpdate {
	aru.mutation.ResetOffering()
	aru.mutation.SetOffering(f)
	return aru
}

// SetNillableOffering sets the "offering" field if the given value is not nil.
func (aru *AttendanceRecordUpdate) SetNillableOffering(f *float64) *AttendanceRecordUpdate {
	if f != nil {
		aru.SetOffering(*f)
	}
	return aru
}

// AddOffering adds f to the "offering" field.
func (aru *AttendanceRecordUpdate) AddOffering(f float64) *AttendanceRecordUpdate {
	aru.mutation.AddOffering(f)
	return aru
}

// SetTithe sets the "tithe" field.
func (aru *AttendanceRecordUpdate) SetTithe(f float64) *AttendanceRecordUpdate {
	aru.mutation.ResetTithe()
	aru.mutation.SetTithe(f)
	return aru
}

// SetNillableTithe sets the "tithe" field if the given value is not nil.
func (aru *AttendanceRecordUpdate) SetNillableTithe(f *float64) *AttendanceRecordUpdate {
	if f != nil {
		aru.SetTithe(*f)
	}
	return aru
}

// AddTithe adds f to the "tithe" field.
func (aru *AttendanceRecordUpdate) AddTithe(f float64) *AttendanceRecordUpdate {
	aru.mutation.AddTithe(f)
	return aru
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (aru *AttendanceRecordUpdate) SetServiceID(id int) *AttendanceRecordUpdate {
	aru.mutation.SetServiceID(id)
	return aru
}

// SetService sets the "service" edge to the Service entity.
func (aru *AttendanceRecordUpdate) SetService(s *Service) *AttendanceRecordUpdate {
	return aru.SetServiceID(s.ID)
}

// Mutation returns the AttendanceRecordMutation object of the builder.
func (aru *AttendanceRecordUpdate) Mutation() *AttendanceRecordMutation {
	return aru.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (aru *AttendanceRecordUpdate) ClearService() *AttendanceRecordUpdate {
	aru.mutation.ClearService()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AttendanceRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AttendanceRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AttendanceRecordUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AttendanceRecordUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AttendanceRecordUpdate) check() error {
	if aru.mutation.ServiceCleared() && len(aru.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AttendanceRecord.service"`)
	}
	return nil
}

func (aru *AttendanceRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendancerecord.Table, attendancerecord.Columns, sqlgraph.NewFieldSpec(attendancerecord.FieldID, field.TypeInt))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Males(); ok {
		_spec.SetField(attendancerecord.FieldMales, field.TypeInt, value)
	}
	if value, ok := aru.mutation.AddedMales(); ok {
		_spec.AddField(attendancerecord.FieldMales, field.TypeInt, value)
	}
	if value, ok := aru.mutation.Females(); ok {
		_spec.SetField(attendancerecord.FieldFemales, field.TypeInt, value)
	}
	if value, ok := aru.mutation.AddedFemales(); ok {
		_spec.AddField(attendancerecord.FieldFemales, field.TypeInt, value)
	}
	if value, ok := aru.mutation.Offering(); ok {
		_spec.SetField(attendancerecord.FieldOffering, field.TypeFloat64, value)
	}
	if value, ok := aru.mutation.AddedOffering(); ok {
		_spec.AddField(attendancerecord.FieldOffering, field.TypeFloat64, value)
	}
	if value, ok := aru.mutation.Tithe(); ok {
		_spec.SetField(attendancerecord.FieldTithe, field.TypeFloat64, value)
	}
	if value, ok := aru.mutation.AddedTithe(); ok {
		_spec.AddField(attendancerecord.FieldTithe, field.TypeFloat64, value)
	}
	if aru.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancerecord.ServiceTable,
			Columns: []string{attendancerecord.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancerecord.ServiceTable,
			Columns: []string{attendancerecord.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendancerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AttendanceRecordUpdateOne is the builder for updating a single AttendanceRecord entity.
type AttendanceRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceRecordMutation
}

// SetMales sets the "males" field.
func (aruo *AttendanceRecordUpdateOne) SetMales(i int) *AttendanceRecordUpdateOne {
	aruo.mutation.ResetMales()
	aruo.mutation.SetMales(i)
	return aruo
}

// SetNillableMales sets the "males" field if the given value is not nil.
func (aruo *AttendanceRecordUpdateOne) SetNillableMales(i *int) *AttendanceRecordUpdateOne {
	if i != nil {
		aruo.SetMales(*i)
	}
	return aruo
}

// AddMales adds i to the "males" field.
func (aruo *AttendanceRecordUpdateOne) AddMales(i int) *AttendanceRecordUpdateOne {
	aruo.mutation.AddMales(i)
	return aruo
}

// SetFemales sets the "females" field.
func (aruo *AttendanceRecordUpdateOne) SetFemales(i int) *AttendanceRecordUpdateOne {
	aruo.mutation.ResetFemales()
	aruo.mutation.SetFemales(i)
	return aruo
}

// SetNillableFemales sets the "females" field if the given value is not nil.
func (aruo *AttendanceRecordUpdateOne) SetNillableFemales(i *int) *AttendanceRecordUpdateOne {
	if i != nil {
		aruo.SetFemales(*i)
	}
	return aruo
}

// AddFemales adds i to the "females" field.
func (aruo *AttendanceRecordUpdateOne) AddFemales(i int) *AttendanceRecordUpdateOne {
	aruo.mutation.AddFemales(i)
	return aruo
}

// SetOffering sets the "offering" field.
func (aruo *AttendanceRecordUpdateOne) SetOffering(f float64) *AttendanceRecordUpdateOne {
	aruo.mutation.ResetOffering()
	aruo.mutation.SetOffering(f)
	return aruo
}

// SetNillableOffering sets the "offering" field if the given value is not nil.
func (aruo *AttendanceRecordUpdateOne) SetNillableOffering(f *float64) *AttendanceRecordUpdateOne {
	if f != nil {
		aruo.SetOffering(*f)
	}
	return aruo
}

// AddOffering adds f to the "offering" field.
func (aruo *AttendanceRecordUpdateOne) AddOffering(f float64) *AttendanceRecordUpdateOne {
	aruo.mutation.AddOffering(f)
	return aruo
}

// SetTithe sets the "tithe" field.
func (aruo *AttendanceRecordUpdateOne) SetTithe(f float64) *AttendanceRecordUpdateOne {
	aruo.mutation.ResetTithe()
	aruo.mutation.SetTithe(f)
	return aruo
}

// SetNillableTithe sets the "tithe" field if the given value is not nil.
func (aruo *AttendanceRecordUpdateOne) SetNillableTithe(f *float64) *AttendanceRecordUpdateOne {
	if f != nil {
		aruo.SetTithe(*f)
	}
	return aruo
}

// AddTithe adds f to the "tithe" field.
func (aruo *AttendanceRecordUpdateOne) AddTithe(f float64) *AttendanceRecordUpdateOne {
	aruo.mutation.AddTithe(f)
	return aruo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (aruo *AttendanceRecordUpdateOne) SetServiceID(id int) *AttendanceRecordUpdateOne {
	aruo.mutation.SetServiceID(id)
	return aruo
}

// SetService sets the "service" edge to the Service entity.
func (aruo *AttendanceRecordUpdateOne) SetService(s *Service) *AttendanceRecordUpdateOne {
	return aruo.SetServiceID(s.ID)
}

// Mutation returns the AttendanceRecordMutation object of the builder.
func (aruo *AttendanceRecordUpdateOne) Mutation() *AttendanceRecordMutation {
	return aruo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (aruo *AttendanceRecordUpdateOne) ClearService() *AttendanceRecordUpdateOne {
	aruo.mutation.ClearService()
	return aruo
}

// Where appends a list predicates to the AttendanceRecordUpdate builder.
func (aruo *AttendanceRecordUpdateOne) Where(ps ...predicate.AttendanceRecord) *AttendanceRecordUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AttendanceRecordUpdateOne) Select(field string, fields ...string) *AttendanceRecordUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AttendanceRecord entity.
func (aruo *AttendanceRecordUpdateOne) Save(ctx context.Context) (*AttendanceRecord, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AttendanceRecordUpdateOne) SaveX(ctx context.Context) *AttendanceRecord {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AttendanceRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AttendanceRecordUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AttendanceRecordUpdateOne) check() error {
	if aruo.mutation.ServiceCleared() && len(aruo.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AttendanceRecord.service"`)
	}
	return nil
}

func (aruo *AttendanceRecordUpdateOne) sqlSave(ctx context.Context) (_node *AttendanceRecord, err error) {
	if err := aruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendancerecord.Table, attendancerecord.Columns, sqlgraph.NewFieldSpec(attendancerecord.FieldID, field.TypeInt))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttendanceRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendancerecord.FieldID)
		for _, f := range fields {
			if !attendancerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attendancerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Males(); ok {
		_spec.SetField(attendancerecord.FieldMales, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.AddedMales(); ok {
		_spec.AddField(attendancerecord.FieldMales, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.Females(); ok {
		_spec.SetField(attendancerecord.FieldFemales, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.AddedFemales(); ok {
		_spec.AddField(attendancerecord.FieldFemales, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.Offering(); ok {
		_spec.SetField(attendancerecord.FieldOffering, field.TypeFloat64, value)
	}
	if value, ok := aruo.mutation.AddedOffering(); ok {
		_spec.AddField(attendancerecord.FieldOffering, field.TypeFloat64, value)
	}
	if value, ok := aruo.mutation.Tithe(); ok {
		_spec.SetField(attendancerecord.FieldTithe, field.TypeFloat64, value)
	}
	if value, ok := aruo.mutation.AddedTithe(); ok {
		_spec.AddField(attendancerecord.FieldTithe, field.TypeFloat64, value)
	}
	if aruo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancerecord.ServiceTable,
			Columns: []string{attendancerecord.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancerecord.ServiceTable,
			Columns: []string{attendancerecord.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttendanceRecord{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendancerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
