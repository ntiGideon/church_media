// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/contactprofile"
	"github.com/ogidi/church-media/ent/user"
)

// ContactProfile is the model entity for the ContactProfile schema.
type ContactProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// ProfilePicture holds the value of the "profile_picture" field.
	ProfilePicture *string `json:"profile_picture,omitempty"`
	// Address holds the value of the "address" field.
	Address *string `json:"address,omitempty"`
	// DateOfBirth holds the value of the "date_of_birth" field.
	DateOfBirth *time.Time `json:"date_of_birth,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender contactprofile.Gender `json:"gender,omitempty"`
	// Occupation holds the value of the "occupation" field.
	Occupation string `json:"occupation,omitempty"`
	// MaritalStatus holds the value of the "marital_status" field.
	MaritalStatus string `json:"marital_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactProfileQuery when eager-loading is set.
	Edges                ContactProfileEdges `json:"edges"`
	user_contact_profile *int
	selectValues         sql.SelectValues
}

// ContactProfileEdges holds the relations/edges for other nodes in the graph.
type ContactProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactProfileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactprofile.FieldID:
			values[i] = new(sql.NullInt64)
		case contactprofile.FieldFirstName, contactprofile.FieldSurname, contactprofile.FieldPhoneNumber, contactprofile.FieldProfilePicture, contactprofile.FieldAddress, contactprofile.FieldGender, contactprofile.FieldOccupation, contactprofile.FieldMaritalStatus:
			values[i] = new(sql.NullString)
		case contactprofile.FieldDateOfBirth:
			values[i] = new(sql.NullTime)
		case contactprofile.ForeignKeys[0]: // user_contact_profile
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactProfile fields.
func (cp *ContactProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case contactprofile.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				cp.FirstName = value.String
			}
		case contactprofile.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				cp.Surname = value.String
			}
		case contactprofile.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				cp.PhoneNumber = new(string)
				*cp.PhoneNumber = value.String
			}
		case contactprofile.FieldProfilePicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_picture", values[i])
			} else if value.Valid {
				cp.ProfilePicture = new(string)
				*cp.ProfilePicture = value.String
			}
		case contactprofile.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				cp.Address = new(string)
				*cp.Address = value.String
			}
		case contactprofile.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_birth", values[i])
			} else if value.Valid {
				cp.DateOfBirth = new(time.Time)
				*cp.DateOfBirth = value.Time
			}
		case contactprofile.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				cp.Gender = contactprofile.Gender(value.String)
			}
		case contactprofile.FieldOccupation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field occupation", values[i])
			} else if value.Valid {
				cp.Occupation = value.String
			}
		case contactprofile.FieldMaritalStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field marital_status", values[i])
			} else if value.Valid {
				cp.MaritalStatus = value.String
			}
		case contactprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_contact_profile", value)
			} else if value.Valid {
				cp.user_contact_profile = new(int)
				*cp.user_contact_profile = int(value.Int64)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContactProfile.
// This includes values selected through modifiers, order, etc.
func (cp *ContactProfile) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ContactProfile entity.
func (cp *ContactProfile) QueryUser() *UserQuery {
	return NewContactProfileClient(cp.config).QueryUser(cp)
}

// Update returns a builder for updating this ContactProfile.
// Note that you need to call ContactProfile.Unwrap() before calling this method if this ContactProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ContactProfile) Update() *ContactProfileUpdateOne {
	return NewContactProfileClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the ContactProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ContactProfile) Unwrap() *ContactProfile {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactProfile is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ContactProfile) String() string {
	var builder strings.Builder
	builder.WriteString("ContactProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("first_name=")
	builder.WriteString(cp.FirstName)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(cp.Surname)
	builder.WriteString(", ")
	if v := cp.PhoneNumber; v != nil {
		builder.WriteString("phone_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.ProfilePicture; v != nil {
		builder.WriteString("profile_picture=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.Address; v != nil {
		builder.WriteString("address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.DateOfBirth; v != nil {
		builder.WriteString("date_of_birth=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", cp.Gender))
	builder.WriteString(", ")
	builder.WriteString("occupation=")
	builder.WriteString(cp.Occupation)
	builder.WriteString(", ")
	builder.WriteString("marital_status=")
	builder.WriteString(cp.MaritalStatus)
	builder.WriteByte(')')
	return builder.String()
}

// ContactProfiles is a parsable slice of ContactProfile.
type ContactProfiles []*ContactProfile
