// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/attendancerecord"
	"github.com/ogidi/church-media/ent/service"
)

// AttendanceRecord is the model entity for the AttendanceRecord schema.
type AttendanceRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Males holds the value of the "males" field.
	Males int `json:"males,omitempty"`
	// Females holds the value of the "females" field.
	Females int `json:"females,omitempty"`
	// Offering holds the value of the "offering" field.
	Offering float64 `json:"offering,omitempty"`
	// Tithe holds the value of the "tithe" field.
	Tithe float64 `json:"tithe,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceRecordQuery when eager-loading is set.
	Edges                      AttendanceRecordEdges `json:"edges"`
	service_attendance_records *int
	selectValues               sql.SelectValues
}

// AttendanceRecordEdges holds the relations/edges for other nodes in the graph.
type AttendanceRecordEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceRecordEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttendanceRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendancerecord.FieldOffering, attendancerecord.FieldTithe:
			values[i] = new(sql.NullFloat64)
		case attendancerecord.FieldID, attendancerecord.FieldMales, attendancerecord.FieldFemales:
			values[i] = new(sql.NullInt64)
		case attendancerecord.ForeignKeys[0]: // service_attendance_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttendanceRecord fields.
func (ar *AttendanceRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendancerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case attendancerecord.FieldMales:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field males", values[i])
			} else if value.Valid {
				ar.Males = int(value.Int64)
			}
		case attendancerecord.FieldFemales:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field females", values[i])
			} else if value.Valid {
				ar.Females = int(value.Int64)
			}
		case attendancerecord.FieldOffering:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field offering", values[i])
			} else if value.Valid {
				ar.Offering = value.Float64
			}
		case attendancerecord.FieldTithe:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tithe", values[i])
			} else if value.Valid {
				ar.Tithe = value.Float64
			}
		case attendancerecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field service_attendance_records", value)
			} else if value.Valid {
				ar.service_attendance_records = new(int)
				*ar.service_attendance_records = int(value.Int64)
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttendanceRecord.
// This includes values selected through modifiers, order, etc.
func (ar *AttendanceRecord) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryService queries the "service" edge of the AttendanceRecord entity.
func (ar *AttendanceRecord) QueryService() *ServiceQuery {
	return NewAttendanceRecordClient(ar.config).QueryService(ar)
}

// Update returns a builder for updating this AttendanceRecord.
// Note that you need to call AttendanceRecord.Unwrap() before calling this method if this AttendanceRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AttendanceRecord) Update() *AttendanceRecordUpdateOne {
	return NewAttendanceRecordClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AttendanceRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AttendanceRecord) Unwrap() *AttendanceRecord {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttendanceRecord is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AttendanceRecord) String() string {
	var builder strings.Builder
	builder.WriteString("AttendanceRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("males=")
	builder.WriteString(fmt.Sprintf("%v", ar.Males))
	builder.WriteString(", ")
	builder.WriteString("females=")
	builder.WriteString(fmt.Sprintf("%v", ar.Females))
	builder.WriteString(", ")
	builder.WriteString("offering=")
	builder.WriteString(fmt.Sprintf("%v", ar.Offering))
	builder.WriteString(", ")
	builder.WriteString("tithe=")
	builder.WriteString(fmt.Sprintf("%v", ar.Tithe))
	builder.WriteByte(')')
	return builder.String()
}

// AttendanceRecords is a parsable slice of AttendanceRecord.
type AttendanceRecords []*AttendanceRecord
