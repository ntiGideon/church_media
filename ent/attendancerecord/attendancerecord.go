// Code generated by ent, DO NOT EDIT.

package attendancerecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attendancerecord type in the database.
	Label = "attendance_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMales holds the string denoting the males field in the database.
	FieldMales = "males"
	// FieldFemales holds the string denoting the females field in the database.
	FieldFemales = "females"
	// FieldOffering holds the string denoting the offering field in the database.
	FieldOffering = "offering"
	// FieldTithe holds the string denoting the tithe field in the database.
	FieldTithe = "tithe"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// Table holds the table name of the attendancerecord in the database.
	Table = "attendance_records"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "attendance_records"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_attendance_records"
)

// Columns holds all SQL columns for attendancerecord fields.
var Columns = []string{
	FieldID,
	FieldMales,
	FieldFemales,
	FieldOffering,
	FieldTithe,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attendance_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_attendance_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AttendanceRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMales orders the results by the males field.
func ByMales(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMales, opts...).ToFunc()
}

// ByFemales orders the results by the females field.
func ByFemales(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFemales, opts...).ToFunc()
}

// ByOffering orders the results by the offering field.
func ByOffering(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOffering, opts...).ToFunc()
}

// ByTithe orders the results by the tithe field.
func ByTithe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTithe, opts...).ToFunc()
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
	)
}
