// Code generated by ent, DO NOT EDIT.

package attendancerecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ogidi/church-media/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLTE(FieldID, id))
}

// Males applies equality check predicate on the "males" field. It's identical to MalesEQ.
func Males(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldMales, v))
}

// Females applies equality check predicate on the "females" field. It's identical to FemalesEQ.
func Females(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldFemales, v))
}

// Offering applies equality check predicate on the "offering" field. It's identical to OfferingEQ.
func Offering(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldOffering, v))
}

// Tithe applies equality check predicate on the "tithe" field. It's identical to TitheEQ.
func Tithe(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldTithe, v))
}

// MalesEQ applies the EQ predicate on the "males" field.
func MalesEQ(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldMales, v))
}

// MalesNEQ applies the NEQ predicate on the "males" field.
func MalesNEQ(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNEQ(FieldMales, v))
}

// MalesIn applies the In predicate on the "males" field.
func MalesIn(vs ...int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldIn(FieldMales, vs...))
}

// MalesNotIn applies the NotIn predicate on the "males" field.
func MalesNotIn(vs ...int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNotIn(FieldMales, vs...))
}

// MalesGT applies the GT predicate on the "males" field.
func MalesGT(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGT(FieldMales, v))
}

// MalesGTE applies the GTE predicate on the "males" field.
func MalesGTE(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGTE(FieldMales, v))
}

// MalesLT applies the LT predicate on the "males" field.
func MalesLT(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLT(FieldMales, v))
}

// MalesLTE applies the LTE predicate on the "males" field.
func MalesLTE(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLTE(FieldMales, v))
}

// FemalesEQ applies the EQ predicate on the "females" field.
func FemalesEQ(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldFemales, v))
}

// FemalesNEQ applies the NEQ predicate on the "females" field.
func FemalesNEQ(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNEQ(FieldFemales, v))
}

// FemalesIn applies the In predicate on the "females" field.
func FemalesIn(vs ...int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldIn(FieldFemales, vs...))
}

// FemalesNotIn applies the NotIn predicate on the "females" field.
func FemalesNotIn(vs ...int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNotIn(FieldFemales, vs...))
}

// FemalesGT applies the GT predicate on the "females" field.
func FemalesGT(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGT(FieldFemales, v))
}

// FemalesGTE applies the GTE predicate on the "females" field.
func FemalesGTE(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGTE(FieldFemales, v))
}

// FemalesLT applies the LT predicate on the "females" field.
func FemalesLT(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLT(FieldFemales, v))
}

// FemalesLTE applies the LTE predicate on the "females" field.
func FemalesLTE(v int) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLTE(FieldFemales, v))
}

// OfferingEQ applies the EQ predicate on the "offering" field.
func OfferingEQ(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldOffering, v))
}

// OfferingNEQ applies the NEQ predicate on the "offering" field.
func OfferingNEQ(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNEQ(FieldOffering, v))
}

// OfferingIn applies the In predicate on the "offering" field.
func OfferingIn(vs ...float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldIn(FieldOffering, vs...))
}

// OfferingNotIn applies the NotIn predicate on the "offering" field.
func OfferingNotIn(vs ...float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNotIn(FieldOffering, vs...))
}

// OfferingGT applies the GT predicate on the "offering" field.
func OfferingGT(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGT(FieldOffering, v))
}

// OfferingGTE applies the GTE predicate on the "offering" field.
func OfferingGTE(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGTE(FieldOffering, v))
}

// OfferingLT applies the LT predicate on the "offering" field.
func OfferingLT(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLT(FieldOffering, v))
}

// OfferingLTE applies the LTE predicate on the "offering" field.
func OfferingLTE(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLTE(FieldOffering, v))
}

// TitheEQ applies the EQ predicate on the "tithe" field.
func TitheEQ(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldEQ(FieldTithe, v))
}

// TitheNEQ applies the NEQ predicate on the "tithe" field.
func TitheNEQ(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNEQ(FieldTithe, v))
}

// TitheIn applies the In predicate on the "tithe" field.
func TitheIn(vs ...float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldIn(FieldTithe, vs...))
}

// TitheNotIn applies the NotIn predicate on the "tithe" field.
func TitheNotIn(vs ...float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldNotIn(FieldTithe, vs...))
}

// TitheGT applies the GT predicate on the "tithe" field.
func TitheGT(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGT(FieldTithe, v))
}

// TitheGTE applies the GTE predicate on the "tithe" field.
func TitheGTE(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldGTE(FieldTithe, v))
}

// TitheLT applies the LT predicate on the "tithe" field.
func TitheLT(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLT(FieldTithe, v))
}

// TitheLTE applies the LTE predicate on the "tithe" field.
func TitheLTE(v float64) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.FieldLTE(FieldTithe, v))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.AttendanceRecord {
	return predicate.AttendanceRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttendanceRecord) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttendanceRecord) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttendanceRecord) predicate.AttendanceRecord {
	return predicate.AttendanceRecord(sql.NotPredicates(p))
}
