// Code generated by ent, DO NOT EDIT.

package service

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeAttendanceRecords holds the string denoting the attendance_records edge name in mutations.
	EdgeAttendanceRecords = "attendance_records"
	// Table holds the table name of the service in the database.
	Table = "services"
	// AttendanceRecordsTable is the table that holds the attendance_records relation/edge.
	AttendanceRecordsTable = "attendance_records"
	// AttendanceRecordsInverseTable is the table name for the AttendanceRecord entity.
	// It exists in this package in order to avoid circular dependency with the "attendancerecord" package.
	AttendanceRecordsInverseTable = "attendance_records"
	// AttendanceRecordsColumn is the table column denoting the attendance_records relation/edge.
	AttendanceRecordsColumn = "service_attendance_records"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldDate,
	FieldName,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeFirstService     Type = "first_service"
	TypeSecondService    Type = "second_service"
	TypeFridayService    Type = "friday_service"
	TypeWednesdayService Type = "wednesday_service"
	TypeChildrenService  Type = "children_service"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeFirstService, TypeSecondService, TypeFridayService, TypeWednesdayService, TypeChildrenService:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Service queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAttendanceRecordsCount orders the results by attendance_records count.
func ByAttendanceRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttendanceRecordsStep(), opts...)
	}
}

// ByAttendanceRecords orders the results by attendance_records terms.
func ByAttendanceRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttendanceRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAttendanceRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttendanceRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttendanceRecordsTable, AttendanceRecordsColumn),
	)
}
