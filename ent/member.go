// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/member"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FormNumber holds the value of the "form_number" field.
	FormNumber string `json:"form_number,omitempty"`
	// National ID number or Ghana Card Number
	IDNumber string `json:"id_number,omitempty"`
	// Member's surname in block letters
	Surname string `json:"surname,omitempty"`
	// Other names in block letters
	OtherNames string `json:"other_names,omitempty"`
	// Date of birth
	Dob time.Time `json:"dob,omitempty"`
	// Gender identity
	Gender member.Gender `json:"gender,omitempty"`
	// Home town
	Hometown string `json:"hometown,omitempty"`
	// Geographical region
	Region string `json:"region,omitempty"`
	// Current residence address
	Residence string `json:"residence,omitempty"`
	// House number/digital address
	Address string `json:"address,omitempty"`
	// Mobile phone number
	Mobile string `json:"mobile,omitempty"`
	// Email address
	Email string `json:"email,omitempty"`
	// Sunday school class name
	SundaySchoolClass string `json:"sunday_school_class,omitempty"`
	// Professional occupation
	Occupation string `json:"occupation,omitempty"`
	// Whether member has title card
	HasTitleCard bool `json:"has_title_card,omitempty"`
	// Title card number if applicable
	TitleCardNumber string `json:"title_card_number,omitempty"`
	// Day of week born (e.g., Monday)
	DayBorn string `json:"day_born,omitempty"`
	// Whether member has spouse
	HasSpouse bool `json:"has_spouse,omitempty"`
	// Spouse's ID number if member
	SpouseIDNumber string `json:"spouse_id_number,omitempty"`
	// Spouse's full name
	SpouseName string `json:"spouse_name,omitempty"`
	// Spouse's occupation
	SpouseOccupation string `json:"spouse_occupation,omitempty"`
	// Spouse's contact number
	SpouseContact string `json:"spouse_contact,omitempty"`
	// Whether member is baptized
	IsBaptized bool `json:"is_baptized,omitempty"`
	// Who performed the baptism
	BaptizedBy string `json:"baptized_by,omitempty"`
	// Church where baptized
	BaptismChurch string `json:"baptism_church,omitempty"`
	// Baptism certificate number
	BaptismCertNumber string `json:"baptism_cert_number,omitempty"`
	// Date of baptism
	BaptismDate time.Time `json:"baptism_date,omitempty"`
	// Year joined church membership
	MembershipYear int `json:"membership_year,omitempty"`
	// URL to member's photo
	PhotoURL string `json:"photo_url,omitempty"`
	// Raw photo data (alternative to URL)
	PhotoData []byte `json:"photo_data,omitempty"`
	// Hash of photo for change detection
	PhotoHash string `json:"photo_hash,omitempty"`
	// Whether membership is active
	IsActive bool `json:"is_active,omitempty"`
	// When record was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// When record was last updated
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case member.FieldPhotoData:
			values[i] = new([]byte)
		case member.FieldHasTitleCard, member.FieldHasSpouse, member.FieldIsBaptized, member.FieldIsActive:
			values[i] = new(sql.NullBool)
		case member.FieldID, member.FieldMembershipYear:
			values[i] = new(sql.NullInt64)
		case member.FieldFormNumber, member.FieldIDNumber, member.FieldSurname, member.FieldOtherNames, member.FieldGender, member.FieldHometown, member.FieldRegion, member.FieldResidence, member.FieldAddress, member.FieldMobile, member.FieldEmail, member.FieldSundaySchoolClass, member.FieldOccupation, member.FieldTitleCardNumber, member.FieldDayBorn, member.FieldSpouseIDNumber, member.FieldSpouseName, member.FieldSpouseOccupation, member.FieldSpouseContact, member.FieldBaptizedBy, member.FieldBaptismChurch, member.FieldBaptismCertNumber, member.FieldPhotoURL, member.FieldPhotoHash:
			values[i] = new(sql.NullString)
		case member.FieldDob, member.FieldBaptismDate, member.FieldCreatedAt, member.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case member.FieldFormNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_number", values[i])
			} else if value.Valid {
				m.FormNumber = value.String
			}
		case member.FieldIDNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_number", values[i])
			} else if value.Valid {
				m.IDNumber = value.String
			}
		case member.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				m.Surname = value.String
			}
		case member.FieldOtherNames:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_names", values[i])
			} else if value.Valid {
				m.OtherNames = value.String
			}
		case member.FieldDob:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dob", values[i])
			} else if value.Valid {
				m.Dob = value.Time
			}
		case member.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				m.Gender = member.Gender(value.String)
			}
		case member.FieldHometown:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hometown", values[i])
			} else if value.Valid {
				m.Hometown = value.String
			}
		case member.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				m.Region = value.String
			}
		case member.FieldResidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field residence", values[i])
			} else if value.Valid {
				m.Residence = value.String
			}
		case member.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				m.Address = value.String
			}
		case member.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				m.Mobile = value.String
			}
		case member.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				m.Email = value.String
			}
		case member.FieldSundaySchoolClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sunday_school_class", values[i])
			} else if value.Valid {
				m.SundaySchoolClass = value.String
			}
		case member.FieldOccupation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field occupation", values[i])
			} else if value.Valid {
				m.Occupation = value.String
			}
		case member.FieldHasTitleCard:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_title_card", values[i])
			} else if value.Valid {
				m.HasTitleCard = value.Bool
			}
		case member.FieldTitleCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title_card_number", values[i])
			} else if value.Valid {
				m.TitleCardNumber = value.String
			}
		case member.FieldDayBorn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field day_born", values[i])
			} else if value.Valid {
				m.DayBorn = value.String
			}
		case member.FieldHasSpouse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_spouse", values[i])
			} else if value.Valid {
				m.HasSpouse = value.Bool
			}
		case member.FieldSpouseIDNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spouse_id_number", values[i])
			} else if value.Valid {
				m.SpouseIDNumber = value.String
			}
		case member.FieldSpouseName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spouse_name", values[i])
			} else if value.Valid {
				m.SpouseName = value.String
			}
		case member.FieldSpouseOccupation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spouse_occupation", values[i])
			} else if value.Valid {
				m.SpouseOccupation = value.String
			}
		case member.FieldSpouseContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spouse_contact", values[i])
			} else if value.Valid {
				m.SpouseContact = value.String
			}
		case member.FieldIsBaptized:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_baptized", values[i])
			} else if value.Valid {
				m.IsBaptized = value.Bool
			}
		case member.FieldBaptizedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field baptized_by", values[i])
			} else if value.Valid {
				m.BaptizedBy = value.String
			}
		case member.FieldBaptismChurch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field baptism_church", values[i])
			} else if value.Valid {
				m.BaptismChurch = value.String
			}
		case member.FieldBaptismCertNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field baptism_cert_number", values[i])
			} else if value.Valid {
				m.BaptismCertNumber = value.String
			}
		case member.FieldBaptismDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field baptism_date", values[i])
			} else if value.Valid {
				m.BaptismDate = value.Time
			}
		case member.FieldMembershipYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field membership_year", values[i])
			} else if value.Valid {
				m.MembershipYear = int(value.Int64)
			}
		case member.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url", values[i])
			} else if value.Valid {
				m.PhotoURL = value.String
			}
		case member.FieldPhotoData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photo_data", values[i])
			} else if value != nil {
				m.PhotoData = *value
			}
		case member.FieldPhotoHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_hash", values[i])
			} else if value.Valid {
				m.PhotoHash = value.String
			}
		case member.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				m.IsActive = value.Bool
			}
		case member.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case member.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Member.
// This includes values selected through modifiers, order, etc.
func (m *Member) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Member.
// Note that you need to call Member.Unwrap() before calling this method if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return NewMemberClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Member entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("form_number=")
	builder.WriteString(m.FormNumber)
	builder.WriteString(", ")
	builder.WriteString("id_number=")
	builder.WriteString(m.IDNumber)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(m.Surname)
	builder.WriteString(", ")
	builder.WriteString("other_names=")
	builder.WriteString(m.OtherNames)
	builder.WriteString(", ")
	builder.WriteString("dob=")
	builder.WriteString(m.Dob.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", m.Gender))
	builder.WriteString(", ")
	builder.WriteString("hometown=")
	builder.WriteString(m.Hometown)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(m.Region)
	builder.WriteString(", ")
	builder.WriteString("residence=")
	builder.WriteString(m.Residence)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(m.Address)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(m.Mobile)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(m.Email)
	builder.WriteString(", ")
	builder.WriteString("sunday_school_class=")
	builder.WriteString(m.SundaySchoolClass)
	builder.WriteString(", ")
	builder.WriteString("occupation=")
	builder.WriteString(m.Occupation)
	builder.WriteString(", ")
	builder.WriteString("has_title_card=")
	builder.WriteString(fmt.Sprintf("%v", m.HasTitleCard))
	builder.WriteString(", ")
	builder.WriteString("title_card_number=")
	builder.WriteString(m.TitleCardNumber)
	builder.WriteString(", ")
	builder.WriteString("day_born=")
	builder.WriteString(m.DayBorn)
	builder.WriteString(", ")
	builder.WriteString("has_spouse=")
	builder.WriteString(fmt.Sprintf("%v", m.HasSpouse))
	builder.WriteString(", ")
	builder.WriteString("spouse_id_number=")
	builder.WriteString(m.SpouseIDNumber)
	builder.WriteString(", ")
	builder.WriteString("spouse_name=")
	builder.WriteString(m.SpouseName)
	builder.WriteString(", ")
	builder.WriteString("spouse_occupation=")
	builder.WriteString(m.SpouseOccupation)
	builder.WriteString(", ")
	builder.WriteString("spouse_contact=")
	builder.WriteString(m.SpouseContact)
	builder.WriteString(", ")
	builder.WriteString("is_baptized=")
	builder.WriteString(fmt.Sprintf("%v", m.IsBaptized))
	builder.WriteString(", ")
	builder.WriteString("baptized_by=")
	builder.WriteString(m.BaptizedBy)
	builder.WriteString(", ")
	builder.WriteString("baptism_church=")
	builder.WriteString(m.BaptismChurch)
	builder.WriteString(", ")
	builder.WriteString("baptism_cert_number=")
	builder.WriteString(m.BaptismCertNumber)
	builder.WriteString(", ")
	builder.WriteString("baptism_date=")
	builder.WriteString(m.BaptismDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("membership_year=")
	builder.WriteString(fmt.Sprintf("%v", m.MembershipYear))
	builder.WriteString(", ")
	builder.WriteString("photo_url=")
	builder.WriteString(m.PhotoURL)
	builder.WriteString(", ")
	builder.WriteString("photo_data=")
	builder.WriteString(fmt.Sprintf("%v", m.PhotoData))
	builder.WriteString(", ")
	builder.WriteString("photo_hash=")
	builder.WriteString(m.PhotoHash)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member
