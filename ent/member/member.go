// Code generated by ent, DO NOT EDIT.

package member

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFormNumber holds the string denoting the form_number field in the database.
	FieldFormNumber = "form_number"
	// FieldIDNumber holds the string denoting the id_number field in the database.
	FieldIDNumber = "id_number"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldOtherNames holds the string denoting the other_names field in the database.
	FieldOtherNames = "other_names"
	// FieldDob holds the string denoting the dob field in the database.
	FieldDob = "dob"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldHometown holds the string denoting the hometown field in the database.
	FieldHometown = "hometown"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldResidence holds the string denoting the residence field in the database.
	FieldResidence = "residence"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldSundaySchoolClass holds the string denoting the sunday_school_class field in the database.
	FieldSundaySchoolClass = "sunday_school_class"
	// FieldOccupation holds the string denoting the occupation field in the database.
	FieldOccupation = "occupation"
	// FieldHasTitleCard holds the string denoting the has_title_card field in the database.
	FieldHasTitleCard = "has_title_card"
	// FieldTitleCardNumber holds the string denoting the title_card_number field in the database.
	FieldTitleCardNumber = "title_card_number"
	// FieldDayBorn holds the string denoting the day_born field in the database.
	FieldDayBorn = "day_born"
	// FieldHasSpouse holds the string denoting the has_spouse field in the database.
	FieldHasSpouse = "has_spouse"
	// FieldSpouseIDNumber holds the string denoting the spouse_id_number field in the database.
	FieldSpouseIDNumber = "spouse_id_number"
	// FieldSpouseName holds the string denoting the spouse_name field in the database.
	FieldSpouseName = "spouse_name"
	// FieldSpouseOccupation holds the string denoting the spouse_occupation field in the database.
	FieldSpouseOccupation = "spouse_occupation"
	// FieldSpouseContact holds the string denoting the spouse_contact field in the database.
	FieldSpouseContact = "spouse_contact"
	// FieldIsBaptized holds the string denoting the is_baptized field in the database.
	FieldIsBaptized = "is_baptized"
	// FieldBaptizedBy holds the string denoting the baptized_by field in the database.
	FieldBaptizedBy = "baptized_by"
	// FieldBaptismChurch holds the string denoting the baptism_church field in the database.
	FieldBaptismChurch = "baptism_church"
	// FieldBaptismCertNumber holds the string denoting the baptism_cert_number field in the database.
	FieldBaptismCertNumber = "baptism_cert_number"
	// FieldBaptismDate holds the string denoting the baptism_date field in the database.
	FieldBaptismDate = "baptism_date"
	// FieldMembershipYear holds the string denoting the membership_year field in the database.
	FieldMembershipYear = "membership_year"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// FieldPhotoData holds the string denoting the photo_data field in the database.
	FieldPhotoData = "photo_data"
	// FieldPhotoHash holds the string denoting the photo_hash field in the database.
	FieldPhotoHash = "photo_hash"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the member in the database.
	Table = "members"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldFormNumber,
	FieldIDNumber,
	FieldSurname,
	FieldOtherNames,
	FieldDob,
	FieldGender,
	FieldHometown,
	FieldRegion,
	FieldResidence,
	FieldAddress,
	FieldMobile,
	FieldEmail,
	FieldSundaySchoolClass,
	FieldOccupation,
	FieldHasTitleCard,
	FieldTitleCardNumber,
	FieldDayBorn,
	FieldHasSpouse,
	FieldSpouseIDNumber,
	FieldSpouseName,
	FieldSpouseOccupation,
	FieldSpouseContact,
	FieldIsBaptized,
	FieldBaptizedBy,
	FieldBaptismChurch,
	FieldBaptismCertNumber,
	FieldBaptismDate,
	FieldMembershipYear,
	FieldPhotoURL,
	FieldPhotoData,
	FieldPhotoHash,
	FieldIsActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
	// OtherNamesValidator is a validator for the "other_names" field. It is called by the builders before save.
	OtherNamesValidator func(string) error
	// OccupationValidator is a validator for the "occupation" field. It is called by the builders before save.
	OccupationValidator func(string) error
	// DefaultHasTitleCard holds the default value on creation for the "has_title_card" field.
	DefaultHasTitleCard bool
	// DefaultHasSpouse holds the default value on creation for the "has_spouse" field.
	DefaultHasSpouse bool
	// DefaultIsBaptized holds the default value on creation for the "is_baptized" field.
	DefaultIsBaptized bool
	// MembershipYearValidator is a validator for the "membership_year" field. It is called by the builders before save.
	MembershipYearValidator func(int) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
	GenderOther  Gender = "other"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale, GenderOther:
		return nil
	default:
		return fmt.Errorf("member: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the Member queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFormNumber orders the results by the form_number field.
func ByFormNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormNumber, opts...).ToFunc()
}

// ByIDNumber orders the results by the id_number field.
func ByIDNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDNumber, opts...).ToFunc()
}

// BySurname orders the results by the surname field.
func BySurname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByOtherNames orders the results by the other_names field.
func ByOtherNames(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtherNames, opts...).ToFunc()
}

// ByDob orders the results by the dob field.
func ByDob(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDob, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByHometown orders the results by the hometown field.
func ByHometown(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHometown, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByResidence orders the results by the residence field.
func ByResidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResidence, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// BySundaySchoolClass orders the results by the sunday_school_class field.
func BySundaySchoolClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSundaySchoolClass, opts...).ToFunc()
}

// ByOccupation orders the results by the occupation field.
func ByOccupation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccupation, opts...).ToFunc()
}

// ByHasTitleCard orders the results by the has_title_card field.
func ByHasTitleCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasTitleCard, opts...).ToFunc()
}

// ByTitleCardNumber orders the results by the title_card_number field.
func ByTitleCardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleCardNumber, opts...).ToFunc()
}

// ByDayBorn orders the results by the day_born field.
func ByDayBorn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDayBorn, opts...).ToFunc()
}

// ByHasSpouse orders the results by the has_spouse field.
func ByHasSpouse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasSpouse, opts...).ToFunc()
}

// BySpouseIDNumber orders the results by the spouse_id_number field.
func BySpouseIDNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpouseIDNumber, opts...).ToFunc()
}

// BySpouseName orders the results by the spouse_name field.
func BySpouseName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpouseName, opts...).ToFunc()
}

// BySpouseOccupation orders the results by the spouse_occupation field.
func BySpouseOccupation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpouseOccupation, opts...).ToFunc()
}

// BySpouseContact orders the results by the spouse_contact field.
func BySpouseContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpouseContact, opts...).ToFunc()
}

// ByIsBaptized orders the results by the is_baptized field.
func ByIsBaptized(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBaptized, opts...).ToFunc()
}

// ByBaptizedBy orders the results by the baptized_by field.
func ByBaptizedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaptizedBy, opts...).ToFunc()
}

// ByBaptismChurch orders the results by the baptism_church field.
func ByBaptismChurch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaptismChurch, opts...).ToFunc()
}

// ByBaptismCertNumber orders the results by the baptism_cert_number field.
func ByBaptismCertNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaptismCertNumber, opts...).ToFunc()
}

// ByBaptismDate orders the results by the baptism_date field.
func ByBaptismDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaptismDate, opts...).ToFunc()
}

// ByMembershipYear orders the results by the membership_year field.
func ByMembershipYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMembershipYear, opts...).ToFunc()
}

// ByPhotoURL orders the results by the photo_url field.
func ByPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL, opts...).ToFunc()
}

// ByPhotoHash orders the results by the photo_hash field.
func ByPhotoHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoHash, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
