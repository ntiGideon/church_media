// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldID, id))
}

// FormNumber applies equality check predicate on the "form_number" field. It's identical to FormNumberEQ.
func FormNumber(v int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldFormNumber, v))
}

// IDNumber applies equality check predicate on the "id_number" field. It's identical to IDNumberEQ.
func IDNumber(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldIDNumber, v))
}

// Surname applies equality check predicate on the "surname" field. It's identical to SurnameEQ.
func Surname(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSurname, v))
}

// OtherNames applies equality check predicate on the "other_names" field. It's identical to OtherNamesEQ.
func OtherNames(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldOtherNames, v))
}

// Dob applies equality check predicate on the "dob" field. It's identical to DobEQ.
func Dob(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldDob, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldAge, v))
}

// Hometown applies equality check predicate on the "hometown" field. It's identical to HometownEQ.
func Hometown(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldHometown, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldRegion, v))
}

// Residence applies equality check predicate on the "residence" field. It's identical to ResidenceEQ.
func Residence(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldResidence, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldAddress, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMobile, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldEmail, v))
}

// SundaySchoolClass applies equality check predicate on the "sunday_school_class" field. It's identical to SundaySchoolClassEQ.
func SundaySchoolClass(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSundaySchoolClass, v))
}

// Occupation applies equality check predicate on the "occupation" field. It's identical to OccupationEQ.
func Occupation(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldOccupation, v))
}

// HasTitleCard applies equality check predicate on the "has_title_card" field. It's identical to HasTitleCardEQ.
func HasTitleCard(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldHasTitleCard, v))
}

// TitleCardNumber applies equality check predicate on the "title_card_number" field. It's identical to TitleCardNumberEQ.
func TitleCardNumber(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldTitleCardNumber, v))
}

// DayBorn applies equality check predicate on the "day_born" field. It's identical to DayBornEQ.
func DayBorn(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldDayBorn, v))
}

// HasSpouse applies equality check predicate on the "has_spouse" field. It's identical to HasSpouseEQ.
func HasSpouse(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldHasSpouse, v))
}

// SpouseIDNumber applies equality check predicate on the "spouse_id_number" field. It's identical to SpouseIDNumberEQ.
func SpouseIDNumber(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseIDNumber, v))
}

// SpouseName applies equality check predicate on the "spouse_name" field. It's identical to SpouseNameEQ.
func SpouseName(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseName, v))
}

// SpouseOccupation applies equality check predicate on the "spouse_occupation" field. It's identical to SpouseOccupationEQ.
func SpouseOccupation(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseOccupation, v))
}

// SpouseContact applies equality check predicate on the "spouse_contact" field. It's identical to SpouseContactEQ.
func SpouseContact(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseContact, v))
}

// IsBaptized applies equality check predicate on the "is_baptized" field. It's identical to IsBaptizedEQ.
func IsBaptized(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldIsBaptized, v))
}

// BaptizedBy applies equality check predicate on the "baptized_by" field. It's identical to BaptizedByEQ.
func BaptizedBy(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptizedBy, v))
}

// BaptismChurch applies equality check predicate on the "baptism_church" field. It's identical to BaptismChurchEQ.
func BaptismChurch(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptismChurch, v))
}

// BaptismCertNumber applies equality check predicate on the "baptism_cert_number" field. It's identical to BaptismCertNumberEQ.
func BaptismCertNumber(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptismCertNumber, v))
}

// BaptismDate applies equality check predicate on the "baptism_date" field. It's identical to BaptismDateEQ.
func BaptismDate(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptismDate, v))
}

// MembershipYear applies equality check predicate on the "membership_year" field. It's identical to MembershipYearEQ.
func MembershipYear(v int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMembershipYear, v))
}

// PhotoURL applies equality check predicate on the "photo_url" field. It's identical to PhotoURLEQ.
func PhotoURL(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoData applies equality check predicate on the "photo_data" field. It's identical to PhotoDataEQ.
func PhotoData(v []byte) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhotoData, v))
}

// PhotoHash applies equality check predicate on the "photo_hash" field. It's identical to PhotoHashEQ.
func PhotoHash(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhotoHash, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldUpdatedAt, v))
}

// FormNumberEQ applies the EQ predicate on the "form_number" field.
func FormNumberEQ(v int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldFormNumber, v))
}

// FormNumberNEQ applies the NEQ predicate on the "form_number" field.
func FormNumberNEQ(v int) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldFormNumber, v))
}

// FormNumberIn applies the In predicate on the "form_number" field.
func FormNumberIn(vs ...int) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldFormNumber, vs...))
}

// FormNumberNotIn applies the NotIn predicate on the "form_number" field.
func FormNumberNotIn(vs ...int) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldFormNumber, vs...))
}

// FormNumberGT applies the GT predicate on the "form_number" field.
func FormNumberGT(v int) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldFormNumber, v))
}

// FormNumberGTE applies the GTE predicate on the "form_number" field.
func FormNumberGTE(v int) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldFormNumber, v))
}

// FormNumberLT applies the LT predicate on the "form_number" field.
func FormNumberLT(v int) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldFormNumber, v))
}

// FormNumberLTE applies the LTE predicate on the "form_number" field.
func FormNumberLTE(v int) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldFormNumber, v))
}

// FormNumberIsNil applies the IsNil predicate on the "form_number" field.
func FormNumberIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldFormNumber))
}

// FormNumberNotNil applies the NotNil predicate on the "form_number" field.
func FormNumberNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldFormNumber))
}

// IDNumberEQ applies the EQ predicate on the "id_number" field.
func IDNumberEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldIDNumber, v))
}

// IDNumberNEQ applies the NEQ predicate on the "id_number" field.
func IDNumberNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldIDNumber, v))
}

// IDNumberIn applies the In predicate on the "id_number" field.
func IDNumberIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldIDNumber, vs...))
}

// IDNumberNotIn applies the NotIn predicate on the "id_number" field.
func IDNumberNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldIDNumber, vs...))
}

// IDNumberGT applies the GT predicate on the "id_number" field.
func IDNumberGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldIDNumber, v))
}

// IDNumberGTE applies the GTE predicate on the "id_number" field.
func IDNumberGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldIDNumber, v))
}

// IDNumberLT applies the LT predicate on the "id_number" field.
func IDNumberLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldIDNumber, v))
}

// IDNumberLTE applies the LTE predicate on the "id_number" field.
func IDNumberLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldIDNumber, v))
}

// IDNumberContains applies the Contains predicate on the "id_number" field.
func IDNumberContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldIDNumber, v))
}

// IDNumberHasPrefix applies the HasPrefix predicate on the "id_number" field.
func IDNumberHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldIDNumber, v))
}

// IDNumberHasSuffix applies the HasSuffix predicate on the "id_number" field.
func IDNumberHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldIDNumber, v))
}

// IDNumberEqualFold applies the EqualFold predicate on the "id_number" field.
func IDNumberEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldIDNumber, v))
}

// IDNumberContainsFold applies the ContainsFold predicate on the "id_number" field.
func IDNumberContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldIDNumber, v))
}

// SurnameEQ applies the EQ predicate on the "surname" field.
func SurnameEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSurname, v))
}

// SurnameNEQ applies the NEQ predicate on the "surname" field.
func SurnameNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSurname, v))
}

// SurnameIn applies the In predicate on the "surname" field.
func SurnameIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSurname, vs...))
}

// SurnameNotIn applies the NotIn predicate on the "surname" field.
func SurnameNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSurname, vs...))
}

// SurnameGT applies the GT predicate on the "surname" field.
func SurnameGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSurname, v))
}

// SurnameGTE applies the GTE predicate on the "surname" field.
func SurnameGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSurname, v))
}

// SurnameLT applies the LT predicate on the "surname" field.
func SurnameLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSurname, v))
}

// SurnameLTE applies the LTE predicate on the "surname" field.
func SurnameLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSurname, v))
}

// SurnameContains applies the Contains predicate on the "surname" field.
func SurnameContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldSurname, v))
}

// SurnameHasPrefix applies the HasPrefix predicate on the "surname" field.
func SurnameHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldSurname, v))
}

// SurnameHasSuffix applies the HasSuffix predicate on the "surname" field.
func SurnameHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldSurname, v))
}

// SurnameEqualFold applies the EqualFold predicate on the "surname" field.
func SurnameEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldSurname, v))
}

// SurnameContainsFold applies the ContainsFold predicate on the "surname" field.
func SurnameContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldSurname, v))
}

// OtherNamesEQ applies the EQ predicate on the "other_names" field.
func OtherNamesEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldOtherNames, v))
}

// OtherNamesNEQ applies the NEQ predicate on the "other_names" field.
func OtherNamesNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldOtherNames, v))
}

// OtherNamesIn applies the In predicate on the "other_names" field.
func OtherNamesIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldOtherNames, vs...))
}

// OtherNamesNotIn applies the NotIn predicate on the "other_names" field.
func OtherNamesNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldOtherNames, vs...))
}

// OtherNamesGT applies the GT predicate on the "other_names" field.
func OtherNamesGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldOtherNames, v))
}

// OtherNamesGTE applies the GTE predicate on the "other_names" field.
func OtherNamesGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldOtherNames, v))
}

// OtherNamesLT applies the LT predicate on the "other_names" field.
func OtherNamesLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldOtherNames, v))
}

// OtherNamesLTE applies the LTE predicate on the "other_names" field.
func OtherNamesLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldOtherNames, v))
}

// OtherNamesContains applies the Contains predicate on the "other_names" field.
func OtherNamesContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldOtherNames, v))
}

// OtherNamesHasPrefix applies the HasPrefix predicate on the "other_names" field.
func OtherNamesHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldOtherNames, v))
}

// OtherNamesHasSuffix applies the HasSuffix predicate on the "other_names" field.
func OtherNamesHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldOtherNames, v))
}

// OtherNamesEqualFold applies the EqualFold predicate on the "other_names" field.
func OtherNamesEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldOtherNames, v))
}

// OtherNamesContainsFold applies the ContainsFold predicate on the "other_names" field.
func OtherNamesContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldOtherNames, v))
}

// DobEQ applies the EQ predicate on the "dob" field.
func DobEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldDob, v))
}

// DobNEQ applies the NEQ predicate on the "dob" field.
func DobNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldDob, v))
}

// DobIn applies the In predicate on the "dob" field.
func DobIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldDob, vs...))
}

// DobNotIn applies the NotIn predicate on the "dob" field.
func DobNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldDob, vs...))
}

// DobGT applies the GT predicate on the "dob" field.
func DobGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldDob, v))
}

// DobGTE applies the GTE predicate on the "dob" field.
func DobGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldDob, v))
}

// DobLT applies the LT predicate on the "dob" field.
func DobLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldDob, v))
}

// DobLTE applies the LTE predicate on the "dob" field.
func DobLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldDob, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldAge, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldGender, vs...))
}

// HometownEQ applies the EQ predicate on the "hometown" field.
func HometownEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldHometown, v))
}

// HometownNEQ applies the NEQ predicate on the "hometown" field.
func HometownNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldHometown, v))
}

// HometownIn applies the In predicate on the "hometown" field.
func HometownIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldHometown, vs...))
}

// HometownNotIn applies the NotIn predicate on the "hometown" field.
func HometownNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldHometown, vs...))
}

// HometownGT applies the GT predicate on the "hometown" field.
func HometownGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldHometown, v))
}

// HometownGTE applies the GTE predicate on the "hometown" field.
func HometownGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldHometown, v))
}

// HometownLT applies the LT predicate on the "hometown" field.
func HometownLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldHometown, v))
}

// HometownLTE applies the LTE predicate on the "hometown" field.
func HometownLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldHometown, v))
}

// HometownContains applies the Contains predicate on the "hometown" field.
func HometownContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldHometown, v))
}

// HometownHasPrefix applies the HasPrefix predicate on the "hometown" field.
func HometownHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldHometown, v))
}

// HometownHasSuffix applies the HasSuffix predicate on the "hometown" field.
func HometownHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldHometown, v))
}

// HometownEqualFold applies the EqualFold predicate on the "hometown" field.
func HometownEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldHometown, v))
}

// HometownContainsFold applies the ContainsFold predicate on the "hometown" field.
func HometownContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldHometown, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldRegion, v))
}

// ResidenceEQ applies the EQ predicate on the "residence" field.
func ResidenceEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldResidence, v))
}

// ResidenceNEQ applies the NEQ predicate on the "residence" field.
func ResidenceNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldResidence, v))
}

// ResidenceIn applies the In predicate on the "residence" field.
func ResidenceIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldResidence, vs...))
}

// ResidenceNotIn applies the NotIn predicate on the "residence" field.
func ResidenceNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldResidence, vs...))
}

// ResidenceGT applies the GT predicate on the "residence" field.
func ResidenceGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldResidence, v))
}

// ResidenceGTE applies the GTE predicate on the "residence" field.
func ResidenceGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldResidence, v))
}

// ResidenceLT applies the LT predicate on the "residence" field.
func ResidenceLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldResidence, v))
}

// ResidenceLTE applies the LTE predicate on the "residence" field.
func ResidenceLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldResidence, v))
}

// ResidenceContains applies the Contains predicate on the "residence" field.
func ResidenceContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldResidence, v))
}

// ResidenceHasPrefix applies the HasPrefix predicate on the "residence" field.
func ResidenceHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldResidence, v))
}

// ResidenceHasSuffix applies the HasSuffix predicate on the "residence" field.
func ResidenceHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldResidence, v))
}

// ResidenceEqualFold applies the EqualFold predicate on the "residence" field.
func ResidenceEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldResidence, v))
}

// ResidenceContainsFold applies the ContainsFold predicate on the "residence" field.
func ResidenceContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldResidence, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldAddress, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldMobile, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldEmail, v))
}

// SundaySchoolClassEQ applies the EQ predicate on the "sunday_school_class" field.
func SundaySchoolClassEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSundaySchoolClass, v))
}

// SundaySchoolClassNEQ applies the NEQ predicate on the "sunday_school_class" field.
func SundaySchoolClassNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSundaySchoolClass, v))
}

// SundaySchoolClassIn applies the In predicate on the "sunday_school_class" field.
func SundaySchoolClassIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSundaySchoolClass, vs...))
}

// SundaySchoolClassNotIn applies the NotIn predicate on the "sunday_school_class" field.
func SundaySchoolClassNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSundaySchoolClass, vs...))
}

// SundaySchoolClassGT applies the GT predicate on the "sunday_school_class" field.
func SundaySchoolClassGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSundaySchoolClass, v))
}

// SundaySchoolClassGTE applies the GTE predicate on the "sunday_school_class" field.
func SundaySchoolClassGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSundaySchoolClass, v))
}

// SundaySchoolClassLT applies the LT predicate on the "sunday_school_class" field.
func SundaySchoolClassLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSundaySchoolClass, v))
}

// SundaySchoolClassLTE applies the LTE predicate on the "sunday_school_class" field.
func SundaySchoolClassLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSundaySchoolClass, v))
}

// SundaySchoolClassContains applies the Contains predicate on the "sunday_school_class" field.
func SundaySchoolClassContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldSundaySchoolClass, v))
}

// SundaySchoolClassHasPrefix applies the HasPrefix predicate on the "sunday_school_class" field.
func SundaySchoolClassHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldSundaySchoolClass, v))
}

// SundaySchoolClassHasSuffix applies the HasSuffix predicate on the "sunday_school_class" field.
func SundaySchoolClassHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldSundaySchoolClass, v))
}

// SundaySchoolClassIsNil applies the IsNil predicate on the "sunday_school_class" field.
func SundaySchoolClassIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldSundaySchoolClass))
}

// SundaySchoolClassNotNil applies the NotNil predicate on the "sunday_school_class" field.
func SundaySchoolClassNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldSundaySchoolClass))
}

// SundaySchoolClassEqualFold applies the EqualFold predicate on the "sunday_school_class" field.
func SundaySchoolClassEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldSundaySchoolClass, v))
}

// SundaySchoolClassContainsFold applies the ContainsFold predicate on the "sunday_school_class" field.
func SundaySchoolClassContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldSundaySchoolClass, v))
}

// OccupationEQ applies the EQ predicate on the "occupation" field.
func OccupationEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldOccupation, v))
}

// OccupationNEQ applies the NEQ predicate on the "occupation" field.
func OccupationNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldOccupation, v))
}

// OccupationIn applies the In predicate on the "occupation" field.
func OccupationIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldOccupation, vs...))
}

// OccupationNotIn applies the NotIn predicate on the "occupation" field.
func OccupationNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldOccupation, vs...))
}

// OccupationGT applies the GT predicate on the "occupation" field.
func OccupationGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldOccupation, v))
}

// OccupationGTE applies the GTE predicate on the "occupation" field.
func OccupationGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldOccupation, v))
}

// OccupationLT applies the LT predicate on the "occupation" field.
func OccupationLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldOccupation, v))
}

// OccupationLTE applies the LTE predicate on the "occupation" field.
func OccupationLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldOccupation, v))
}

// OccupationContains applies the Contains predicate on the "occupation" field.
func OccupationContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldOccupation, v))
}

// OccupationHasPrefix applies the HasPrefix predicate on the "occupation" field.
func OccupationHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldOccupation, v))
}

// OccupationHasSuffix applies the HasSuffix predicate on the "occupation" field.
func OccupationHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldOccupation, v))
}

// OccupationEqualFold applies the EqualFold predicate on the "occupation" field.
func OccupationEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldOccupation, v))
}

// OccupationContainsFold applies the ContainsFold predicate on the "occupation" field.
func OccupationContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldOccupation, v))
}

// HasTitleCardEQ applies the EQ predicate on the "has_title_card" field.
func HasTitleCardEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldHasTitleCard, v))
}

// HasTitleCardNEQ applies the NEQ predicate on the "has_title_card" field.
func HasTitleCardNEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldHasTitleCard, v))
}

// TitleCardNumberEQ applies the EQ predicate on the "title_card_number" field.
func TitleCardNumberEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldTitleCardNumber, v))
}

// TitleCardNumberNEQ applies the NEQ predicate on the "title_card_number" field.
func TitleCardNumberNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldTitleCardNumber, v))
}

// TitleCardNumberIn applies the In predicate on the "title_card_number" field.
func TitleCardNumberIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldTitleCardNumber, vs...))
}

// TitleCardNumberNotIn applies the NotIn predicate on the "title_card_number" field.
func TitleCardNumberNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldTitleCardNumber, vs...))
}

// TitleCardNumberGT applies the GT predicate on the "title_card_number" field.
func TitleCardNumberGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldTitleCardNumber, v))
}

// TitleCardNumberGTE applies the GTE predicate on the "title_card_number" field.
func TitleCardNumberGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldTitleCardNumber, v))
}

// TitleCardNumberLT applies the LT predicate on the "title_card_number" field.
func TitleCardNumberLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldTitleCardNumber, v))
}

// TitleCardNumberLTE applies the LTE predicate on the "title_card_number" field.
func TitleCardNumberLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldTitleCardNumber, v))
}

// TitleCardNumberContains applies the Contains predicate on the "title_card_number" field.
func TitleCardNumberContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldTitleCardNumber, v))
}

// TitleCardNumberHasPrefix applies the HasPrefix predicate on the "title_card_number" field.
func TitleCardNumberHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldTitleCardNumber, v))
}

// TitleCardNumberHasSuffix applies the HasSuffix predicate on the "title_card_number" field.
func TitleCardNumberHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldTitleCardNumber, v))
}

// TitleCardNumberIsNil applies the IsNil predicate on the "title_card_number" field.
func TitleCardNumberIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldTitleCardNumber))
}

// TitleCardNumberNotNil applies the NotNil predicate on the "title_card_number" field.
func TitleCardNumberNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldTitleCardNumber))
}

// TitleCardNumberEqualFold applies the EqualFold predicate on the "title_card_number" field.
func TitleCardNumberEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldTitleCardNumber, v))
}

// TitleCardNumberContainsFold applies the ContainsFold predicate on the "title_card_number" field.
func TitleCardNumberContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldTitleCardNumber, v))
}

// DayBornEQ applies the EQ predicate on the "day_born" field.
func DayBornEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldDayBorn, v))
}

// DayBornNEQ applies the NEQ predicate on the "day_born" field.
func DayBornNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldDayBorn, v))
}

// DayBornIn applies the In predicate on the "day_born" field.
func DayBornIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldDayBorn, vs...))
}

// DayBornNotIn applies the NotIn predicate on the "day_born" field.
func DayBornNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldDayBorn, vs...))
}

// DayBornGT applies the GT predicate on the "day_born" field.
func DayBornGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldDayBorn, v))
}

// DayBornGTE applies the GTE predicate on the "day_born" field.
func DayBornGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldDayBorn, v))
}

// DayBornLT applies the LT predicate on the "day_born" field.
func DayBornLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldDayBorn, v))
}

// DayBornLTE applies the LTE predicate on the "day_born" field.
func DayBornLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldDayBorn, v))
}

// DayBornContains applies the Contains predicate on the "day_born" field.
func DayBornContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldDayBorn, v))
}

// DayBornHasPrefix applies the HasPrefix predicate on the "day_born" field.
func DayBornHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldDayBorn, v))
}

// DayBornHasSuffix applies the HasSuffix predicate on the "day_born" field.
func DayBornHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldDayBorn, v))
}

// DayBornIsNil applies the IsNil predicate on the "day_born" field.
func DayBornIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldDayBorn))
}

// DayBornNotNil applies the NotNil predicate on the "day_born" field.
func DayBornNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldDayBorn))
}

// DayBornEqualFold applies the EqualFold predicate on the "day_born" field.
func DayBornEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldDayBorn, v))
}

// DayBornContainsFold applies the ContainsFold predicate on the "day_born" field.
func DayBornContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldDayBorn, v))
}

// HasSpouseEQ applies the EQ predicate on the "has_spouse" field.
func HasSpouseEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldHasSpouse, v))
}

// HasSpouseNEQ applies the NEQ predicate on the "has_spouse" field.
func HasSpouseNEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldHasSpouse, v))
}

// SpouseIDNumberEQ applies the EQ predicate on the "spouse_id_number" field.
func SpouseIDNumberEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseIDNumber, v))
}

// SpouseIDNumberNEQ applies the NEQ predicate on the "spouse_id_number" field.
func SpouseIDNumberNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSpouseIDNumber, v))
}

// SpouseIDNumberIn applies the In predicate on the "spouse_id_number" field.
func SpouseIDNumberIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSpouseIDNumber, vs...))
}

// SpouseIDNumberNotIn applies the NotIn predicate on the "spouse_id_number" field.
func SpouseIDNumberNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSpouseIDNumber, vs...))
}

// SpouseIDNumberGT applies the GT predicate on the "spouse_id_number" field.
func SpouseIDNumberGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSpouseIDNumber, v))
}

// SpouseIDNumberGTE applies the GTE predicate on the "spouse_id_number" field.
func SpouseIDNumberGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSpouseIDNumber, v))
}

// SpouseIDNumberLT applies the LT predicate on the "spouse_id_number" field.
func SpouseIDNumberLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSpouseIDNumber, v))
}

// SpouseIDNumberLTE applies the LTE predicate on the "spouse_id_number" field.
func SpouseIDNumberLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSpouseIDNumber, v))
}

// SpouseIDNumberContains applies the Contains predicate on the "spouse_id_number" field.
func SpouseIDNumberContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldSpouseIDNumber, v))
}

// SpouseIDNumberHasPrefix applies the HasPrefix predicate on the "spouse_id_number" field.
func SpouseIDNumberHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldSpouseIDNumber, v))
}

// SpouseIDNumberHasSuffix applies the HasSuffix predicate on the "spouse_id_number" field.
func SpouseIDNumberHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldSpouseIDNumber, v))
}

// SpouseIDNumberIsNil applies the IsNil predicate on the "spouse_id_number" field.
func SpouseIDNumberIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldSpouseIDNumber))
}

// SpouseIDNumberNotNil applies the NotNil predicate on the "spouse_id_number" field.
func SpouseIDNumberNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldSpouseIDNumber))
}

// SpouseIDNumberEqualFold applies the EqualFold predicate on the "spouse_id_number" field.
func SpouseIDNumberEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldSpouseIDNumber, v))
}

// SpouseIDNumberContainsFold applies the ContainsFold predicate on the "spouse_id_number" field.
func SpouseIDNumberContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldSpouseIDNumber, v))
}

// SpouseNameEQ applies the EQ predicate on the "spouse_name" field.
func SpouseNameEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseName, v))
}

// SpouseNameNEQ applies the NEQ predicate on the "spouse_name" field.
func SpouseNameNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSpouseName, v))
}

// SpouseNameIn applies the In predicate on the "spouse_name" field.
func SpouseNameIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSpouseName, vs...))
}

// SpouseNameNotIn applies the NotIn predicate on the "spouse_name" field.
func SpouseNameNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSpouseName, vs...))
}

// SpouseNameGT applies the GT predicate on the "spouse_name" field.
func SpouseNameGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSpouseName, v))
}

// SpouseNameGTE applies the GTE predicate on the "spouse_name" field.
func SpouseNameGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSpouseName, v))
}

// SpouseNameLT applies the LT predicate on the "spouse_name" field.
func SpouseNameLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSpouseName, v))
}

// SpouseNameLTE applies the LTE predicate on the "spouse_name" field.
func SpouseNameLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSpouseName, v))
}

// SpouseNameContains applies the Contains predicate on the "spouse_name" field.
func SpouseNameContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldSpouseName, v))
}

// SpouseNameHasPrefix applies the HasPrefix predicate on the "spouse_name" field.
func SpouseNameHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldSpouseName, v))
}

// SpouseNameHasSuffix applies the HasSuffix predicate on the "spouse_name" field.
func SpouseNameHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldSpouseName, v))
}

// SpouseNameIsNil applies the IsNil predicate on the "spouse_name" field.
func SpouseNameIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldSpouseName))
}

// SpouseNameNotNil applies the NotNil predicate on the "spouse_name" field.
func SpouseNameNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldSpouseName))
}

// SpouseNameEqualFold applies the EqualFold predicate on the "spouse_name" field.
func SpouseNameEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldSpouseName, v))
}

// SpouseNameContainsFold applies the ContainsFold predicate on the "spouse_name" field.
func SpouseNameContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldSpouseName, v))
}

// SpouseOccupationEQ applies the EQ predicate on the "spouse_occupation" field.
func SpouseOccupationEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseOccupation, v))
}

// SpouseOccupationNEQ applies the NEQ predicate on the "spouse_occupation" field.
func SpouseOccupationNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSpouseOccupation, v))
}

// SpouseOccupationIn applies the In predicate on the "spouse_occupation" field.
func SpouseOccupationIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSpouseOccupation, vs...))
}

// SpouseOccupationNotIn applies the NotIn predicate on the "spouse_occupation" field.
func SpouseOccupationNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSpouseOccupation, vs...))
}

// SpouseOccupationGT applies the GT predicate on the "spouse_occupation" field.
func SpouseOccupationGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSpouseOccupation, v))
}

// SpouseOccupationGTE applies the GTE predicate on the "spouse_occupation" field.
func SpouseOccupationGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSpouseOccupation, v))
}

// SpouseOccupationLT applies the LT predicate on the "spouse_occupation" field.
func SpouseOccupationLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSpouseOccupation, v))
}

// SpouseOccupationLTE applies the LTE predicate on the "spouse_occupation" field.
func SpouseOccupationLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSpouseOccupation, v))
}

// SpouseOccupationContains applies the Contains predicate on the "spouse_occupation" field.
func SpouseOccupationContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldSpouseOccupation, v))
}

// SpouseOccupationHasPrefix applies the HasPrefix predicate on the "spouse_occupation" field.
func SpouseOccupationHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldSpouseOccupation, v))
}

// SpouseOccupationHasSuffix applies the HasSuffix predicate on the "spouse_occupation" field.
func SpouseOccupationHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldSpouseOccupation, v))
}

// SpouseOccupationIsNil applies the IsNil predicate on the "spouse_occupation" field.
func SpouseOccupationIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldSpouseOccupation))
}

// SpouseOccupationNotNil applies the NotNil predicate on the "spouse_occupation" field.
func SpouseOccupationNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldSpouseOccupation))
}

// SpouseOccupationEqualFold applies the EqualFold predicate on the "spouse_occupation" field.
func SpouseOccupationEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldSpouseOccupation, v))
}

// SpouseOccupationContainsFold applies the ContainsFold predicate on the "spouse_occupation" field.
func SpouseOccupationContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldSpouseOccupation, v))
}

// SpouseContactEQ applies the EQ predicate on the "spouse_contact" field.
func SpouseContactEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSpouseContact, v))
}

// SpouseContactNEQ applies the NEQ predicate on the "spouse_contact" field.
func SpouseContactNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSpouseContact, v))
}

// SpouseContactIn applies the In predicate on the "spouse_contact" field.
func SpouseContactIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSpouseContact, vs...))
}

// SpouseContactNotIn applies the NotIn predicate on the "spouse_contact" field.
func SpouseContactNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSpouseContact, vs...))
}

// SpouseContactGT applies the GT predicate on the "spouse_contact" field.
func SpouseContactGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSpouseContact, v))
}

// SpouseContactGTE applies the GTE predicate on the "spouse_contact" field.
func SpouseContactGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSpouseContact, v))
}

// SpouseContactLT applies the LT predicate on the "spouse_contact" field.
func SpouseContactLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSpouseContact, v))
}

// SpouseContactLTE applies the LTE predicate on the "spouse_contact" field.
func SpouseContactLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSpouseContact, v))
}

// SpouseContactContains applies the Contains predicate on the "spouse_contact" field.
func SpouseContactContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldSpouseContact, v))
}

// SpouseContactHasPrefix applies the HasPrefix predicate on the "spouse_contact" field.
func SpouseContactHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldSpouseContact, v))
}

// SpouseContactHasSuffix applies the HasSuffix predicate on the "spouse_contact" field.
func SpouseContactHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldSpouseContact, v))
}

// SpouseContactIsNil applies the IsNil predicate on the "spouse_contact" field.
func SpouseContactIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldSpouseContact))
}

// SpouseContactNotNil applies the NotNil predicate on the "spouse_contact" field.
func SpouseContactNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldSpouseContact))
}

// SpouseContactEqualFold applies the EqualFold predicate on the "spouse_contact" field.
func SpouseContactEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldSpouseContact, v))
}

// SpouseContactContainsFold applies the ContainsFold predicate on the "spouse_contact" field.
func SpouseContactContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldSpouseContact, v))
}

// IsBaptizedEQ applies the EQ predicate on the "is_baptized" field.
func IsBaptizedEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldIsBaptized, v))
}

// IsBaptizedNEQ applies the NEQ predicate on the "is_baptized" field.
func IsBaptizedNEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldIsBaptized, v))
}

// BaptizedByEQ applies the EQ predicate on the "baptized_by" field.
func BaptizedByEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptizedBy, v))
}

// BaptizedByNEQ applies the NEQ predicate on the "baptized_by" field.
func BaptizedByNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBaptizedBy, v))
}

// BaptizedByIn applies the In predicate on the "baptized_by" field.
func BaptizedByIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBaptizedBy, vs...))
}

// BaptizedByNotIn applies the NotIn predicate on the "baptized_by" field.
func BaptizedByNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBaptizedBy, vs...))
}

// BaptizedByGT applies the GT predicate on the "baptized_by" field.
func BaptizedByGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBaptizedBy, v))
}

// BaptizedByGTE applies the GTE predicate on the "baptized_by" field.
func BaptizedByGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBaptizedBy, v))
}

// BaptizedByLT applies the LT predicate on the "baptized_by" field.
func BaptizedByLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBaptizedBy, v))
}

// BaptizedByLTE applies the LTE predicate on the "baptized_by" field.
func BaptizedByLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBaptizedBy, v))
}

// BaptizedByContains applies the Contains predicate on the "baptized_by" field.
func BaptizedByContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldBaptizedBy, v))
}

// BaptizedByHasPrefix applies the HasPrefix predicate on the "baptized_by" field.
func BaptizedByHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldBaptizedBy, v))
}

// BaptizedByHasSuffix applies the HasSuffix predicate on the "baptized_by" field.
func BaptizedByHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldBaptizedBy, v))
}

// BaptizedByIsNil applies the IsNil predicate on the "baptized_by" field.
func BaptizedByIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBaptizedBy))
}

// BaptizedByNotNil applies the NotNil predicate on the "baptized_by" field.
func BaptizedByNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBaptizedBy))
}

// BaptizedByEqualFold applies the EqualFold predicate on the "baptized_by" field.
func BaptizedByEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldBaptizedBy, v))
}

// BaptizedByContainsFold applies the ContainsFold predicate on the "baptized_by" field.
func BaptizedByContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldBaptizedBy, v))
}

// BaptismChurchEQ applies the EQ predicate on the "baptism_church" field.
func BaptismChurchEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptismChurch, v))
}

// BaptismChurchNEQ applies the NEQ predicate on the "baptism_church" field.
func BaptismChurchNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBaptismChurch, v))
}

// BaptismChurchIn applies the In predicate on the "baptism_church" field.
func BaptismChurchIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBaptismChurch, vs...))
}

// BaptismChurchNotIn applies the NotIn predicate on the "baptism_church" field.
func BaptismChurchNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBaptismChurch, vs...))
}

// BaptismChurchGT applies the GT predicate on the "baptism_church" field.
func BaptismChurchGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBaptismChurch, v))
}

// BaptismChurchGTE applies the GTE predicate on the "baptism_church" field.
func BaptismChurchGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBaptismChurch, v))
}

// BaptismChurchLT applies the LT predicate on the "baptism_church" field.
func BaptismChurchLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBaptismChurch, v))
}

// BaptismChurchLTE applies the LTE predicate on the "baptism_church" field.
func BaptismChurchLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBaptismChurch, v))
}

// BaptismChurchContains applies the Contains predicate on the "baptism_church" field.
func BaptismChurchContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldBaptismChurch, v))
}

// BaptismChurchHasPrefix applies the HasPrefix predicate on the "baptism_church" field.
func BaptismChurchHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldBaptismChurch, v))
}

// BaptismChurchHasSuffix applies the HasSuffix predicate on the "baptism_church" field.
func BaptismChurchHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldBaptismChurch, v))
}

// BaptismChurchIsNil applies the IsNil predicate on the "baptism_church" field.
func BaptismChurchIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBaptismChurch))
}

// BaptismChurchNotNil applies the NotNil predicate on the "baptism_church" field.
func BaptismChurchNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBaptismChurch))
}

// BaptismChurchEqualFold applies the EqualFold predicate on the "baptism_church" field.
func BaptismChurchEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldBaptismChurch, v))
}

// BaptismChurchContainsFold applies the ContainsFold predicate on the "baptism_church" field.
func BaptismChurchContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldBaptismChurch, v))
}

// BaptismCertNumberEQ applies the EQ predicate on the "baptism_cert_number" field.
func BaptismCertNumberEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptismCertNumber, v))
}

// BaptismCertNumberNEQ applies the NEQ predicate on the "baptism_cert_number" field.
func BaptismCertNumberNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBaptismCertNumber, v))
}

// BaptismCertNumberIn applies the In predicate on the "baptism_cert_number" field.
func BaptismCertNumberIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBaptismCertNumber, vs...))
}

// BaptismCertNumberNotIn applies the NotIn predicate on the "baptism_cert_number" field.
func BaptismCertNumberNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBaptismCertNumber, vs...))
}

// BaptismCertNumberGT applies the GT predicate on the "baptism_cert_number" field.
func BaptismCertNumberGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBaptismCertNumber, v))
}

// BaptismCertNumberGTE applies the GTE predicate on the "baptism_cert_number" field.
func BaptismCertNumberGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBaptismCertNumber, v))
}

// BaptismCertNumberLT applies the LT predicate on the "baptism_cert_number" field.
func BaptismCertNumberLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBaptismCertNumber, v))
}

// BaptismCertNumberLTE applies the LTE predicate on the "baptism_cert_number" field.
func BaptismCertNumberLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBaptismCertNumber, v))
}

// BaptismCertNumberContains applies the Contains predicate on the "baptism_cert_number" field.
func BaptismCertNumberContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldBaptismCertNumber, v))
}

// BaptismCertNumberHasPrefix applies the HasPrefix predicate on the "baptism_cert_number" field.
func BaptismCertNumberHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldBaptismCertNumber, v))
}

// BaptismCertNumberHasSuffix applies the HasSuffix predicate on the "baptism_cert_number" field.
func BaptismCertNumberHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldBaptismCertNumber, v))
}

// BaptismCertNumberIsNil applies the IsNil predicate on the "baptism_cert_number" field.
func BaptismCertNumberIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBaptismCertNumber))
}

// BaptismCertNumberNotNil applies the NotNil predicate on the "baptism_cert_number" field.
func BaptismCertNumberNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBaptismCertNumber))
}

// BaptismCertNumberEqualFold applies the EqualFold predicate on the "baptism_cert_number" field.
func BaptismCertNumberEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldBaptismCertNumber, v))
}

// BaptismCertNumberContainsFold applies the ContainsFold predicate on the "baptism_cert_number" field.
func BaptismCertNumberContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldBaptismCertNumber, v))
}

// BaptismDateEQ applies the EQ predicate on the "baptism_date" field.
func BaptismDateEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBaptismDate, v))
}

// BaptismDateNEQ applies the NEQ predicate on the "baptism_date" field.
func BaptismDateNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBaptismDate, v))
}

// BaptismDateIn applies the In predicate on the "baptism_date" field.
func BaptismDateIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBaptismDate, vs...))
}

// BaptismDateNotIn applies the NotIn predicate on the "baptism_date" field.
func BaptismDateNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBaptismDate, vs...))
}

// BaptismDateGT applies the GT predicate on the "baptism_date" field.
func BaptismDateGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBaptismDate, v))
}

// BaptismDateGTE applies the GTE predicate on the "baptism_date" field.
func BaptismDateGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBaptismDate, v))
}

// BaptismDateLT applies the LT predicate on the "baptism_date" field.
func BaptismDateLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBaptismDate, v))
}

// BaptismDateLTE applies the LTE predicate on the "baptism_date" field.
func BaptismDateLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBaptismDate, v))
}

// BaptismDateIsNil applies the IsNil predicate on the "baptism_date" field.
func BaptismDateIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBaptismDate))
}

// BaptismDateNotNil applies the NotNil predicate on the "baptism_date" field.
func BaptismDateNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBaptismDate))
}

// MembershipYearEQ applies the EQ predicate on the "membership_year" field.
func MembershipYearEQ(v int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMembershipYear, v))
}

// MembershipYearNEQ applies the NEQ predicate on the "membership_year" field.
func MembershipYearNEQ(v int) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldMembershipYear, v))
}

// MembershipYearIn applies the In predicate on the "membership_year" field.
func MembershipYearIn(vs ...int) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldMembershipYear, vs...))
}

// MembershipYearNotIn applies the NotIn predicate on the "membership_year" field.
func MembershipYearNotIn(vs ...int) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldMembershipYear, vs...))
}

// MembershipYearGT applies the GT predicate on the "membership_year" field.
func MembershipYearGT(v int) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldMembershipYear, v))
}

// MembershipYearGTE applies the GTE predicate on the "membership_year" field.
func MembershipYearGTE(v int) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldMembershipYear, v))
}

// MembershipYearLT applies the LT predicate on the "membership_year" field.
func MembershipYearLT(v int) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldMembershipYear, v))
}

// MembershipYearLTE applies the LTE predicate on the "membership_year" field.
func MembershipYearLTE(v int) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldMembershipYear, v))
}

// PhotoURLEQ applies the EQ predicate on the "photo_url" field.
func PhotoURLEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURLNEQ applies the NEQ predicate on the "photo_url" field.
func PhotoURLNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPhotoURL, v))
}

// PhotoURLIn applies the In predicate on the "photo_url" field.
func PhotoURLIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPhotoURL, vs...))
}

// PhotoURLNotIn applies the NotIn predicate on the "photo_url" field.
func PhotoURLNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPhotoURL, vs...))
}

// PhotoURLGT applies the GT predicate on the "photo_url" field.
func PhotoURLGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPhotoURL, v))
}

// PhotoURLGTE applies the GTE predicate on the "photo_url" field.
func PhotoURLGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPhotoURL, v))
}

// PhotoURLLT applies the LT predicate on the "photo_url" field.
func PhotoURLLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPhotoURL, v))
}

// PhotoURLLTE applies the LTE predicate on the "photo_url" field.
func PhotoURLLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPhotoURL, v))
}

// PhotoURLContains applies the Contains predicate on the "photo_url" field.
func PhotoURLContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldPhotoURL, v))
}

// PhotoURLHasPrefix applies the HasPrefix predicate on the "photo_url" field.
func PhotoURLHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldPhotoURL, v))
}

// PhotoURLHasSuffix applies the HasSuffix predicate on the "photo_url" field.
func PhotoURLHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldPhotoURL, v))
}

// PhotoURLIsNil applies the IsNil predicate on the "photo_url" field.
func PhotoURLIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldPhotoURL))
}

// PhotoURLNotNil applies the NotNil predicate on the "photo_url" field.
func PhotoURLNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldPhotoURL))
}

// PhotoURLEqualFold applies the EqualFold predicate on the "photo_url" field.
func PhotoURLEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldPhotoURL, v))
}

// PhotoURLContainsFold applies the ContainsFold predicate on the "photo_url" field.
func PhotoURLContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldPhotoURL, v))
}

// PhotoDataEQ applies the EQ predicate on the "photo_data" field.
func PhotoDataEQ(v []byte) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhotoData, v))
}

// PhotoDataNEQ applies the NEQ predicate on the "photo_data" field.
func PhotoDataNEQ(v []byte) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPhotoData, v))
}

// PhotoDataIn applies the In predicate on the "photo_data" field.
func PhotoDataIn(vs ...[]byte) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPhotoData, vs...))
}

// PhotoDataNotIn applies the NotIn predicate on the "photo_data" field.
func PhotoDataNotIn(vs ...[]byte) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPhotoData, vs...))
}

// PhotoDataGT applies the GT predicate on the "photo_data" field.
func PhotoDataGT(v []byte) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPhotoData, v))
}

// PhotoDataGTE applies the GTE predicate on the "photo_data" field.
func PhotoDataGTE(v []byte) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPhotoData, v))
}

// PhotoDataLT applies the LT predicate on the "photo_data" field.
func PhotoDataLT(v []byte) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPhotoData, v))
}

// PhotoDataLTE applies the LTE predicate on the "photo_data" field.
func PhotoDataLTE(v []byte) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPhotoData, v))
}

// PhotoDataIsNil applies the IsNil predicate on the "photo_data" field.
func PhotoDataIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldPhotoData))
}

// PhotoDataNotNil applies the NotNil predicate on the "photo_data" field.
func PhotoDataNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldPhotoData))
}

// PhotoHashEQ applies the EQ predicate on the "photo_hash" field.
func PhotoHashEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhotoHash, v))
}

// PhotoHashNEQ applies the NEQ predicate on the "photo_hash" field.
func PhotoHashNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPhotoHash, v))
}

// PhotoHashIn applies the In predicate on the "photo_hash" field.
func PhotoHashIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPhotoHash, vs...))
}

// PhotoHashNotIn applies the NotIn predicate on the "photo_hash" field.
func PhotoHashNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPhotoHash, vs...))
}

// PhotoHashGT applies the GT predicate on the "photo_hash" field.
func PhotoHashGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPhotoHash, v))
}

// PhotoHashGTE applies the GTE predicate on the "photo_hash" field.
func PhotoHashGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPhotoHash, v))
}

// PhotoHashLT applies the LT predicate on the "photo_hash" field.
func PhotoHashLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPhotoHash, v))
}

// PhotoHashLTE applies the LTE predicate on the "photo_hash" field.
func PhotoHashLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPhotoHash, v))
}

// PhotoHashContains applies the Contains predicate on the "photo_hash" field.
func PhotoHashContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldPhotoHash, v))
}

// PhotoHashHasPrefix applies the HasPrefix predicate on the "photo_hash" field.
func PhotoHashHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldPhotoHash, v))
}

// PhotoHashHasSuffix applies the HasSuffix predicate on the "photo_hash" field.
func PhotoHashHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldPhotoHash, v))
}

// PhotoHashIsNil applies the IsNil predicate on the "photo_hash" field.
func PhotoHashIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldPhotoHash))
}

// PhotoHashNotNil applies the NotNil predicate on the "photo_hash" field.
func PhotoHashNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldPhotoHash))
}

// PhotoHashEqualFold applies the EqualFold predicate on the "photo_hash" field.
func PhotoHashEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldPhotoHash, v))
}

// PhotoHashContainsFold applies the ContainsFold predicate on the "photo_hash" field.
func PhotoHashContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldPhotoHash, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(sql.NotPredicates(p))
}
