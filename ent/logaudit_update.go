// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/logaudit"
	"github.com/ogidi/church-media/ent/predicate"
)

// LogAuditUpdate is the builder for updating LogAudit entities.
type LogAuditUpdate struct {
	config
	hooks    []Hook
	mutation *LogAuditMutation
}

// Where appends a list predicates to the LogAuditUpdate builder.
func (lau *LogAuditUpdate) Where(ps ...predicate.LogAudit) *LogAuditUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetAction sets the "action" field.
func (lau *LogAuditUpdate) SetAction(s string) *LogAuditUpdate {
	lau.mutation.SetAction(s)
	return lau
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableAction(s *string) *LogAuditUpdate {
	if s != nil {
		lau.SetAction(*s)
	}
	return lau
}

// SetEntityType sets the "entity_type" field.
func (lau *LogAuditUpdate) SetEntityType(s string) *LogAuditUpdate {
	lau.mutation.SetEntityType(s)
	return lau
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableEntityType(s *string) *LogAuditUpdate {
	if s != nil {
		lau.SetEntityType(*s)
	}
	return lau
}

// SetEntityID sets the "entity_id" field.
func (lau *LogAuditUpdate) SetEntityID(i int) *LogAuditUpdate {
	lau.mutation.ResetEntityID()
	lau.mutation.SetEntityID(i)
	return lau
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableEntityID(i *int) *LogAuditUpdate {
	if i != nil {
		lau.SetEntityID(*i)
	}
	return lau
}

// AddEntityID adds i to the "entity_id" field.
func (lau *LogAuditUpdate) AddEntityID(i int) *LogAuditUpdate {
	lau.mutation.AddEntityID(i)
	return lau
}

// SetEntityData sets the "entity_data" field.
func (lau *LogAuditUpdate) SetEntityData(m map[string]interface{}) *LogAuditUpdate {
	lau.mutation.SetEntityData(m)
	return lau
}

// ClearEntityData clears the value of the "entity_data" field.
func (lau *LogAuditUpdate) ClearEntityData() *LogAuditUpdate {
	lau.mutation.ClearEntityData()
	return lau
}

// SetCreatedBy sets the "created_by" field.
func (lau *LogAuditUpdate) SetCreatedBy(i int) *LogAuditUpdate {
	lau.mutation.ResetCreatedBy()
	lau.mutation.SetCreatedBy(i)
	return lau
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableCreatedBy(i *int) *LogAuditUpdate {
	if i != nil {
		lau.SetCreatedBy(*i)
	}
	return lau
}

// AddCreatedBy adds i to the "created_by" field.
func (lau *LogAuditUpdate) AddCreatedBy(i int) *LogAuditUpdate {
	lau.mutation.AddCreatedBy(i)
	return lau
}

// ClearCreatedBy clears the value of the "created_by" field.
func (lau *LogAuditUpdate) ClearCreatedBy() *LogAuditUpdate {
	lau.mutation.ClearCreatedBy()
	return lau
}

// SetIPAddress sets the "ip_address" field.
func (lau *LogAuditUpdate) SetIPAddress(s string) *LogAuditUpdate {
	lau.mutation.SetIPAddress(s)
	return lau
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableIPAddress(s *string) *LogAuditUpdate {
	if s != nil {
		lau.SetIPAddress(*s)
	}
	return lau
}

// SetUserAgent sets the "user_agent" field.
func (lau *LogAuditUpdate) SetUserAgent(s string) *LogAuditUpdate {
	lau.mutation.SetUserAgent(s)
	return lau
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableUserAgent(s *string) *LogAuditUpdate {
	if s != nil {
		lau.SetUserAgent(*s)
	}
	return lau
}

// ClearUserAgent clears the value of the "user_agent" field.
func (lau *LogAuditUpdate) ClearUserAgent() *LogAuditUpdate {
	lau.mutation.ClearUserAgent()
	return lau
}

// SetRequestID sets the "request_id" field.
func (lau *LogAuditUpdate) SetRequestID(s string) *LogAuditUpdate {
	lau.mutation.SetRequestID(s)
	return lau
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (lau *LogAuditUpdate) SetNillableRequestID(s *string) *LogAuditUpdate {
	if s != nil {
		lau.SetRequestID(*s)
	}
	return lau
}

// ClearRequestID clears the value of the "request_id" field.
func (lau *LogAuditUpdate) ClearRequestID() *LogAuditUpdate {
	lau.mutation.ClearRequestID()
	return lau
}

// SetMetadata sets the "metadata" field.
func (lau *LogAuditUpdate) SetMetadata(m map[string]interface{}) *LogAuditUpdate {
	lau.mutation.SetMetadata(m)
	return lau
}

// ClearMetadata clears the value of the "metadata" field.
func (lau *LogAuditUpdate) ClearMetadata() *LogAuditUpdate {
	lau.mutation.ClearMetadata()
	return lau
}

// Mutation returns the LogAuditMutation object of the builder.
func (lau *LogAuditUpdate) Mutation() *LogAuditMutation {
	return lau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LogAuditUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LogAuditUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LogAuditUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LogAuditUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LogAuditUpdate) check() error {
	if v, ok := lau.mutation.Action(); ok {
		if err := logaudit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "LogAudit.action": %w`, err)}
		}
	}
	if v, ok := lau.mutation.EntityType(); ok {
		if err := logaudit.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "LogAudit.entity_type": %w`, err)}
		}
	}
	if v, ok := lau.mutation.IPAddress(); ok {
		if err := logaudit.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "LogAudit.ip_address": %w`, err)}
		}
	}
	return nil
}

func (lau *LogAuditUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(logaudit.Table, logaudit.Columns, sqlgraph.NewFieldSpec(logaudit.FieldID, field.TypeInt))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.Action(); ok {
		_spec.SetField(logaudit.FieldAction, field.TypeString, value)
	}
	if value, ok := lau.mutation.EntityType(); ok {
		_spec.SetField(logaudit.FieldEntityType, field.TypeString, value)
	}
	if value, ok := lau.mutation.EntityID(); ok {
		_spec.SetField(logaudit.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := lau.mutation.AddedEntityID(); ok {
		_spec.AddField(logaudit.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := lau.mutation.EntityData(); ok {
		_spec.SetField(logaudit.FieldEntityData, field.TypeJSON, value)
	}
	if lau.mutation.EntityDataCleared() {
		_spec.ClearField(logaudit.FieldEntityData, field.TypeJSON)
	}
	if value, ok := lau.mutation.CreatedBy(); ok {
		_spec.SetField(logaudit.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := lau.mutation.AddedCreatedBy(); ok {
		_spec.AddField(logaudit.FieldCreatedBy, field.TypeInt, value)
	}
	if lau.mutation.CreatedByCleared() {
		_spec.ClearField(logaudit.FieldCreatedBy, field.TypeInt)
	}
	if value, ok := lau.mutation.IPAddress(); ok {
		_spec.SetField(logaudit.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := lau.mutation.UserAgent(); ok {
		_spec.SetField(logaudit.FieldUserAgent, field.TypeString, value)
	}
	if lau.mutation.UserAgentCleared() {
		_spec.ClearField(logaudit.FieldUserAgent, field.TypeString)
	}
	if value, ok := lau.mutation.RequestID(); ok {
		_spec.SetField(logaudit.FieldRequestID, field.TypeString, value)
	}
	if lau.mutation.RequestIDCleared() {
		_spec.ClearField(logaudit.FieldRequestID, field.TypeString)
	}
	if value, ok := lau.mutation.Metadata(); ok {
		_spec.SetField(logaudit.FieldMetadata, field.TypeJSON, value)
	}
	if lau.mutation.MetadataCleared() {
		_spec.ClearField(logaudit.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logaudit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LogAuditUpdateOne is the builder for updating a single LogAudit entity.
type LogAuditUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogAuditMutation
}

// SetAction sets the "action" field.
func (lauo *LogAuditUpdateOne) SetAction(s string) *LogAuditUpdateOne {
	lauo.mutation.SetAction(s)
	return lauo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableAction(s *string) *LogAuditUpdateOne {
	if s != nil {
		lauo.SetAction(*s)
	}
	return lauo
}

// SetEntityType sets the "entity_type" field.
func (lauo *LogAuditUpdateOne) SetEntityType(s string) *LogAuditUpdateOne {
	lauo.mutation.SetEntityType(s)
	return lauo
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableEntityType(s *string) *LogAuditUpdateOne {
	if s != nil {
		lauo.SetEntityType(*s)
	}
	return lauo
}

// SetEntityID sets the "entity_id" field.
func (lauo *LogAuditUpdateOne) SetEntityID(i int) *LogAuditUpdateOne {
	lauo.mutation.ResetEntityID()
	lauo.mutation.SetEntityID(i)
	return lauo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableEntityID(i *int) *LogAuditUpdateOne {
	if i != nil {
		lauo.SetEntityID(*i)
	}
	return lauo
}

// AddEntityID adds i to the "entity_id" field.
func (lauo *LogAuditUpdateOne) AddEntityID(i int) *LogAuditUpdateOne {
	lauo.mutation.AddEntityID(i)
	return lauo
}

// SetEntityData sets the "entity_data" field.
func (lauo *LogAuditUpdateOne) SetEntityData(m map[string]interface{}) *LogAuditUpdateOne {
	lauo.mutation.SetEntityData(m)
	return lauo
}

// ClearEntityData clears the value of the "entity_data" field.
func (lauo *LogAuditUpdateOne) ClearEntityData() *LogAuditUpdateOne {
	lauo.mutation.ClearEntityData()
	return lauo
}

// SetCreatedBy sets the "created_by" field.
func (lauo *LogAuditUpdateOne) SetCreatedBy(i int) *LogAuditUpdateOne {
	lauo.mutation.ResetCreatedBy()
	lauo.mutation.SetCreatedBy(i)
	return lauo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableCreatedBy(i *int) *LogAuditUpdateOne {
	if i != nil {
		lauo.SetCreatedBy(*i)
	}
	return lauo
}

// AddCreatedBy adds i to the "created_by" field.
func (lauo *LogAuditUpdateOne) AddCreatedBy(i int) *LogAuditUpdateOne {
	lauo.mutation.AddCreatedBy(i)
	return lauo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (lauo *LogAuditUpdateOne) ClearCreatedBy() *LogAuditUpdateOne {
	lauo.mutation.ClearCreatedBy()
	return lauo
}

// SetIPAddress sets the "ip_address" field.
func (lauo *LogAuditUpdateOne) SetIPAddress(s string) *LogAuditUpdateOne {
	lauo.mutation.SetIPAddress(s)
	return lauo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableIPAddress(s *string) *LogAuditUpdateOne {
	if s != nil {
		lauo.SetIPAddress(*s)
	}
	return lauo
}

// SetUserAgent sets the "user_agent" field.
func (lauo *LogAuditUpdateOne) SetUserAgent(s string) *LogAuditUpdateOne {
	lauo.mutation.SetUserAgent(s)
	return lauo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableUserAgent(s *string) *LogAuditUpdateOne {
	if s != nil {
		lauo.SetUserAgent(*s)
	}
	return lauo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (lauo *LogAuditUpdateOne) ClearUserAgent() *LogAuditUpdateOne {
	lauo.mutation.ClearUserAgent()
	return lauo
}

// SetRequestID sets the "request_id" field.
func (lauo *LogAuditUpdateOne) SetRequestID(s string) *LogAuditUpdateOne {
	lauo.mutation.SetRequestID(s)
	return lauo
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (lauo *LogAuditUpdateOne) SetNillableRequestID(s *string) *LogAuditUpdateOne {
	if s != nil {
		lauo.SetRequestID(*s)
	}
	return lauo
}

// ClearRequestID clears the value of the "request_id" field.
func (lauo *LogAuditUpdateOne) ClearRequestID() *LogAuditUpdateOne {
	lauo.mutation.ClearRequestID()
	return lauo
}

// SetMetadata sets the "metadata" field.
func (lauo *LogAuditUpdateOne) SetMetadata(m map[string]interface{}) *LogAuditUpdateOne {
	lauo.mutation.SetMetadata(m)
	return lauo
}

// ClearMetadata clears the value of the "metadata" field.
func (lauo *LogAuditUpdateOne) ClearMetadata() *LogAuditUpdateOne {
	lauo.mutation.ClearMetadata()
	return lauo
}

// Mutation returns the LogAuditMutation object of the builder.
func (lauo *LogAuditUpdateOne) Mutation() *LogAuditMutation {
	return lauo.mutation
}

// Where appends a list predicates to the LogAuditUpdate builder.
func (lauo *LogAuditUpdateOne) Where(ps ...predicate.LogAudit) *LogAuditUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LogAuditUpdateOne) Select(field string, fields ...string) *LogAuditUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LogAudit entity.
func (lauo *LogAuditUpdateOne) Save(ctx context.Context) (*LogAudit, error) {
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LogAuditUpdateOne) SaveX(ctx context.Context) *LogAudit {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LogAuditUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LogAuditUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LogAuditUpdateOne) check() error {
	if v, ok := lauo.mutation.Action(); ok {
		if err := logaudit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "LogAudit.action": %w`, err)}
		}
	}
	if v, ok := lauo.mutation.EntityType(); ok {
		if err := logaudit.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "LogAudit.entity_type": %w`, err)}
		}
	}
	if v, ok := lauo.mutation.IPAddress(); ok {
		if err := logaudit.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "LogAudit.ip_address": %w`, err)}
		}
	}
	return nil
}

func (lauo *LogAuditUpdateOne) sqlSave(ctx context.Context) (_node *LogAudit, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(logaudit.Table, logaudit.Columns, sqlgraph.NewFieldSpec(logaudit.FieldID, field.TypeInt))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogAudit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logaudit.FieldID)
		for _, f := range fields {
			if !logaudit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logaudit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.Action(); ok {
		_spec.SetField(logaudit.FieldAction, field.TypeString, value)
	}
	if value, ok := lauo.mutation.EntityType(); ok {
		_spec.SetField(logaudit.FieldEntityType, field.TypeString, value)
	}
	if value, ok := lauo.mutation.EntityID(); ok {
		_spec.SetField(logaudit.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.AddedEntityID(); ok {
		_spec.AddField(logaudit.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.EntityData(); ok {
		_spec.SetField(logaudit.FieldEntityData, field.TypeJSON, value)
	}
	if lauo.mutation.EntityDataCleared() {
		_spec.ClearField(logaudit.FieldEntityData, field.TypeJSON)
	}
	if value, ok := lauo.mutation.CreatedBy(); ok {
		_spec.SetField(logaudit.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(logaudit.FieldCreatedBy, field.TypeInt, value)
	}
	if lauo.mutation.CreatedByCleared() {
		_spec.ClearField(logaudit.FieldCreatedBy, field.TypeInt)
	}
	if value, ok := lauo.mutation.IPAddress(); ok {
		_spec.SetField(logaudit.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := lauo.mutation.UserAgent(); ok {
		_spec.SetField(logaudit.FieldUserAgent, field.TypeString, value)
	}
	if lauo.mutation.UserAgentCleared() {
		_spec.ClearField(logaudit.FieldUserAgent, field.TypeString)
	}
	if value, ok := lauo.mutation.RequestID(); ok {
		_spec.SetField(logaudit.FieldRequestID, field.TypeString, value)
	}
	if lauo.mutation.RequestIDCleared() {
		_spec.ClearField(logaudit.FieldRequestID, field.TypeString)
	}
	if value, ok := lauo.mutation.Metadata(); ok {
		_spec.SetField(logaudit.FieldMetadata, field.TypeJSON, value)
	}
	if lauo.mutation.MetadataCleared() {
		_spec.ClearField(logaudit.FieldMetadata, field.TypeJSON)
	}
	_node = &LogAudit{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logaudit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
