// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/ogidi/church-media/ent/contactprofile"
	"github.com/ogidi/church-media/ent/event"
	"github.com/ogidi/church-media/ent/logaudit"
	"github.com/ogidi/church-media/ent/member"
	"github.com/ogidi/church-media/ent/message"
	"github.com/ogidi/church-media/ent/response"
	"github.com/ogidi/church-media/ent/schema"
	"github.com/ogidi/church-media/ent/service"
	"github.com/ogidi/church-media/ent/session"
	"github.com/ogidi/church-media/ent/story"
	"github.com/ogidi/church-media/ent/subscribe"
	"github.com/ogidi/church-media/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contactprofileFields := schema.ContactProfile{}.Fields()
	_ = contactprofileFields
	// contactprofileDescFirstName is the schema descriptor for first_name field.
	contactprofileDescFirstName := contactprofileFields[0].Descriptor()
	// contactprofile.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	contactprofile.FirstNameValidator = func() func(string) error {
		validators := contactprofileDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contactprofileDescSurname is the schema descriptor for surname field.
	contactprofileDescSurname := contactprofileFields[1].Descriptor()
	// contactprofile.SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	contactprofile.SurnameValidator = func() func(string) error {
		validators := contactprofileDescSurname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(surname string) error {
			for _, fn := range fns {
				if err := fn(surname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contactprofileDescPhoneNumber is the schema descriptor for phone_number field.
	contactprofileDescPhoneNumber := contactprofileFields[2].Descriptor()
	// contactprofile.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	contactprofile.PhoneNumberValidator = contactprofileDescPhoneNumber.Validators[0].(func(string) error)
	// contactprofileDescOccupation is the schema descriptor for occupation field.
	contactprofileDescOccupation := contactprofileFields[7].Descriptor()
	// contactprofile.OccupationValidator is a validator for the "occupation" field. It is called by the builders before save.
	contactprofile.OccupationValidator = contactprofileDescOccupation.Validators[0].(func(string) error)
	// contactprofileDescMaritalStatus is the schema descriptor for marital_status field.
	contactprofileDescMaritalStatus := contactprofileFields[8].Descriptor()
	// contactprofile.MaritalStatusValidator is a validator for the "marital_status" field. It is called by the builders before save.
	contactprofile.MaritalStatusValidator = contactprofileDescMaritalStatus.Validators[0].(func(string) error)
	eventFields := schema.Event{}.Fields()
	_ = eventFields
	// eventDescTitle is the schema descriptor for title field.
	eventDescTitle := eventFields[0].Descriptor()
	// event.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	event.TitleValidator = eventDescTitle.Validators[0].(func(string) error)
	// eventDescFeatured is the schema descriptor for featured field.
	eventDescFeatured := eventFields[6].Descriptor()
	// event.DefaultFeatured holds the default value on creation for the featured field.
	event.DefaultFeatured = eventDescFeatured.Default.(bool)
	// eventDescCreatedAt is the schema descriptor for created_at field.
	eventDescCreatedAt := eventFields[7].Descriptor()
	// event.DefaultCreatedAt holds the default value on creation for the created_at field.
	event.DefaultCreatedAt = eventDescCreatedAt.Default.(func() time.Time)
	logauditFields := schema.LogAudit{}.Fields()
	_ = logauditFields
	// logauditDescAction is the schema descriptor for action field.
	logauditDescAction := logauditFields[1].Descriptor()
	// logaudit.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	logaudit.ActionValidator = logauditDescAction.Validators[0].(func(string) error)
	// logauditDescEntityType is the schema descriptor for entity_type field.
	logauditDescEntityType := logauditFields[2].Descriptor()
	// logaudit.EntityTypeValidator is a validator for the "entity_type" field. It is called by the builders before save.
	logaudit.EntityTypeValidator = logauditDescEntityType.Validators[0].(func(string) error)
	// logauditDescCreatedAt is the schema descriptor for created_at field.
	logauditDescCreatedAt := logauditFields[6].Descriptor()
	// logaudit.DefaultCreatedAt holds the default value on creation for the created_at field.
	logaudit.DefaultCreatedAt = logauditDescCreatedAt.Default.(func() time.Time)
	// logauditDescIPAddress is the schema descriptor for ip_address field.
	logauditDescIPAddress := logauditFields[7].Descriptor()
	// logaudit.IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	logaudit.IPAddressValidator = logauditDescIPAddress.Validators[0].(func(string) error)
	memberFields := schema.Member{}.Fields()
	_ = memberFields
	// memberDescSurname is the schema descriptor for surname field.
	memberDescSurname := memberFields[3].Descriptor()
	// member.SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	member.SurnameValidator = memberDescSurname.Validators[0].(func(string) error)
	// memberDescOtherNames is the schema descriptor for other_names field.
	memberDescOtherNames := memberFields[4].Descriptor()
	// member.OtherNamesValidator is a validator for the "other_names" field. It is called by the builders before save.
	member.OtherNamesValidator = memberDescOtherNames.Validators[0].(func(string) error)
	// memberDescOccupation is the schema descriptor for occupation field.
	memberDescOccupation := memberFields[14].Descriptor()
	// member.OccupationValidator is a validator for the "occupation" field. It is called by the builders before save.
	member.OccupationValidator = memberDescOccupation.Validators[0].(func(string) error)
	// memberDescHasTitleCard is the schema descriptor for has_title_card field.
	memberDescHasTitleCard := memberFields[15].Descriptor()
	// member.DefaultHasTitleCard holds the default value on creation for the has_title_card field.
	member.DefaultHasTitleCard = memberDescHasTitleCard.Default.(bool)
	// memberDescHasSpouse is the schema descriptor for has_spouse field.
	memberDescHasSpouse := memberFields[18].Descriptor()
	// member.DefaultHasSpouse holds the default value on creation for the has_spouse field.
	member.DefaultHasSpouse = memberDescHasSpouse.Default.(bool)
	// memberDescIsBaptized is the schema descriptor for is_baptized field.
	memberDescIsBaptized := memberFields[23].Descriptor()
	// member.DefaultIsBaptized holds the default value on creation for the is_baptized field.
	member.DefaultIsBaptized = memberDescIsBaptized.Default.(bool)
	// memberDescMembershipYear is the schema descriptor for membership_year field.
	memberDescMembershipYear := memberFields[28].Descriptor()
	// member.MembershipYearValidator is a validator for the "membership_year" field. It is called by the builders before save.
	member.MembershipYearValidator = memberDescMembershipYear.Validators[0].(func(int) error)
	// memberDescIsActive is the schema descriptor for is_active field.
	memberDescIsActive := memberFields[32].Descriptor()
	// member.DefaultIsActive holds the default value on creation for the is_active field.
	member.DefaultIsActive = memberDescIsActive.Default.(bool)
	// memberDescCreatedAt is the schema descriptor for created_at field.
	memberDescCreatedAt := memberFields[33].Descriptor()
	// member.DefaultCreatedAt holds the default value on creation for the created_at field.
	member.DefaultCreatedAt = memberDescCreatedAt.Default.(func() time.Time)
	// memberDescUpdatedAt is the schema descriptor for updated_at field.
	memberDescUpdatedAt := memberFields[34].Descriptor()
	// member.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	member.DefaultUpdatedAt = memberDescUpdatedAt.Default.(func() time.Time)
	// member.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	member.UpdateDefaultUpdatedAt = memberDescUpdatedAt.UpdateDefault.(func() time.Time)
	messageFields := schema.Message{}.Fields()
	_ = messageFields
	// messageDescCreatedAt is the schema descriptor for created_at field.
	messageDescCreatedAt := messageFields[7].Descriptor()
	// message.DefaultCreatedAt holds the default value on creation for the created_at field.
	message.DefaultCreatedAt = messageDescCreatedAt.Default.(func() time.Time)
	responseFields := schema.Response{}.Fields()
	_ = responseFields
	// responseDescCreatedAt is the schema descriptor for created_at field.
	responseDescCreatedAt := responseFields[5].Descriptor()
	// response.DefaultCreatedAt holds the default value on creation for the created_at field.
	response.DefaultCreatedAt = responseDescCreatedAt.Default.(func() time.Time)
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescName is the schema descriptor for name field.
	serviceDescName := serviceFields[2].Descriptor()
	// service.DefaultName holds the default value on creation for the name field.
	service.DefaultName = serviceDescName.Default.(string)
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescToken is the schema descriptor for token field.
	sessionDescToken := sessionFields[0].Descriptor()
	// session.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	session.TokenValidator = func() func(string) error {
		validators := sessionDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// sessionDescData is the schema descriptor for data field.
	sessionDescData := sessionFields[1].Descriptor()
	// session.DataValidator is a validator for the "data" field. It is called by the builders before save.
	session.DataValidator = sessionDescData.Validators[0].(func([]byte) error)
	// sessionDescExpiry is the schema descriptor for expiry field.
	sessionDescExpiry := sessionFields[2].Descriptor()
	// session.DefaultExpiry holds the default value on creation for the expiry field.
	session.DefaultExpiry = sessionDescExpiry.Default.(func() time.Time)
	storyFields := schema.Story{}.Fields()
	_ = storyFields
	// storyDescTitle is the schema descriptor for title field.
	storyDescTitle := storyFields[1].Descriptor()
	// story.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	story.TitleValidator = func() func(string) error {
		validators := storyDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// storyDescBody is the schema descriptor for body field.
	storyDescBody := storyFields[2].Descriptor()
	// story.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	story.BodyValidator = storyDescBody.Validators[0].(func(string) error)
	// storyDescExcerpt is the schema descriptor for excerpt field.
	storyDescExcerpt := storyFields[4].Descriptor()
	// story.ExcerptValidator is a validator for the "excerpt" field. It is called by the builders before save.
	story.ExcerptValidator = storyDescExcerpt.Validators[0].(func(string) error)
	// storyDescCreatedAt is the schema descriptor for created_at field.
	storyDescCreatedAt := storyFields[7].Descriptor()
	// story.DefaultCreatedAt holds the default value on creation for the created_at field.
	story.DefaultCreatedAt = storyDescCreatedAt.Default.(func() time.Time)
	// storyDescUpdatedAt is the schema descriptor for updated_at field.
	storyDescUpdatedAt := storyFields[8].Descriptor()
	// story.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	story.DefaultUpdatedAt = storyDescUpdatedAt.Default.(func() time.Time)
	// story.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	story.UpdateDefaultUpdatedAt = storyDescUpdatedAt.UpdateDefault.(func() time.Time)
	subscribeFields := schema.Subscribe{}.Fields()
	_ = subscribeFields
	// subscribeDescEmail is the schema descriptor for email field.
	subscribeDescEmail := subscribeFields[1].Descriptor()
	// subscribe.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	subscribe.EmailValidator = subscribeDescEmail.Validators[0].(func(string) error)
	// subscribeDescCreatedAt is the schema descriptor for created_at field.
	subscribeDescCreatedAt := subscribeFields[2].Descriptor()
	// subscribe.DefaultCreatedAt holds the default value on creation for the created_at field.
	subscribe.DefaultCreatedAt = subscribeDescCreatedAt.Default.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[10].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[13].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
