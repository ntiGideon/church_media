// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/attendancerecord"
	"github.com/ogidi/church-media/ent/service"
)

// AttendanceRecordCreate is the builder for creating a AttendanceRecord entity.
type AttendanceRecordCreate struct {
	config
	mutation *AttendanceRecordMutation
	hooks    []Hook
}

// SetMales sets the "males" field.
func (arc *AttendanceRecordCreate) SetMales(i int) *AttendanceRecordCreate {
	arc.mutation.SetMales(i)
	return arc
}

// SetFemales sets the "females" field.
func (arc *AttendanceRecordCreate) SetFemales(i int) *AttendanceRecordCreate {
	arc.mutation.SetFemales(i)
	return arc
}

// SetOffering sets the "offering" field.
func (arc *AttendanceRecordCreate) SetOffering(f float64) *AttendanceRecordCreate {
	arc.mutation.SetOffering(f)
	return arc
}

// SetTithe sets the "tithe" field.
func (arc *AttendanceRecordCreate) SetTithe(f float64) *AttendanceRecordCreate {
	arc.mutation.SetTithe(f)
	return arc
}

// SetID sets the "id" field.
func (arc *AttendanceRecordCreate) SetID(i int) *AttendanceRecordCreate {
	arc.mutation.SetID(i)
	return arc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (arc *AttendanceRecordCreate) SetServiceID(id int) *AttendanceRecordCreate {
	arc.mutation.SetServiceID(id)
	return arc
}

// SetService sets the "service" edge to the Service entity.
func (arc *AttendanceRecordCreate) SetService(s *Service) *AttendanceRecordCreate {
	return arc.SetServiceID(s.ID)
}

// Mutation returns the AttendanceRecordMutation object of the builder.
func (arc *AttendanceRecordCreate) Mutation() *AttendanceRecordMutation {
	return arc.mutation
}

// Save creates the AttendanceRecord in the database.
func (arc *AttendanceRecordCreate) Save(ctx context.Context) (*AttendanceRecord, error) {
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AttendanceRecordCreate) SaveX(ctx context.Context) *AttendanceRecord {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AttendanceRecordCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AttendanceRecordCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AttendanceRecordCreate) check() error {
	if _, ok := arc.mutation.Males(); !ok {
		return &ValidationError{Name: "males", err: errors.New(`ent: missing required field "AttendanceRecord.males"`)}
	}
	if _, ok := arc.mutation.Females(); !ok {
		return &ValidationError{Name: "females", err: errors.New(`ent: missing required field "AttendanceRecord.females"`)}
	}
	if _, ok := arc.mutation.Offering(); !ok {
		return &ValidationError{Name: "offering", err: errors.New(`ent: missing required field "AttendanceRecord.offering"`)}
	}
	if _, ok := arc.mutation.Tithe(); !ok {
		return &ValidationError{Name: "tithe", err: errors.New(`ent: missing required field "AttendanceRecord.tithe"`)}
	}
	if len(arc.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "AttendanceRecord.service"`)}
	}
	return nil
}

func (arc *AttendanceRecordCreate) sqlSave(ctx context.Context) (*AttendanceRecord, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AttendanceRecordCreate) createSpec() (*AttendanceRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &AttendanceRecord{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(attendancerecord.Table, sqlgraph.NewFieldSpec(attendancerecord.FieldID, field.TypeInt))
	)
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arc.mutation.Males(); ok {
		_spec.SetField(attendancerecord.FieldMales, field.TypeInt, value)
		_node.Males = value
	}
	if value, ok := arc.mutation.Females(); ok {
		_spec.SetField(attendancerecord.FieldFemales, field.TypeInt, value)
		_node.Females = value
	}
	if value, ok := arc.mutation.Offering(); ok {
		_spec.SetField(attendancerecord.FieldOffering, field.TypeFloat64, value)
		_node.Offering = value
	}
	if value, ok := arc.mutation.Tithe(); ok {
		_spec.SetField(attendancerecord.FieldTithe, field.TypeFloat64, value)
		_node.Tithe = value
	}
	if nodes := arc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancerecord.ServiceTable,
			Columns: []string{attendancerecord.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_attendance_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttendanceRecordCreateBulk is the builder for creating many AttendanceRecord entities in bulk.
type AttendanceRecordCreateBulk struct {
	config
	err      error
	builders []*AttendanceRecordCreate
}

// Save creates the AttendanceRecord entities in the database.
func (arcb *AttendanceRecordCreateBulk) Save(ctx context.Context) ([]*AttendanceRecord, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AttendanceRecord, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttendanceRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AttendanceRecordCreateBulk) SaveX(ctx context.Context) []*AttendanceRecord {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AttendanceRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AttendanceRecordCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
