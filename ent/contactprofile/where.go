// Code generated by ent, DO NOT EDIT.

package contactprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ogidi/church-media/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldFirstName, v))
}

// Surname applies equality check predicate on the "surname" field. It's identical to SurnameEQ.
func Surname(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldSurname, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldPhoneNumber, v))
}

// ProfilePicture applies equality check predicate on the "profile_picture" field. It's identical to ProfilePictureEQ.
func ProfilePicture(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldProfilePicture, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldAddress, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldDateOfBirth, v))
}

// Occupation applies equality check predicate on the "occupation" field. It's identical to OccupationEQ.
func Occupation(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldOccupation, v))
}

// MaritalStatus applies equality check predicate on the "marital_status" field. It's identical to MaritalStatusEQ.
func MaritalStatus(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldMaritalStatus, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldFirstName, v))
}

// SurnameEQ applies the EQ predicate on the "surname" field.
func SurnameEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldSurname, v))
}

// SurnameNEQ applies the NEQ predicate on the "surname" field.
func SurnameNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldSurname, v))
}

// SurnameIn applies the In predicate on the "surname" field.
func SurnameIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldSurname, vs...))
}

// SurnameNotIn applies the NotIn predicate on the "surname" field.
func SurnameNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldSurname, vs...))
}

// SurnameGT applies the GT predicate on the "surname" field.
func SurnameGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldSurname, v))
}

// SurnameGTE applies the GTE predicate on the "surname" field.
func SurnameGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldSurname, v))
}

// SurnameLT applies the LT predicate on the "surname" field.
func SurnameLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldSurname, v))
}

// SurnameLTE applies the LTE predicate on the "surname" field.
func SurnameLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldSurname, v))
}

// SurnameContains applies the Contains predicate on the "surname" field.
func SurnameContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldSurname, v))
}

// SurnameHasPrefix applies the HasPrefix predicate on the "surname" field.
func SurnameHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldSurname, v))
}

// SurnameHasSuffix applies the HasSuffix predicate on the "surname" field.
func SurnameHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldSurname, v))
}

// SurnameEqualFold applies the EqualFold predicate on the "surname" field.
func SurnameEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldSurname, v))
}

// SurnameContainsFold applies the ContainsFold predicate on the "surname" field.
func SurnameContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldSurname, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// ProfilePictureEQ applies the EQ predicate on the "profile_picture" field.
func ProfilePictureEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldProfilePicture, v))
}

// ProfilePictureNEQ applies the NEQ predicate on the "profile_picture" field.
func ProfilePictureNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldProfilePicture, v))
}

// ProfilePictureIn applies the In predicate on the "profile_picture" field.
func ProfilePictureIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldProfilePicture, vs...))
}

// ProfilePictureNotIn applies the NotIn predicate on the "profile_picture" field.
func ProfilePictureNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldProfilePicture, vs...))
}

// ProfilePictureGT applies the GT predicate on the "profile_picture" field.
func ProfilePictureGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldProfilePicture, v))
}

// ProfilePictureGTE applies the GTE predicate on the "profile_picture" field.
func ProfilePictureGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldProfilePicture, v))
}

// ProfilePictureLT applies the LT predicate on the "profile_picture" field.
func ProfilePictureLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldProfilePicture, v))
}

// ProfilePictureLTE applies the LTE predicate on the "profile_picture" field.
func ProfilePictureLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldProfilePicture, v))
}

// ProfilePictureContains applies the Contains predicate on the "profile_picture" field.
func ProfilePictureContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldProfilePicture, v))
}

// ProfilePictureHasPrefix applies the HasPrefix predicate on the "profile_picture" field.
func ProfilePictureHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldProfilePicture, v))
}

// ProfilePictureHasSuffix applies the HasSuffix predicate on the "profile_picture" field.
func ProfilePictureHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldProfilePicture, v))
}

// ProfilePictureIsNil applies the IsNil predicate on the "profile_picture" field.
func ProfilePictureIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldProfilePicture))
}

// ProfilePictureNotNil applies the NotNil predicate on the "profile_picture" field.
func ProfilePictureNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldProfilePicture))
}

// ProfilePictureEqualFold applies the EqualFold predicate on the "profile_picture" field.
func ProfilePictureEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldProfilePicture, v))
}

// ProfilePictureContainsFold applies the ContainsFold predicate on the "profile_picture" field.
func ProfilePictureContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldProfilePicture, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldAddress, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldDateOfBirth, v))
}

// DateOfBirthIsNil applies the IsNil predicate on the "date_of_birth" field.
func DateOfBirthIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldDateOfBirth))
}

// DateOfBirthNotNil applies the NotNil predicate on the "date_of_birth" field.
func DateOfBirthNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldDateOfBirth))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldGender, vs...))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldGender))
}

// OccupationEQ applies the EQ predicate on the "occupation" field.
func OccupationEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldOccupation, v))
}

// OccupationNEQ applies the NEQ predicate on the "occupation" field.
func OccupationNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldOccupation, v))
}

// OccupationIn applies the In predicate on the "occupation" field.
func OccupationIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldOccupation, vs...))
}

// OccupationNotIn applies the NotIn predicate on the "occupation" field.
func OccupationNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldOccupation, vs...))
}

// OccupationGT applies the GT predicate on the "occupation" field.
func OccupationGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldOccupation, v))
}

// OccupationGTE applies the GTE predicate on the "occupation" field.
func OccupationGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldOccupation, v))
}

// OccupationLT applies the LT predicate on the "occupation" field.
func OccupationLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldOccupation, v))
}

// OccupationLTE applies the LTE predicate on the "occupation" field.
func OccupationLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldOccupation, v))
}

// OccupationContains applies the Contains predicate on the "occupation" field.
func OccupationContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldOccupation, v))
}

// OccupationHasPrefix applies the HasPrefix predicate on the "occupation" field.
func OccupationHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldOccupation, v))
}

// OccupationHasSuffix applies the HasSuffix predicate on the "occupation" field.
func OccupationHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldOccupation, v))
}

// OccupationIsNil applies the IsNil predicate on the "occupation" field.
func OccupationIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldOccupation))
}

// OccupationNotNil applies the NotNil predicate on the "occupation" field.
func OccupationNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldOccupation))
}

// OccupationEqualFold applies the EqualFold predicate on the "occupation" field.
func OccupationEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldOccupation, v))
}

// OccupationContainsFold applies the ContainsFold predicate on the "occupation" field.
func OccupationContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldOccupation, v))
}

// MaritalStatusEQ applies the EQ predicate on the "marital_status" field.
func MaritalStatusEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEQ(FieldMaritalStatus, v))
}

// MaritalStatusNEQ applies the NEQ predicate on the "marital_status" field.
func MaritalStatusNEQ(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNEQ(FieldMaritalStatus, v))
}

// MaritalStatusIn applies the In predicate on the "marital_status" field.
func MaritalStatusIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIn(FieldMaritalStatus, vs...))
}

// MaritalStatusNotIn applies the NotIn predicate on the "marital_status" field.
func MaritalStatusNotIn(vs ...string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotIn(FieldMaritalStatus, vs...))
}

// MaritalStatusGT applies the GT predicate on the "marital_status" field.
func MaritalStatusGT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGT(FieldMaritalStatus, v))
}

// MaritalStatusGTE applies the GTE predicate on the "marital_status" field.
func MaritalStatusGTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldGTE(FieldMaritalStatus, v))
}

// MaritalStatusLT applies the LT predicate on the "marital_status" field.
func MaritalStatusLT(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLT(FieldMaritalStatus, v))
}

// MaritalStatusLTE applies the LTE predicate on the "marital_status" field.
func MaritalStatusLTE(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldLTE(FieldMaritalStatus, v))
}

// MaritalStatusContains applies the Contains predicate on the "marital_status" field.
func MaritalStatusContains(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContains(FieldMaritalStatus, v))
}

// MaritalStatusHasPrefix applies the HasPrefix predicate on the "marital_status" field.
func MaritalStatusHasPrefix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasPrefix(FieldMaritalStatus, v))
}

// MaritalStatusHasSuffix applies the HasSuffix predicate on the "marital_status" field.
func MaritalStatusHasSuffix(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldHasSuffix(FieldMaritalStatus, v))
}

// MaritalStatusIsNil applies the IsNil predicate on the "marital_status" field.
func MaritalStatusIsNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldIsNull(FieldMaritalStatus))
}

// MaritalStatusNotNil applies the NotNil predicate on the "marital_status" field.
func MaritalStatusNotNil() predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldNotNull(FieldMaritalStatus))
}

// MaritalStatusEqualFold applies the EqualFold predicate on the "marital_status" field.
func MaritalStatusEqualFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldEqualFold(FieldMaritalStatus, v))
}

// MaritalStatusContainsFold applies the ContainsFold predicate on the "marital_status" field.
func MaritalStatusContainsFold(v string) predicate.ContactProfile {
	return predicate.ContactProfile(sql.FieldContainsFold(FieldMaritalStatus, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ContactProfile {
	return predicate.ContactProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ContactProfile {
	return predicate.ContactProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContactProfile) predicate.ContactProfile {
	return predicate.ContactProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContactProfile) predicate.ContactProfile {
	return predicate.ContactProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContactProfile) predicate.ContactProfile {
	return predicate.ContactProfile(sql.NotPredicates(p))
}
