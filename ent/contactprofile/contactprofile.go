// Code generated by ent, DO NOT EDIT.

package contactprofile

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contactprofile type in the database.
	Label = "contact_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldProfilePicture holds the string denoting the profile_picture field in the database.
	FieldProfilePicture = "profile_picture"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldOccupation holds the string denoting the occupation field in the database.
	FieldOccupation = "occupation"
	// FieldMaritalStatus holds the string denoting the marital_status field in the database.
	FieldMaritalStatus = "marital_status"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the contactprofile in the database.
	Table = "contact_profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "contact_profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_contact_profile"
)

// Columns holds all SQL columns for contactprofile fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldSurname,
	FieldPhoneNumber,
	FieldProfilePicture,
	FieldAddress,
	FieldDateOfBirth,
	FieldGender,
	FieldOccupation,
	FieldMaritalStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "contact_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_contact_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// OccupationValidator is a validator for the "occupation" field. It is called by the builders before save.
	OccupationValidator func(string) error
	// MaritalStatusValidator is a validator for the "marital_status" field. It is called by the builders before save.
	MaritalStatusValidator func(string) error
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale:
		return nil
	default:
		return fmt.Errorf("contactprofile: invalid enum value for gender field: %q", ge)
	}
}

// OrderOption defines the ordering options for the ContactProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// BySurname orders the results by the surname field.
func BySurname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByProfilePicture orders the results by the profile_picture field.
func ByProfilePicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilePicture, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByOccupation orders the results by the occupation field.
func ByOccupation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccupation, opts...).ToFunc()
}

// ByMaritalStatus orders the results by the marital_status field.
func ByMaritalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaritalStatus, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
