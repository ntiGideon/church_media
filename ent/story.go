// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/story"
	"github.com/ogidi/church-media/ent/user"
)

// Story is the model entity for the Story schema.
type Story struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt string `json:"excerpt,omitempty"`
	// Status holds the value of the "status" field.
	Status story.Status `json:"status,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID int `json:"author_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoryQuery when eager-loading is set.
	Edges        StoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StoryEdges holds the relations/edges for other nodes in the graph.
type StoryEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoryEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Story) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case story.FieldID, story.FieldAuthorID:
			values[i] = new(sql.NullInt64)
		case story.FieldTitle, story.FieldBody, story.FieldImage, story.FieldExcerpt, story.FieldStatus:
			values[i] = new(sql.NullString)
		case story.FieldPublishedAt, story.FieldCreatedAt, story.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Story fields.
func (s *Story) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case story.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case story.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case story.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				s.Body = value.String
			}
		case story.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				s.Image = value.String
			}
		case story.FieldExcerpt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value.Valid {
				s.Excerpt = value.String
			}
		case story.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = story.Status(value.String)
			}
		case story.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				s.PublishedAt = value.Time
			}
		case story.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case story.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case story.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				s.AuthorID = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Story.
// This includes values selected through modifiers, order, etc.
func (s *Story) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Story entity.
func (s *Story) QueryAuthor() *UserQuery {
	return NewStoryClient(s.config).QueryAuthor(s)
}

// Update returns a builder for updating this Story.
// Note that you need to call Story.Unwrap() before calling this method if this Story
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Story) Update() *StoryUpdateOne {
	return NewStoryClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Story entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Story) Unwrap() *Story {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Story is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Story) String() string {
	var builder strings.Builder
	builder.WriteString("Story(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(s.Body)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(s.Image)
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(s.Excerpt)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(s.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", s.AuthorID))
	builder.WriteByte(')')
	return builder.String()
}

// Stories is a parsable slice of Story.
type Stories []*Story
