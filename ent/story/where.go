// Code generated by ent, DO NOT EDIT.

package story

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ogidi/church-media/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldTitle, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldBody, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldImage, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldExcerpt, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldLikes, v))
}

// Dislikes applies equality check predicate on the "dislikes" field. It's identical to DislikesEQ.
func Dislikes(v int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldDislikes, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldPublishedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldUpdatedAt, v))
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldAuthorID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldTitle, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldBody, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldImage, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptIsNil applies the IsNil predicate on the "excerpt" field.
func ExcerptIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldExcerpt))
}

// ExcerptNotNil applies the NotNil predicate on the "excerpt" field.
func ExcerptNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldExcerpt))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldExcerpt, v))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldLikes, v))
}

// DislikesEQ applies the EQ predicate on the "dislikes" field.
func DislikesEQ(v int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldDislikes, v))
}

// DislikesNEQ applies the NEQ predicate on the "dislikes" field.
func DislikesNEQ(v int) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldDislikes, v))
}

// DislikesIn applies the In predicate on the "dislikes" field.
func DislikesIn(vs ...int) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldDislikes, vs...))
}

// DislikesNotIn applies the NotIn predicate on the "dislikes" field.
func DislikesNotIn(vs ...int) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldDislikes, vs...))
}

// DislikesGT applies the GT predicate on the "dislikes" field.
func DislikesGT(v int) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldDislikes, v))
}

// DislikesGTE applies the GTE predicate on the "dislikes" field.
func DislikesGTE(v int) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldDislikes, v))
}

// DislikesLT applies the LT predicate on the "dislikes" field.
func DislikesLT(v int) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldDislikes, v))
}

// DislikesLTE applies the LTE predicate on the "dislikes" field.
func DislikesLTE(v int) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldDislikes, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldStatus, vs...))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldPublishedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldUpdatedAt, v))
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v int) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldAuthorID, v))
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...int) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldAuthorID, vs...))
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...int) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldAuthorID, vs...))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Story) predicate.Story {
	return predicate.Story(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Story) predicate.Story {
	return predicate.Story(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Story) predicate.Story {
	return predicate.Story(sql.NotPredicates(p))
}
