// Code generated by ent, DO NOT EDIT.

package message

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeResponses holds the string denoting the responses edge name in mutations.
	EdgeResponses = "responses"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// ResponsesTable is the table that holds the responses relation/edge.
	ResponsesTable = "responses"
	// ResponsesInverseTable is the table name for the Response entity.
	// It exists in this package in order to avoid circular dependency with the "response" package.
	ResponsesInverseTable = "responses"
	// ResponsesColumn is the table column denoting the responses relation/edge.
	ResponsesColumn = "user_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPhone,
	FieldSubject,
	FieldState,
	FieldDescription,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Subject defines the type for the "subject" enum field.
type Subject string

// SubjectGENERAL_ENQUIRY is the default value of the Subject enum.
const DefaultSubject = SubjectGENERAL_ENQUIRY

// Subject values.
const (
	SubjectGENERAL_ENQUIRY   Subject = "GENERAL_ENQUIRY"
	SubjectPRAYER_REQUEST    Subject = "PRAYER_REQUEST"
	SubjectMINISTRY_QUESTION Subject = "MINISTRY_QUESTION"
	SubjectEVENT_INFORMATION Subject = "EVENT_INFORMATION"
	SubjectOTHER             Subject = "OTHER"
)

func (s Subject) String() string {
	return string(s)
}

// SubjectValidator is a validator for the "subject" field enum values. It is called by the builders before save.
func SubjectValidator(s Subject) error {
	switch s {
	case SubjectGENERAL_ENQUIRY, SubjectPRAYER_REQUEST, SubjectMINISTRY_QUESTION, SubjectEVENT_INFORMATION, SubjectOTHER:
		return nil
	default:
		return fmt.Errorf("message: invalid enum value for subject field: %q", s)
	}
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateREAD      State = "READ"
	StateUNREAD    State = "UNREAD"
	StateRESPONDED State = "RESPONDED"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateREAD, StateUNREAD, StateRESPONDED:
		return nil
	default:
		return fmt.Errorf("message: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByResponsesCount orders the results by responses count.
func ByResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResponsesStep(), opts...)
	}
}

// ByResponses orders the results by responses terms.
func ByResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
	)
}
