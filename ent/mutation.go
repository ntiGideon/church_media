// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/attendancerecord"
	"github.com/ogidi/church-media/ent/contactprofile"
	"github.com/ogidi/church-media/ent/event"
	"github.com/ogidi/church-media/ent/member"
	"github.com/ogidi/church-media/ent/message"
	"github.com/ogidi/church-media/ent/predicate"
	"github.com/ogidi/church-media/ent/response"
	"github.com/ogidi/church-media/ent/service"
	"github.com/ogidi/church-media/ent/session"
	"github.com/ogidi/church-media/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttendanceRecord = "AttendanceRecord"
	TypeContactProfile   = "ContactProfile"
	TypeEvent            = "Event"
	TypeMember           = "Member"
	TypeMessage          = "Message"
	TypeResponse         = "Response"
	TypeService          = "Service"
	TypeSession          = "Session"
	TypeUser             = "User"
)

// AttendanceRecordMutation represents an operation that mutates the AttendanceRecord nodes in the graph.
type AttendanceRecordMutation struct {
	config
	op             Op
	typ            string
	id             *int
	males          *int
	addmales       *int
	females        *int
	addfemales     *int
	offering       *float64
	addoffering    *float64
	tithe          *float64
	addtithe       *float64
	clearedFields  map[string]struct{}
	service        *int
	clearedservice bool
	done           bool
	oldValue       func(context.Context) (*AttendanceRecord, error)
	predicates     []predicate.AttendanceRecord
}

var _ ent.Mutation = (*AttendanceRecordMutation)(nil)

// attendancerecordOption allows management of the mutation configuration using functional options.
type attendancerecordOption func(*AttendanceRecordMutation)

// newAttendanceRecordMutation creates new mutation for the AttendanceRecord entity.
func newAttendanceRecordMutation(c config, op Op, opts ...attendancerecordOption) *AttendanceRecordMutation {
	m := &AttendanceRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeAttendanceRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttendanceRecordID sets the ID field of the mutation.
func withAttendanceRecordID(id int) attendancerecordOption {
	return func(m *AttendanceRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *AttendanceRecord
		)
		m.oldValue = func(ctx context.Context) (*AttendanceRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttendanceRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttendanceRecord sets the old AttendanceRecord of the mutation.
func withAttendanceRecord(node *AttendanceRecord) attendancerecordOption {
	return func(m *AttendanceRecordMutation) {
		m.oldValue = func(context.Context) (*AttendanceRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttendanceRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttendanceRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AttendanceRecord entities.
func (m *AttendanceRecordMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttendanceRecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttendanceRecordMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttendanceRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMales sets the "males" field.
func (m *AttendanceRecordMutation) SetMales(i int) {
	m.males = &i
	m.addmales = nil
}

// Males returns the value of the "males" field in the mutation.
func (m *AttendanceRecordMutation) Males() (r int, exists bool) {
	v := m.males
	if v == nil {
		return
	}
	return *v, true
}

// OldMales returns the old "males" field's value of the AttendanceRecord entity.
// If the AttendanceRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceRecordMutation) OldMales(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMales is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMales requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMales: %w", err)
	}
	return oldValue.Males, nil
}

// AddMales adds i to the "males" field.
func (m *AttendanceRecordMutation) AddMales(i int) {
	if m.addmales != nil {
		*m.addmales += i
	} else {
		m.addmales = &i
	}
}

// AddedMales returns the value that was added to the "males" field in this mutation.
func (m *AttendanceRecordMutation) AddedMales() (r int, exists bool) {
	v := m.addmales
	if v == nil {
		return
	}
	return *v, true
}

// ResetMales resets all changes to the "males" field.
func (m *AttendanceRecordMutation) ResetMales() {
	m.males = nil
	m.addmales = nil
}

// SetFemales sets the "females" field.
func (m *AttendanceRecordMutation) SetFemales(i int) {
	m.females = &i
	m.addfemales = nil
}

// Females returns the value of the "females" field in the mutation.
func (m *AttendanceRecordMutation) Females() (r int, exists bool) {
	v := m.females
	if v == nil {
		return
	}
	return *v, true
}

// OldFemales returns the old "females" field's value of the AttendanceRecord entity.
// If the AttendanceRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceRecordMutation) OldFemales(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFemales is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFemales requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFemales: %w", err)
	}
	return oldValue.Females, nil
}

// AddFemales adds i to the "females" field.
func (m *AttendanceRecordMutation) AddFemales(i int) {
	if m.addfemales != nil {
		*m.addfemales += i
	} else {
		m.addfemales = &i
	}
}

// AddedFemales returns the value that was added to the "females" field in this mutation.
func (m *AttendanceRecordMutation) AddedFemales() (r int, exists bool) {
	v := m.addfemales
	if v == nil {
		return
	}
	return *v, true
}

// ResetFemales resets all changes to the "females" field.
func (m *AttendanceRecordMutation) ResetFemales() {
	m.females = nil
	m.addfemales = nil
}

// SetOffering sets the "offering" field.
func (m *AttendanceRecordMutation) SetOffering(f float64) {
	m.offering = &f
	m.addoffering = nil
}

// Offering returns the value of the "offering" field in the mutation.
func (m *AttendanceRecordMutation) Offering() (r float64, exists bool) {
	v := m.offering
	if v == nil {
		return
	}
	return *v, true
}

// OldOffering returns the old "offering" field's value of the AttendanceRecord entity.
// If the AttendanceRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceRecordMutation) OldOffering(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOffering is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOffering requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOffering: %w", err)
	}
	return oldValue.Offering, nil
}

// AddOffering adds f to the "offering" field.
func (m *AttendanceRecordMutation) AddOffering(f float64) {
	if m.addoffering != nil {
		*m.addoffering += f
	} else {
		m.addoffering = &f
	}
}

// AddedOffering returns the value that was added to the "offering" field in this mutation.
func (m *AttendanceRecordMutation) AddedOffering() (r float64, exists bool) {
	v := m.addoffering
	if v == nil {
		return
	}
	return *v, true
}

// ResetOffering resets all changes to the "offering" field.
func (m *AttendanceRecordMutation) ResetOffering() {
	m.offering = nil
	m.addoffering = nil
}

// SetTithe sets the "tithe" field.
func (m *AttendanceRecordMutation) SetTithe(f float64) {
	m.tithe = &f
	m.addtithe = nil
}

// Tithe returns the value of the "tithe" field in the mutation.
func (m *AttendanceRecordMutation) Tithe() (r float64, exists bool) {
	v := m.tithe
	if v == nil {
		return
	}
	return *v, true
}

// OldTithe returns the old "tithe" field's value of the AttendanceRecord entity.
// If the AttendanceRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceRecordMutation) OldTithe(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTithe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTithe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTithe: %w", err)
	}
	return oldValue.Tithe, nil
}

// AddTithe adds f to the "tithe" field.
func (m *AttendanceRecordMutation) AddTithe(f float64) {
	if m.addtithe != nil {
		*m.addtithe += f
	} else {
		m.addtithe = &f
	}
}

// AddedTithe returns the value that was added to the "tithe" field in this mutation.
func (m *AttendanceRecordMutation) AddedTithe() (r float64, exists bool) {
	v := m.addtithe
	if v == nil {
		return
	}
	return *v, true
}

// ResetTithe resets all changes to the "tithe" field.
func (m *AttendanceRecordMutation) ResetTithe() {
	m.tithe = nil
	m.addtithe = nil
}

// SetServiceID sets the "service" edge to the Service entity by id.
func (m *AttendanceRecordMutation) SetServiceID(id int) {
	m.service = &id
}

// ClearService clears the "service" edge to the Service entity.
func (m *AttendanceRecordMutation) ClearService() {
	m.clearedservice = true
}

// ServiceCleared reports if the "service" edge to the Service entity was cleared.
func (m *AttendanceRecordMutation) ServiceCleared() bool {
	return m.clearedservice
}

// ServiceID returns the "service" edge ID in the mutation.
func (m *AttendanceRecordMutation) ServiceID() (id int, exists bool) {
	if m.service != nil {
		return *m.service, true
	}
	return
}

// ServiceIDs returns the "service" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ServiceID instead. It exists only for internal usage by the builders.
func (m *AttendanceRecordMutation) ServiceIDs() (ids []int) {
	if id := m.service; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetService resets all changes to the "service" edge.
func (m *AttendanceRecordMutation) ResetService() {
	m.service = nil
	m.clearedservice = false
}

// Where appends a list predicates to the AttendanceRecordMutation builder.
func (m *AttendanceRecordMutation) Where(ps ...predicate.AttendanceRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttendanceRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttendanceRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttendanceRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttendanceRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttendanceRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttendanceRecord).
func (m *AttendanceRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttendanceRecordMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.males != nil {
		fields = append(fields, attendancerecord.FieldMales)
	}
	if m.females != nil {
		fields = append(fields, attendancerecord.FieldFemales)
	}
	if m.offering != nil {
		fields = append(fields, attendancerecord.FieldOffering)
	}
	if m.tithe != nil {
		fields = append(fields, attendancerecord.FieldTithe)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttendanceRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attendancerecord.FieldMales:
		return m.Males()
	case attendancerecord.FieldFemales:
		return m.Females()
	case attendancerecord.FieldOffering:
		return m.Offering()
	case attendancerecord.FieldTithe:
		return m.Tithe()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttendanceRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attendancerecord.FieldMales:
		return m.OldMales(ctx)
	case attendancerecord.FieldFemales:
		return m.OldFemales(ctx)
	case attendancerecord.FieldOffering:
		return m.OldOffering(ctx)
	case attendancerecord.FieldTithe:
		return m.OldTithe(ctx)
	}
	return nil, fmt.Errorf("unknown AttendanceRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendanceRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attendancerecord.FieldMales:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMales(v)
		return nil
	case attendancerecord.FieldFemales:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFemales(v)
		return nil
	case attendancerecord.FieldOffering:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOffering(v)
		return nil
	case attendancerecord.FieldTithe:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTithe(v)
		return nil
	}
	return fmt.Errorf("unknown AttendanceRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttendanceRecordMutation) AddedFields() []string {
	var fields []string
	if m.addmales != nil {
		fields = append(fields, attendancerecord.FieldMales)
	}
	if m.addfemales != nil {
		fields = append(fields, attendancerecord.FieldFemales)
	}
	if m.addoffering != nil {
		fields = append(fields, attendancerecord.FieldOffering)
	}
	if m.addtithe != nil {
		fields = append(fields, attendancerecord.FieldTithe)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttendanceRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attendancerecord.FieldMales:
		return m.AddedMales()
	case attendancerecord.FieldFemales:
		return m.AddedFemales()
	case attendancerecord.FieldOffering:
		return m.AddedOffering()
	case attendancerecord.FieldTithe:
		return m.AddedTithe()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendanceRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attendancerecord.FieldMales:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMales(v)
		return nil
	case attendancerecord.FieldFemales:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFemales(v)
		return nil
	case attendancerecord.FieldOffering:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOffering(v)
		return nil
	case attendancerecord.FieldTithe:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTithe(v)
		return nil
	}
	return fmt.Errorf("unknown AttendanceRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttendanceRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttendanceRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttendanceRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttendanceRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttendanceRecordMutation) ResetField(name string) error {
	switch name {
	case attendancerecord.FieldMales:
		m.ResetMales()
		return nil
	case attendancerecord.FieldFemales:
		m.ResetFemales()
		return nil
	case attendancerecord.FieldOffering:
		m.ResetOffering()
		return nil
	case attendancerecord.FieldTithe:
		m.ResetTithe()
		return nil
	}
	return fmt.Errorf("unknown AttendanceRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttendanceRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.service != nil {
		edges = append(edges, attendancerecord.EdgeService)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttendanceRecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attendancerecord.EdgeService:
		if id := m.service; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttendanceRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttendanceRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttendanceRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedservice {
		edges = append(edges, attendancerecord.EdgeService)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttendanceRecordMutation) EdgeCleared(name string) bool {
	switch name {
	case attendancerecord.EdgeService:
		return m.clearedservice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttendanceRecordMutation) ClearEdge(name string) error {
	switch name {
	case attendancerecord.EdgeService:
		m.ClearService()
		return nil
	}
	return fmt.Errorf("unknown AttendanceRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttendanceRecordMutation) ResetEdge(name string) error {
	switch name {
	case attendancerecord.EdgeService:
		m.ResetService()
		return nil
	}
	return fmt.Errorf("unknown AttendanceRecord edge %s", name)
}

// ContactProfileMutation represents an operation that mutates the ContactProfile nodes in the graph.
type ContactProfileMutation struct {
	config
	op              Op
	typ             string
	id              *int
	first_name      *string
	surname         *string
	phone_number    *string
	profile_picture *string
	address         *string
	date_of_birth   *time.Time
	gender          *contactprofile.Gender
	occupation      *string
	marital_status  *string
	clearedFields   map[string]struct{}
	user            *int
	cleareduser     bool
	done            bool
	oldValue        func(context.Context) (*ContactProfile, error)
	predicates      []predicate.ContactProfile
}

var _ ent.Mutation = (*ContactProfileMutation)(nil)

// contactprofileOption allows management of the mutation configuration using functional options.
type contactprofileOption func(*ContactProfileMutation)

// newContactProfileMutation creates new mutation for the ContactProfile entity.
func newContactProfileMutation(c config, op Op, opts ...contactprofileOption) *ContactProfileMutation {
	m := &ContactProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeContactProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContactProfileID sets the ID field of the mutation.
func withContactProfileID(id int) contactprofileOption {
	return func(m *ContactProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *ContactProfile
		)
		m.oldValue = func(ctx context.Context) (*ContactProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContactProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContactProfile sets the old ContactProfile of the mutation.
func withContactProfile(node *ContactProfile) contactprofileOption {
	return func(m *ContactProfileMutation) {
		m.oldValue = func(context.Context) (*ContactProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContactProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContactProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContactProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContactProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ContactProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *ContactProfileMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *ContactProfileMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *ContactProfileMutation) ResetFirstName() {
	m.first_name = nil
}

// SetSurname sets the "surname" field.
func (m *ContactProfileMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *ContactProfileMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldSurname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *ContactProfileMutation) ResetSurname() {
	m.surname = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *ContactProfileMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *ContactProfileMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldPhoneNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (m *ContactProfileMutation) ClearPhoneNumber() {
	m.phone_number = nil
	m.clearedFields[contactprofile.FieldPhoneNumber] = struct{}{}
}

// PhoneNumberCleared returns if the "phone_number" field was cleared in this mutation.
func (m *ContactProfileMutation) PhoneNumberCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldPhoneNumber]
	return ok
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *ContactProfileMutation) ResetPhoneNumber() {
	m.phone_number = nil
	delete(m.clearedFields, contactprofile.FieldPhoneNumber)
}

// SetProfilePicture sets the "profile_picture" field.
func (m *ContactProfileMutation) SetProfilePicture(s string) {
	m.profile_picture = &s
}

// ProfilePicture returns the value of the "profile_picture" field in the mutation.
func (m *ContactProfileMutation) ProfilePicture() (r string, exists bool) {
	v := m.profile_picture
	if v == nil {
		return
	}
	return *v, true
}

// OldProfilePicture returns the old "profile_picture" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldProfilePicture(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfilePicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfilePicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfilePicture: %w", err)
	}
	return oldValue.ProfilePicture, nil
}

// ClearProfilePicture clears the value of the "profile_picture" field.
func (m *ContactProfileMutation) ClearProfilePicture() {
	m.profile_picture = nil
	m.clearedFields[contactprofile.FieldProfilePicture] = struct{}{}
}

// ProfilePictureCleared returns if the "profile_picture" field was cleared in this mutation.
func (m *ContactProfileMutation) ProfilePictureCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldProfilePicture]
	return ok
}

// ResetProfilePicture resets all changes to the "profile_picture" field.
func (m *ContactProfileMutation) ResetProfilePicture() {
	m.profile_picture = nil
	delete(m.clearedFields, contactprofile.FieldProfilePicture)
}

// SetAddress sets the "address" field.
func (m *ContactProfileMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ContactProfileMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *ContactProfileMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[contactprofile.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *ContactProfileMutation) AddressCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *ContactProfileMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, contactprofile.FieldAddress)
}

// SetDateOfBirth sets the "date_of_birth" field.
func (m *ContactProfileMutation) SetDateOfBirth(t time.Time) {
	m.date_of_birth = &t
}

// DateOfBirth returns the value of the "date_of_birth" field in the mutation.
func (m *ContactProfileMutation) DateOfBirth() (r time.Time, exists bool) {
	v := m.date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfBirth returns the old "date_of_birth" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldDateOfBirth(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateOfBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateOfBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfBirth: %w", err)
	}
	return oldValue.DateOfBirth, nil
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (m *ContactProfileMutation) ClearDateOfBirth() {
	m.date_of_birth = nil
	m.clearedFields[contactprofile.FieldDateOfBirth] = struct{}{}
}

// DateOfBirthCleared returns if the "date_of_birth" field was cleared in this mutation.
func (m *ContactProfileMutation) DateOfBirthCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldDateOfBirth]
	return ok
}

// ResetDateOfBirth resets all changes to the "date_of_birth" field.
func (m *ContactProfileMutation) ResetDateOfBirth() {
	m.date_of_birth = nil
	delete(m.clearedFields, contactprofile.FieldDateOfBirth)
}

// SetGender sets the "gender" field.
func (m *ContactProfileMutation) SetGender(c contactprofile.Gender) {
	m.gender = &c
}

// Gender returns the value of the "gender" field in the mutation.
func (m *ContactProfileMutation) Gender() (r contactprofile.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldGender(ctx context.Context) (v contactprofile.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *ContactProfileMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[contactprofile.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *ContactProfileMutation) GenderCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *ContactProfileMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, contactprofile.FieldGender)
}

// SetOccupation sets the "occupation" field.
func (m *ContactProfileMutation) SetOccupation(s string) {
	m.occupation = &s
}

// Occupation returns the value of the "occupation" field in the mutation.
func (m *ContactProfileMutation) Occupation() (r string, exists bool) {
	v := m.occupation
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupation returns the old "occupation" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldOccupation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupation: %w", err)
	}
	return oldValue.Occupation, nil
}

// ClearOccupation clears the value of the "occupation" field.
func (m *ContactProfileMutation) ClearOccupation() {
	m.occupation = nil
	m.clearedFields[contactprofile.FieldOccupation] = struct{}{}
}

// OccupationCleared returns if the "occupation" field was cleared in this mutation.
func (m *ContactProfileMutation) OccupationCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldOccupation]
	return ok
}

// ResetOccupation resets all changes to the "occupation" field.
func (m *ContactProfileMutation) ResetOccupation() {
	m.occupation = nil
	delete(m.clearedFields, contactprofile.FieldOccupation)
}

// SetMaritalStatus sets the "marital_status" field.
func (m *ContactProfileMutation) SetMaritalStatus(s string) {
	m.marital_status = &s
}

// MaritalStatus returns the value of the "marital_status" field in the mutation.
func (m *ContactProfileMutation) MaritalStatus() (r string, exists bool) {
	v := m.marital_status
	if v == nil {
		return
	}
	return *v, true
}

// OldMaritalStatus returns the old "marital_status" field's value of the ContactProfile entity.
// If the ContactProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactProfileMutation) OldMaritalStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaritalStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaritalStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaritalStatus: %w", err)
	}
	return oldValue.MaritalStatus, nil
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (m *ContactProfileMutation) ClearMaritalStatus() {
	m.marital_status = nil
	m.clearedFields[contactprofile.FieldMaritalStatus] = struct{}{}
}

// MaritalStatusCleared returns if the "marital_status" field was cleared in this mutation.
func (m *ContactProfileMutation) MaritalStatusCleared() bool {
	_, ok := m.clearedFields[contactprofile.FieldMaritalStatus]
	return ok
}

// ResetMaritalStatus resets all changes to the "marital_status" field.
func (m *ContactProfileMutation) ResetMaritalStatus() {
	m.marital_status = nil
	delete(m.clearedFields, contactprofile.FieldMaritalStatus)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ContactProfileMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ContactProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ContactProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ContactProfileMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ContactProfileMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ContactProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ContactProfileMutation builder.
func (m *ContactProfileMutation) Where(ps ...predicate.ContactProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContactProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContactProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ContactProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContactProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContactProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ContactProfile).
func (m *ContactProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContactProfileMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.first_name != nil {
		fields = append(fields, contactprofile.FieldFirstName)
	}
	if m.surname != nil {
		fields = append(fields, contactprofile.FieldSurname)
	}
	if m.phone_number != nil {
		fields = append(fields, contactprofile.FieldPhoneNumber)
	}
	if m.profile_picture != nil {
		fields = append(fields, contactprofile.FieldProfilePicture)
	}
	if m.address != nil {
		fields = append(fields, contactprofile.FieldAddress)
	}
	if m.date_of_birth != nil {
		fields = append(fields, contactprofile.FieldDateOfBirth)
	}
	if m.gender != nil {
		fields = append(fields, contactprofile.FieldGender)
	}
	if m.occupation != nil {
		fields = append(fields, contactprofile.FieldOccupation)
	}
	if m.marital_status != nil {
		fields = append(fields, contactprofile.FieldMaritalStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContactProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contactprofile.FieldFirstName:
		return m.FirstName()
	case contactprofile.FieldSurname:
		return m.Surname()
	case contactprofile.FieldPhoneNumber:
		return m.PhoneNumber()
	case contactprofile.FieldProfilePicture:
		return m.ProfilePicture()
	case contactprofile.FieldAddress:
		return m.Address()
	case contactprofile.FieldDateOfBirth:
		return m.DateOfBirth()
	case contactprofile.FieldGender:
		return m.Gender()
	case contactprofile.FieldOccupation:
		return m.Occupation()
	case contactprofile.FieldMaritalStatus:
		return m.MaritalStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContactProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contactprofile.FieldFirstName:
		return m.OldFirstName(ctx)
	case contactprofile.FieldSurname:
		return m.OldSurname(ctx)
	case contactprofile.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case contactprofile.FieldProfilePicture:
		return m.OldProfilePicture(ctx)
	case contactprofile.FieldAddress:
		return m.OldAddress(ctx)
	case contactprofile.FieldDateOfBirth:
		return m.OldDateOfBirth(ctx)
	case contactprofile.FieldGender:
		return m.OldGender(ctx)
	case contactprofile.FieldOccupation:
		return m.OldOccupation(ctx)
	case contactprofile.FieldMaritalStatus:
		return m.OldMaritalStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ContactProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contactprofile.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case contactprofile.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case contactprofile.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case contactprofile.FieldProfilePicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfilePicture(v)
		return nil
	case contactprofile.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case contactprofile.FieldDateOfBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfBirth(v)
		return nil
	case contactprofile.FieldGender:
		v, ok := value.(contactprofile.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case contactprofile.FieldOccupation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupation(v)
		return nil
	case contactprofile.FieldMaritalStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaritalStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ContactProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContactProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContactProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ContactProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContactProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contactprofile.FieldPhoneNumber) {
		fields = append(fields, contactprofile.FieldPhoneNumber)
	}
	if m.FieldCleared(contactprofile.FieldProfilePicture) {
		fields = append(fields, contactprofile.FieldProfilePicture)
	}
	if m.FieldCleared(contactprofile.FieldAddress) {
		fields = append(fields, contactprofile.FieldAddress)
	}
	if m.FieldCleared(contactprofile.FieldDateOfBirth) {
		fields = append(fields, contactprofile.FieldDateOfBirth)
	}
	if m.FieldCleared(contactprofile.FieldGender) {
		fields = append(fields, contactprofile.FieldGender)
	}
	if m.FieldCleared(contactprofile.FieldOccupation) {
		fields = append(fields, contactprofile.FieldOccupation)
	}
	if m.FieldCleared(contactprofile.FieldMaritalStatus) {
		fields = append(fields, contactprofile.FieldMaritalStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContactProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContactProfileMutation) ClearField(name string) error {
	switch name {
	case contactprofile.FieldPhoneNumber:
		m.ClearPhoneNumber()
		return nil
	case contactprofile.FieldProfilePicture:
		m.ClearProfilePicture()
		return nil
	case contactprofile.FieldAddress:
		m.ClearAddress()
		return nil
	case contactprofile.FieldDateOfBirth:
		m.ClearDateOfBirth()
		return nil
	case contactprofile.FieldGender:
		m.ClearGender()
		return nil
	case contactprofile.FieldOccupation:
		m.ClearOccupation()
		return nil
	case contactprofile.FieldMaritalStatus:
		m.ClearMaritalStatus()
		return nil
	}
	return fmt.Errorf("unknown ContactProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContactProfileMutation) ResetField(name string) error {
	switch name {
	case contactprofile.FieldFirstName:
		m.ResetFirstName()
		return nil
	case contactprofile.FieldSurname:
		m.ResetSurname()
		return nil
	case contactprofile.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case contactprofile.FieldProfilePicture:
		m.ResetProfilePicture()
		return nil
	case contactprofile.FieldAddress:
		m.ResetAddress()
		return nil
	case contactprofile.FieldDateOfBirth:
		m.ResetDateOfBirth()
		return nil
	case contactprofile.FieldGender:
		m.ResetGender()
		return nil
	case contactprofile.FieldOccupation:
		m.ResetOccupation()
		return nil
	case contactprofile.FieldMaritalStatus:
		m.ResetMaritalStatus()
		return nil
	}
	return fmt.Errorf("unknown ContactProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContactProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, contactprofile.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContactProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contactprofile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContactProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContactProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContactProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, contactprofile.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContactProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case contactprofile.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContactProfileMutation) ClearEdge(name string) error {
	switch name {
	case contactprofile.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ContactProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContactProfileMutation) ResetEdge(name string) error {
	switch name {
	case contactprofile.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ContactProfile edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	description   *string
	start_time    *time.Time
	end_time      *time.Time
	location      *string
	image_url     *string
	featured      *bool
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Event, error)
	predicates    []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *EventMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *EventMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *EventMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *EventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *EventMutation) ResetDescription() {
	m.description = nil
}

// SetStartTime sets the "start_time" field.
func (m *EventMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *EventMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *EventMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *EventMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *EventMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *EventMutation) ResetEndTime() {
	m.end_time = nil
}

// SetLocation sets the "location" field.
func (m *EventMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *EventMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *EventMutation) ResetLocation() {
	m.location = nil
}

// SetImageURL sets the "image_url" field.
func (m *EventMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *EventMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *EventMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[event.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *EventMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[event.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *EventMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, event.FieldImageURL)
}

// SetFeatured sets the "featured" field.
func (m *EventMutation) SetFeatured(b bool) {
	m.featured = &b
}

// Featured returns the value of the "featured" field in the mutation.
func (m *EventMutation) Featured() (r bool, exists bool) {
	v := m.featured
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatured returns the old "featured" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldFeatured(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatured is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatured requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatured: %w", err)
	}
	return oldValue.Featured, nil
}

// ResetFeatured resets all changes to the "featured" field.
func (m *EventMutation) ResetFeatured() {
	m.featured = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.title != nil {
		fields = append(fields, event.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, event.FieldDescription)
	}
	if m.start_time != nil {
		fields = append(fields, event.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, event.FieldEndTime)
	}
	if m.location != nil {
		fields = append(fields, event.FieldLocation)
	}
	if m.image_url != nil {
		fields = append(fields, event.FieldImageURL)
	}
	if m.featured != nil {
		fields = append(fields, event.FieldFeatured)
	}
	if m.created_at != nil {
		fields = append(fields, event.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldTitle:
		return m.Title()
	case event.FieldDescription:
		return m.Description()
	case event.FieldStartTime:
		return m.StartTime()
	case event.FieldEndTime:
		return m.EndTime()
	case event.FieldLocation:
		return m.Location()
	case event.FieldImageURL:
		return m.ImageURL()
	case event.FieldFeatured:
		return m.Featured()
	case event.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldTitle:
		return m.OldTitle(ctx)
	case event.FieldDescription:
		return m.OldDescription(ctx)
	case event.FieldStartTime:
		return m.OldStartTime(ctx)
	case event.FieldEndTime:
		return m.OldEndTime(ctx)
	case event.FieldLocation:
		return m.OldLocation(ctx)
	case event.FieldImageURL:
		return m.OldImageURL(ctx)
	case event.FieldFeatured:
		return m.OldFeatured(ctx)
	case event.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case event.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case event.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case event.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case event.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case event.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case event.FieldFeatured:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatured(v)
		return nil
	case event.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldImageURL) {
		fields = append(fields, event.FieldImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldImageURL:
		m.ClearImageURL()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldTitle:
		m.ResetTitle()
		return nil
	case event.FieldDescription:
		m.ResetDescription()
		return nil
	case event.FieldStartTime:
		m.ResetStartTime()
		return nil
	case event.FieldEndTime:
		m.ResetEndTime()
		return nil
	case event.FieldLocation:
		m.ResetLocation()
		return nil
	case event.FieldImageURL:
		m.ResetImageURL()
		return nil
	case event.FieldFeatured:
		m.ResetFeatured()
		return nil
	case event.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Event edge %s", name)
}

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	form_number         *string
	id_number           *string
	surname             *string
	other_names         *string
	dob                 *time.Time
	gender              *member.Gender
	hometown            *string
	region              *string
	residence           *string
	address             *string
	mobile              *string
	email               *string
	sunday_school_class *string
	occupation          *string
	has_title_card      *bool
	title_card_number   *string
	day_born            *string
	has_spouse          *bool
	spouse_id_number    *string
	spouse_name         *string
	spouse_occupation   *string
	spouse_contact      *string
	is_baptized         *bool
	baptized_by         *string
	baptism_church      *string
	baptism_cert_number *string
	baptism_date        *time.Time
	membership_year     *int
	addmembership_year  *int
	photo_url           *string
	photo_data          *[]byte
	photo_hash          *string
	is_active           *bool
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Member, error)
	predicates          []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id int) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Member entities.
func (m *MemberMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Member.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormNumber sets the "form_number" field.
func (m *MemberMutation) SetFormNumber(s string) {
	m.form_number = &s
}

// FormNumber returns the value of the "form_number" field in the mutation.
func (m *MemberMutation) FormNumber() (r string, exists bool) {
	v := m.form_number
	if v == nil {
		return
	}
	return *v, true
}

// OldFormNumber returns the old "form_number" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldFormNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormNumber: %w", err)
	}
	return oldValue.FormNumber, nil
}

// ClearFormNumber clears the value of the "form_number" field.
func (m *MemberMutation) ClearFormNumber() {
	m.form_number = nil
	m.clearedFields[member.FieldFormNumber] = struct{}{}
}

// FormNumberCleared returns if the "form_number" field was cleared in this mutation.
func (m *MemberMutation) FormNumberCleared() bool {
	_, ok := m.clearedFields[member.FieldFormNumber]
	return ok
}

// ResetFormNumber resets all changes to the "form_number" field.
func (m *MemberMutation) ResetFormNumber() {
	m.form_number = nil
	delete(m.clearedFields, member.FieldFormNumber)
}

// SetIDNumber sets the "id_number" field.
func (m *MemberMutation) SetIDNumber(s string) {
	m.id_number = &s
}

// IDNumber returns the value of the "id_number" field in the mutation.
func (m *MemberMutation) IDNumber() (r string, exists bool) {
	v := m.id_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDNumber returns the old "id_number" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldIDNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDNumber: %w", err)
	}
	return oldValue.IDNumber, nil
}

// ResetIDNumber resets all changes to the "id_number" field.
func (m *MemberMutation) ResetIDNumber() {
	m.id_number = nil
}

// SetSurname sets the "surname" field.
func (m *MemberMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *MemberMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSurname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *MemberMutation) ResetSurname() {
	m.surname = nil
}

// SetOtherNames sets the "other_names" field.
func (m *MemberMutation) SetOtherNames(s string) {
	m.other_names = &s
}

// OtherNames returns the value of the "other_names" field in the mutation.
func (m *MemberMutation) OtherNames() (r string, exists bool) {
	v := m.other_names
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherNames returns the old "other_names" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldOtherNames(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherNames is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherNames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherNames: %w", err)
	}
	return oldValue.OtherNames, nil
}

// ResetOtherNames resets all changes to the "other_names" field.
func (m *MemberMutation) ResetOtherNames() {
	m.other_names = nil
}

// SetDob sets the "dob" field.
func (m *MemberMutation) SetDob(t time.Time) {
	m.dob = &t
}

// Dob returns the value of the "dob" field in the mutation.
func (m *MemberMutation) Dob() (r time.Time, exists bool) {
	v := m.dob
	if v == nil {
		return
	}
	return *v, true
}

// OldDob returns the old "dob" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldDob(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDob is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDob requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDob: %w", err)
	}
	return oldValue.Dob, nil
}

// ResetDob resets all changes to the "dob" field.
func (m *MemberMutation) ResetDob() {
	m.dob = nil
}

// SetGender sets the "gender" field.
func (m *MemberMutation) SetGender(value member.Gender) {
	m.gender = &value
}

// Gender returns the value of the "gender" field in the mutation.
func (m *MemberMutation) Gender() (r member.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldGender(ctx context.Context) (v member.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *MemberMutation) ResetGender() {
	m.gender = nil
}

// SetHometown sets the "hometown" field.
func (m *MemberMutation) SetHometown(s string) {
	m.hometown = &s
}

// Hometown returns the value of the "hometown" field in the mutation.
func (m *MemberMutation) Hometown() (r string, exists bool) {
	v := m.hometown
	if v == nil {
		return
	}
	return *v, true
}

// OldHometown returns the old "hometown" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldHometown(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHometown is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHometown requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHometown: %w", err)
	}
	return oldValue.Hometown, nil
}

// ResetHometown resets all changes to the "hometown" field.
func (m *MemberMutation) ResetHometown() {
	m.hometown = nil
}

// SetRegion sets the "region" field.
func (m *MemberMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *MemberMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ResetRegion resets all changes to the "region" field.
func (m *MemberMutation) ResetRegion() {
	m.region = nil
}

// SetResidence sets the "residence" field.
func (m *MemberMutation) SetResidence(s string) {
	m.residence = &s
}

// Residence returns the value of the "residence" field in the mutation.
func (m *MemberMutation) Residence() (r string, exists bool) {
	v := m.residence
	if v == nil {
		return
	}
	return *v, true
}

// OldResidence returns the old "residence" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldResidence(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResidence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResidence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResidence: %w", err)
	}
	return oldValue.Residence, nil
}

// ClearResidence clears the value of the "residence" field.
func (m *MemberMutation) ClearResidence() {
	m.residence = nil
	m.clearedFields[member.FieldResidence] = struct{}{}
}

// ResidenceCleared returns if the "residence" field was cleared in this mutation.
func (m *MemberMutation) ResidenceCleared() bool {
	_, ok := m.clearedFields[member.FieldResidence]
	return ok
}

// ResetResidence resets all changes to the "residence" field.
func (m *MemberMutation) ResetResidence() {
	m.residence = nil
	delete(m.clearedFields, member.FieldResidence)
}

// SetAddress sets the "address" field.
func (m *MemberMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *MemberMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *MemberMutation) ResetAddress() {
	m.address = nil
}

// SetMobile sets the "mobile" field.
func (m *MemberMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *MemberMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *MemberMutation) ResetMobile() {
	m.mobile = nil
}

// SetEmail sets the "email" field.
func (m *MemberMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MemberMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *MemberMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[member.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *MemberMutation) EmailCleared() bool {
	_, ok := m.clearedFields[member.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *MemberMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, member.FieldEmail)
}

// SetSundaySchoolClass sets the "sunday_school_class" field.
func (m *MemberMutation) SetSundaySchoolClass(s string) {
	m.sunday_school_class = &s
}

// SundaySchoolClass returns the value of the "sunday_school_class" field in the mutation.
func (m *MemberMutation) SundaySchoolClass() (r string, exists bool) {
	v := m.sunday_school_class
	if v == nil {
		return
	}
	return *v, true
}

// OldSundaySchoolClass returns the old "sunday_school_class" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSundaySchoolClass(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSundaySchoolClass is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSundaySchoolClass requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSundaySchoolClass: %w", err)
	}
	return oldValue.SundaySchoolClass, nil
}

// ClearSundaySchoolClass clears the value of the "sunday_school_class" field.
func (m *MemberMutation) ClearSundaySchoolClass() {
	m.sunday_school_class = nil
	m.clearedFields[member.FieldSundaySchoolClass] = struct{}{}
}

// SundaySchoolClassCleared returns if the "sunday_school_class" field was cleared in this mutation.
func (m *MemberMutation) SundaySchoolClassCleared() bool {
	_, ok := m.clearedFields[member.FieldSundaySchoolClass]
	return ok
}

// ResetSundaySchoolClass resets all changes to the "sunday_school_class" field.
func (m *MemberMutation) ResetSundaySchoolClass() {
	m.sunday_school_class = nil
	delete(m.clearedFields, member.FieldSundaySchoolClass)
}

// SetOccupation sets the "occupation" field.
func (m *MemberMutation) SetOccupation(s string) {
	m.occupation = &s
}

// Occupation returns the value of the "occupation" field in the mutation.
func (m *MemberMutation) Occupation() (r string, exists bool) {
	v := m.occupation
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupation returns the old "occupation" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldOccupation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupation: %w", err)
	}
	return oldValue.Occupation, nil
}

// ResetOccupation resets all changes to the "occupation" field.
func (m *MemberMutation) ResetOccupation() {
	m.occupation = nil
}

// SetHasTitleCard sets the "has_title_card" field.
func (m *MemberMutation) SetHasTitleCard(b bool) {
	m.has_title_card = &b
}

// HasTitleCard returns the value of the "has_title_card" field in the mutation.
func (m *MemberMutation) HasTitleCard() (r bool, exists bool) {
	v := m.has_title_card
	if v == nil {
		return
	}
	return *v, true
}

// OldHasTitleCard returns the old "has_title_card" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldHasTitleCard(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasTitleCard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasTitleCard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasTitleCard: %w", err)
	}
	return oldValue.HasTitleCard, nil
}

// ResetHasTitleCard resets all changes to the "has_title_card" field.
func (m *MemberMutation) ResetHasTitleCard() {
	m.has_title_card = nil
}

// SetTitleCardNumber sets the "title_card_number" field.
func (m *MemberMutation) SetTitleCardNumber(s string) {
	m.title_card_number = &s
}

// TitleCardNumber returns the value of the "title_card_number" field in the mutation.
func (m *MemberMutation) TitleCardNumber() (r string, exists bool) {
	v := m.title_card_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleCardNumber returns the old "title_card_number" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldTitleCardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleCardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleCardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleCardNumber: %w", err)
	}
	return oldValue.TitleCardNumber, nil
}

// ClearTitleCardNumber clears the value of the "title_card_number" field.
func (m *MemberMutation) ClearTitleCardNumber() {
	m.title_card_number = nil
	m.clearedFields[member.FieldTitleCardNumber] = struct{}{}
}

// TitleCardNumberCleared returns if the "title_card_number" field was cleared in this mutation.
func (m *MemberMutation) TitleCardNumberCleared() bool {
	_, ok := m.clearedFields[member.FieldTitleCardNumber]
	return ok
}

// ResetTitleCardNumber resets all changes to the "title_card_number" field.
func (m *MemberMutation) ResetTitleCardNumber() {
	m.title_card_number = nil
	delete(m.clearedFields, member.FieldTitleCardNumber)
}

// SetDayBorn sets the "day_born" field.
func (m *MemberMutation) SetDayBorn(s string) {
	m.day_born = &s
}

// DayBorn returns the value of the "day_born" field in the mutation.
func (m *MemberMutation) DayBorn() (r string, exists bool) {
	v := m.day_born
	if v == nil {
		return
	}
	return *v, true
}

// OldDayBorn returns the old "day_born" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldDayBorn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDayBorn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDayBorn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDayBorn: %w", err)
	}
	return oldValue.DayBorn, nil
}

// ClearDayBorn clears the value of the "day_born" field.
func (m *MemberMutation) ClearDayBorn() {
	m.day_born = nil
	m.clearedFields[member.FieldDayBorn] = struct{}{}
}

// DayBornCleared returns if the "day_born" field was cleared in this mutation.
func (m *MemberMutation) DayBornCleared() bool {
	_, ok := m.clearedFields[member.FieldDayBorn]
	return ok
}

// ResetDayBorn resets all changes to the "day_born" field.
func (m *MemberMutation) ResetDayBorn() {
	m.day_born = nil
	delete(m.clearedFields, member.FieldDayBorn)
}

// SetHasSpouse sets the "has_spouse" field.
func (m *MemberMutation) SetHasSpouse(b bool) {
	m.has_spouse = &b
}

// HasSpouse returns the value of the "has_spouse" field in the mutation.
func (m *MemberMutation) HasSpouse() (r bool, exists bool) {
	v := m.has_spouse
	if v == nil {
		return
	}
	return *v, true
}

// OldHasSpouse returns the old "has_spouse" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldHasSpouse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasSpouse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasSpouse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasSpouse: %w", err)
	}
	return oldValue.HasSpouse, nil
}

// ResetHasSpouse resets all changes to the "has_spouse" field.
func (m *MemberMutation) ResetHasSpouse() {
	m.has_spouse = nil
}

// SetSpouseIDNumber sets the "spouse_id_number" field.
func (m *MemberMutation) SetSpouseIDNumber(s string) {
	m.spouse_id_number = &s
}

// SpouseIDNumber returns the value of the "spouse_id_number" field in the mutation.
func (m *MemberMutation) SpouseIDNumber() (r string, exists bool) {
	v := m.spouse_id_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSpouseIDNumber returns the old "spouse_id_number" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSpouseIDNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpouseIDNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpouseIDNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpouseIDNumber: %w", err)
	}
	return oldValue.SpouseIDNumber, nil
}

// ClearSpouseIDNumber clears the value of the "spouse_id_number" field.
func (m *MemberMutation) ClearSpouseIDNumber() {
	m.spouse_id_number = nil
	m.clearedFields[member.FieldSpouseIDNumber] = struct{}{}
}

// SpouseIDNumberCleared returns if the "spouse_id_number" field was cleared in this mutation.
func (m *MemberMutation) SpouseIDNumberCleared() bool {
	_, ok := m.clearedFields[member.FieldSpouseIDNumber]
	return ok
}

// ResetSpouseIDNumber resets all changes to the "spouse_id_number" field.
func (m *MemberMutation) ResetSpouseIDNumber() {
	m.spouse_id_number = nil
	delete(m.clearedFields, member.FieldSpouseIDNumber)
}

// SetSpouseName sets the "spouse_name" field.
func (m *MemberMutation) SetSpouseName(s string) {
	m.spouse_name = &s
}

// SpouseName returns the value of the "spouse_name" field in the mutation.
func (m *MemberMutation) SpouseName() (r string, exists bool) {
	v := m.spouse_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSpouseName returns the old "spouse_name" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSpouseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpouseName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpouseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpouseName: %w", err)
	}
	return oldValue.SpouseName, nil
}

// ClearSpouseName clears the value of the "spouse_name" field.
func (m *MemberMutation) ClearSpouseName() {
	m.spouse_name = nil
	m.clearedFields[member.FieldSpouseName] = struct{}{}
}

// SpouseNameCleared returns if the "spouse_name" field was cleared in this mutation.
func (m *MemberMutation) SpouseNameCleared() bool {
	_, ok := m.clearedFields[member.FieldSpouseName]
	return ok
}

// ResetSpouseName resets all changes to the "spouse_name" field.
func (m *MemberMutation) ResetSpouseName() {
	m.spouse_name = nil
	delete(m.clearedFields, member.FieldSpouseName)
}

// SetSpouseOccupation sets the "spouse_occupation" field.
func (m *MemberMutation) SetSpouseOccupation(s string) {
	m.spouse_occupation = &s
}

// SpouseOccupation returns the value of the "spouse_occupation" field in the mutation.
func (m *MemberMutation) SpouseOccupation() (r string, exists bool) {
	v := m.spouse_occupation
	if v == nil {
		return
	}
	return *v, true
}

// OldSpouseOccupation returns the old "spouse_occupation" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSpouseOccupation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpouseOccupation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpouseOccupation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpouseOccupation: %w", err)
	}
	return oldValue.SpouseOccupation, nil
}

// ClearSpouseOccupation clears the value of the "spouse_occupation" field.
func (m *MemberMutation) ClearSpouseOccupation() {
	m.spouse_occupation = nil
	m.clearedFields[member.FieldSpouseOccupation] = struct{}{}
}

// SpouseOccupationCleared returns if the "spouse_occupation" field was cleared in this mutation.
func (m *MemberMutation) SpouseOccupationCleared() bool {
	_, ok := m.clearedFields[member.FieldSpouseOccupation]
	return ok
}

// ResetSpouseOccupation resets all changes to the "spouse_occupation" field.
func (m *MemberMutation) ResetSpouseOccupation() {
	m.spouse_occupation = nil
	delete(m.clearedFields, member.FieldSpouseOccupation)
}

// SetSpouseContact sets the "spouse_contact" field.
func (m *MemberMutation) SetSpouseContact(s string) {
	m.spouse_contact = &s
}

// SpouseContact returns the value of the "spouse_contact" field in the mutation.
func (m *MemberMutation) SpouseContact() (r string, exists bool) {
	v := m.spouse_contact
	if v == nil {
		return
	}
	return *v, true
}

// OldSpouseContact returns the old "spouse_contact" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSpouseContact(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpouseContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpouseContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpouseContact: %w", err)
	}
	return oldValue.SpouseContact, nil
}

// ClearSpouseContact clears the value of the "spouse_contact" field.
func (m *MemberMutation) ClearSpouseContact() {
	m.spouse_contact = nil
	m.clearedFields[member.FieldSpouseContact] = struct{}{}
}

// SpouseContactCleared returns if the "spouse_contact" field was cleared in this mutation.
func (m *MemberMutation) SpouseContactCleared() bool {
	_, ok := m.clearedFields[member.FieldSpouseContact]
	return ok
}

// ResetSpouseContact resets all changes to the "spouse_contact" field.
func (m *MemberMutation) ResetSpouseContact() {
	m.spouse_contact = nil
	delete(m.clearedFields, member.FieldSpouseContact)
}

// SetIsBaptized sets the "is_baptized" field.
func (m *MemberMutation) SetIsBaptized(b bool) {
	m.is_baptized = &b
}

// IsBaptized returns the value of the "is_baptized" field in the mutation.
func (m *MemberMutation) IsBaptized() (r bool, exists bool) {
	v := m.is_baptized
	if v == nil {
		return
	}
	return *v, true
}

// OldIsBaptized returns the old "is_baptized" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldIsBaptized(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsBaptized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsBaptized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsBaptized: %w", err)
	}
	return oldValue.IsBaptized, nil
}

// ResetIsBaptized resets all changes to the "is_baptized" field.
func (m *MemberMutation) ResetIsBaptized() {
	m.is_baptized = nil
}

// SetBaptizedBy sets the "baptized_by" field.
func (m *MemberMutation) SetBaptizedBy(s string) {
	m.baptized_by = &s
}

// BaptizedBy returns the value of the "baptized_by" field in the mutation.
func (m *MemberMutation) BaptizedBy() (r string, exists bool) {
	v := m.baptized_by
	if v == nil {
		return
	}
	return *v, true
}

// OldBaptizedBy returns the old "baptized_by" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldBaptizedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaptizedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaptizedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaptizedBy: %w", err)
	}
	return oldValue.BaptizedBy, nil
}

// ClearBaptizedBy clears the value of the "baptized_by" field.
func (m *MemberMutation) ClearBaptizedBy() {
	m.baptized_by = nil
	m.clearedFields[member.FieldBaptizedBy] = struct{}{}
}

// BaptizedByCleared returns if the "baptized_by" field was cleared in this mutation.
func (m *MemberMutation) BaptizedByCleared() bool {
	_, ok := m.clearedFields[member.FieldBaptizedBy]
	return ok
}

// ResetBaptizedBy resets all changes to the "baptized_by" field.
func (m *MemberMutation) ResetBaptizedBy() {
	m.baptized_by = nil
	delete(m.clearedFields, member.FieldBaptizedBy)
}

// SetBaptismChurch sets the "baptism_church" field.
func (m *MemberMutation) SetBaptismChurch(s string) {
	m.baptism_church = &s
}

// BaptismChurch returns the value of the "baptism_church" field in the mutation.
func (m *MemberMutation) BaptismChurch() (r string, exists bool) {
	v := m.baptism_church
	if v == nil {
		return
	}
	return *v, true
}

// OldBaptismChurch returns the old "baptism_church" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldBaptismChurch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaptismChurch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaptismChurch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaptismChurch: %w", err)
	}
	return oldValue.BaptismChurch, nil
}

// ClearBaptismChurch clears the value of the "baptism_church" field.
func (m *MemberMutation) ClearBaptismChurch() {
	m.baptism_church = nil
	m.clearedFields[member.FieldBaptismChurch] = struct{}{}
}

// BaptismChurchCleared returns if the "baptism_church" field was cleared in this mutation.
func (m *MemberMutation) BaptismChurchCleared() bool {
	_, ok := m.clearedFields[member.FieldBaptismChurch]
	return ok
}

// ResetBaptismChurch resets all changes to the "baptism_church" field.
func (m *MemberMutation) ResetBaptismChurch() {
	m.baptism_church = nil
	delete(m.clearedFields, member.FieldBaptismChurch)
}

// SetBaptismCertNumber sets the "baptism_cert_number" field.
func (m *MemberMutation) SetBaptismCertNumber(s string) {
	m.baptism_cert_number = &s
}

// BaptismCertNumber returns the value of the "baptism_cert_number" field in the mutation.
func (m *MemberMutation) BaptismCertNumber() (r string, exists bool) {
	v := m.baptism_cert_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBaptismCertNumber returns the old "baptism_cert_number" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldBaptismCertNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaptismCertNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaptismCertNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaptismCertNumber: %w", err)
	}
	return oldValue.BaptismCertNumber, nil
}

// ClearBaptismCertNumber clears the value of the "baptism_cert_number" field.
func (m *MemberMutation) ClearBaptismCertNumber() {
	m.baptism_cert_number = nil
	m.clearedFields[member.FieldBaptismCertNumber] = struct{}{}
}

// BaptismCertNumberCleared returns if the "baptism_cert_number" field was cleared in this mutation.
func (m *MemberMutation) BaptismCertNumberCleared() bool {
	_, ok := m.clearedFields[member.FieldBaptismCertNumber]
	return ok
}

// ResetBaptismCertNumber resets all changes to the "baptism_cert_number" field.
func (m *MemberMutation) ResetBaptismCertNumber() {
	m.baptism_cert_number = nil
	delete(m.clearedFields, member.FieldBaptismCertNumber)
}

// SetBaptismDate sets the "baptism_date" field.
func (m *MemberMutation) SetBaptismDate(t time.Time) {
	m.baptism_date = &t
}

// BaptismDate returns the value of the "baptism_date" field in the mutation.
func (m *MemberMutation) BaptismDate() (r time.Time, exists bool) {
	v := m.baptism_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBaptismDate returns the old "baptism_date" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldBaptismDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaptismDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaptismDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaptismDate: %w", err)
	}
	return oldValue.BaptismDate, nil
}

// ClearBaptismDate clears the value of the "baptism_date" field.
func (m *MemberMutation) ClearBaptismDate() {
	m.baptism_date = nil
	m.clearedFields[member.FieldBaptismDate] = struct{}{}
}

// BaptismDateCleared returns if the "baptism_date" field was cleared in this mutation.
func (m *MemberMutation) BaptismDateCleared() bool {
	_, ok := m.clearedFields[member.FieldBaptismDate]
	return ok
}

// ResetBaptismDate resets all changes to the "baptism_date" field.
func (m *MemberMutation) ResetBaptismDate() {
	m.baptism_date = nil
	delete(m.clearedFields, member.FieldBaptismDate)
}

// SetMembershipYear sets the "membership_year" field.
func (m *MemberMutation) SetMembershipYear(i int) {
	m.membership_year = &i
	m.addmembership_year = nil
}

// MembershipYear returns the value of the "membership_year" field in the mutation.
func (m *MemberMutation) MembershipYear() (r int, exists bool) {
	v := m.membership_year
	if v == nil {
		return
	}
	return *v, true
}

// OldMembershipYear returns the old "membership_year" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldMembershipYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMembershipYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMembershipYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMembershipYear: %w", err)
	}
	return oldValue.MembershipYear, nil
}

// AddMembershipYear adds i to the "membership_year" field.
func (m *MemberMutation) AddMembershipYear(i int) {
	if m.addmembership_year != nil {
		*m.addmembership_year += i
	} else {
		m.addmembership_year = &i
	}
}

// AddedMembershipYear returns the value that was added to the "membership_year" field in this mutation.
func (m *MemberMutation) AddedMembershipYear() (r int, exists bool) {
	v := m.addmembership_year
	if v == nil {
		return
	}
	return *v, true
}

// ResetMembershipYear resets all changes to the "membership_year" field.
func (m *MemberMutation) ResetMembershipYear() {
	m.membership_year = nil
	m.addmembership_year = nil
}

// SetPhotoURL sets the "photo_url" field.
func (m *MemberMutation) SetPhotoURL(s string) {
	m.photo_url = &s
}

// PhotoURL returns the value of the "photo_url" field in the mutation.
func (m *MemberMutation) PhotoURL() (r string, exists bool) {
	v := m.photo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL returns the old "photo_url" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldPhotoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL: %w", err)
	}
	return oldValue.PhotoURL, nil
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (m *MemberMutation) ClearPhotoURL() {
	m.photo_url = nil
	m.clearedFields[member.FieldPhotoURL] = struct{}{}
}

// PhotoURLCleared returns if the "photo_url" field was cleared in this mutation.
func (m *MemberMutation) PhotoURLCleared() bool {
	_, ok := m.clearedFields[member.FieldPhotoURL]
	return ok
}

// ResetPhotoURL resets all changes to the "photo_url" field.
func (m *MemberMutation) ResetPhotoURL() {
	m.photo_url = nil
	delete(m.clearedFields, member.FieldPhotoURL)
}

// SetPhotoData sets the "photo_data" field.
func (m *MemberMutation) SetPhotoData(b []byte) {
	m.photo_data = &b
}

// PhotoData returns the value of the "photo_data" field in the mutation.
func (m *MemberMutation) PhotoData() (r []byte, exists bool) {
	v := m.photo_data
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoData returns the old "photo_data" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldPhotoData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoData: %w", err)
	}
	return oldValue.PhotoData, nil
}

// ClearPhotoData clears the value of the "photo_data" field.
func (m *MemberMutation) ClearPhotoData() {
	m.photo_data = nil
	m.clearedFields[member.FieldPhotoData] = struct{}{}
}

// PhotoDataCleared returns if the "photo_data" field was cleared in this mutation.
func (m *MemberMutation) PhotoDataCleared() bool {
	_, ok := m.clearedFields[member.FieldPhotoData]
	return ok
}

// ResetPhotoData resets all changes to the "photo_data" field.
func (m *MemberMutation) ResetPhotoData() {
	m.photo_data = nil
	delete(m.clearedFields, member.FieldPhotoData)
}

// SetPhotoHash sets the "photo_hash" field.
func (m *MemberMutation) SetPhotoHash(s string) {
	m.photo_hash = &s
}

// PhotoHash returns the value of the "photo_hash" field in the mutation.
func (m *MemberMutation) PhotoHash() (r string, exists bool) {
	v := m.photo_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoHash returns the old "photo_hash" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldPhotoHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoHash: %w", err)
	}
	return oldValue.PhotoHash, nil
}

// ClearPhotoHash clears the value of the "photo_hash" field.
func (m *MemberMutation) ClearPhotoHash() {
	m.photo_hash = nil
	m.clearedFields[member.FieldPhotoHash] = struct{}{}
}

// PhotoHashCleared returns if the "photo_hash" field was cleared in this mutation.
func (m *MemberMutation) PhotoHashCleared() bool {
	_, ok := m.clearedFields[member.FieldPhotoHash]
	return ok
}

// ResetPhotoHash resets all changes to the "photo_hash" field.
func (m *MemberMutation) ResetPhotoHash() {
	m.photo_hash = nil
	delete(m.clearedFields, member.FieldPhotoHash)
}

// SetIsActive sets the "is_active" field.
func (m *MemberMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *MemberMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *MemberMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MemberMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemberMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemberMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MemberMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MemberMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MemberMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MemberMutation builder.
func (m *MemberMutation) Where(ps ...predicate.Member) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Member, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 34)
	if m.form_number != nil {
		fields = append(fields, member.FieldFormNumber)
	}
	if m.id_number != nil {
		fields = append(fields, member.FieldIDNumber)
	}
	if m.surname != nil {
		fields = append(fields, member.FieldSurname)
	}
	if m.other_names != nil {
		fields = append(fields, member.FieldOtherNames)
	}
	if m.dob != nil {
		fields = append(fields, member.FieldDob)
	}
	if m.gender != nil {
		fields = append(fields, member.FieldGender)
	}
	if m.hometown != nil {
		fields = append(fields, member.FieldHometown)
	}
	if m.region != nil {
		fields = append(fields, member.FieldRegion)
	}
	if m.residence != nil {
		fields = append(fields, member.FieldResidence)
	}
	if m.address != nil {
		fields = append(fields, member.FieldAddress)
	}
	if m.mobile != nil {
		fields = append(fields, member.FieldMobile)
	}
	if m.email != nil {
		fields = append(fields, member.FieldEmail)
	}
	if m.sunday_school_class != nil {
		fields = append(fields, member.FieldSundaySchoolClass)
	}
	if m.occupation != nil {
		fields = append(fields, member.FieldOccupation)
	}
	if m.has_title_card != nil {
		fields = append(fields, member.FieldHasTitleCard)
	}
	if m.title_card_number != nil {
		fields = append(fields, member.FieldTitleCardNumber)
	}
	if m.day_born != nil {
		fields = append(fields, member.FieldDayBorn)
	}
	if m.has_spouse != nil {
		fields = append(fields, member.FieldHasSpouse)
	}
	if m.spouse_id_number != nil {
		fields = append(fields, member.FieldSpouseIDNumber)
	}
	if m.spouse_name != nil {
		fields = append(fields, member.FieldSpouseName)
	}
	if m.spouse_occupation != nil {
		fields = append(fields, member.FieldSpouseOccupation)
	}
	if m.spouse_contact != nil {
		fields = append(fields, member.FieldSpouseContact)
	}
	if m.is_baptized != nil {
		fields = append(fields, member.FieldIsBaptized)
	}
	if m.baptized_by != nil {
		fields = append(fields, member.FieldBaptizedBy)
	}
	if m.baptism_church != nil {
		fields = append(fields, member.FieldBaptismChurch)
	}
	if m.baptism_cert_number != nil {
		fields = append(fields, member.FieldBaptismCertNumber)
	}
	if m.baptism_date != nil {
		fields = append(fields, member.FieldBaptismDate)
	}
	if m.membership_year != nil {
		fields = append(fields, member.FieldMembershipYear)
	}
	if m.photo_url != nil {
		fields = append(fields, member.FieldPhotoURL)
	}
	if m.photo_data != nil {
		fields = append(fields, member.FieldPhotoData)
	}
	if m.photo_hash != nil {
		fields = append(fields, member.FieldPhotoHash)
	}
	if m.is_active != nil {
		fields = append(fields, member.FieldIsActive)
	}
	if m.created_at != nil {
		fields = append(fields, member.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, member.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case member.FieldFormNumber:
		return m.FormNumber()
	case member.FieldIDNumber:
		return m.IDNumber()
	case member.FieldSurname:
		return m.Surname()
	case member.FieldOtherNames:
		return m.OtherNames()
	case member.FieldDob:
		return m.Dob()
	case member.FieldGender:
		return m.Gender()
	case member.FieldHometown:
		return m.Hometown()
	case member.FieldRegion:
		return m.Region()
	case member.FieldResidence:
		return m.Residence()
	case member.FieldAddress:
		return m.Address()
	case member.FieldMobile:
		return m.Mobile()
	case member.FieldEmail:
		return m.Email()
	case member.FieldSundaySchoolClass:
		return m.SundaySchoolClass()
	case member.FieldOccupation:
		return m.Occupation()
	case member.FieldHasTitleCard:
		return m.HasTitleCard()
	case member.FieldTitleCardNumber:
		return m.TitleCardNumber()
	case member.FieldDayBorn:
		return m.DayBorn()
	case member.FieldHasSpouse:
		return m.HasSpouse()
	case member.FieldSpouseIDNumber:
		return m.SpouseIDNumber()
	case member.FieldSpouseName:
		return m.SpouseName()
	case member.FieldSpouseOccupation:
		return m.SpouseOccupation()
	case member.FieldSpouseContact:
		return m.SpouseContact()
	case member.FieldIsBaptized:
		return m.IsBaptized()
	case member.FieldBaptizedBy:
		return m.BaptizedBy()
	case member.FieldBaptismChurch:
		return m.BaptismChurch()
	case member.FieldBaptismCertNumber:
		return m.BaptismCertNumber()
	case member.FieldBaptismDate:
		return m.BaptismDate()
	case member.FieldMembershipYear:
		return m.MembershipYear()
	case member.FieldPhotoURL:
		return m.PhotoURL()
	case member.FieldPhotoData:
		return m.PhotoData()
	case member.FieldPhotoHash:
		return m.PhotoHash()
	case member.FieldIsActive:
		return m.IsActive()
	case member.FieldCreatedAt:
		return m.CreatedAt()
	case member.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case member.FieldFormNumber:
		return m.OldFormNumber(ctx)
	case member.FieldIDNumber:
		return m.OldIDNumber(ctx)
	case member.FieldSurname:
		return m.OldSurname(ctx)
	case member.FieldOtherNames:
		return m.OldOtherNames(ctx)
	case member.FieldDob:
		return m.OldDob(ctx)
	case member.FieldGender:
		return m.OldGender(ctx)
	case member.FieldHometown:
		return m.OldHometown(ctx)
	case member.FieldRegion:
		return m.OldRegion(ctx)
	case member.FieldResidence:
		return m.OldResidence(ctx)
	case member.FieldAddress:
		return m.OldAddress(ctx)
	case member.FieldMobile:
		return m.OldMobile(ctx)
	case member.FieldEmail:
		return m.OldEmail(ctx)
	case member.FieldSundaySchoolClass:
		return m.OldSundaySchoolClass(ctx)
	case member.FieldOccupation:
		return m.OldOccupation(ctx)
	case member.FieldHasTitleCard:
		return m.OldHasTitleCard(ctx)
	case member.FieldTitleCardNumber:
		return m.OldTitleCardNumber(ctx)
	case member.FieldDayBorn:
		return m.OldDayBorn(ctx)
	case member.FieldHasSpouse:
		return m.OldHasSpouse(ctx)
	case member.FieldSpouseIDNumber:
		return m.OldSpouseIDNumber(ctx)
	case member.FieldSpouseName:
		return m.OldSpouseName(ctx)
	case member.FieldSpouseOccupation:
		return m.OldSpouseOccupation(ctx)
	case member.FieldSpouseContact:
		return m.OldSpouseContact(ctx)
	case member.FieldIsBaptized:
		return m.OldIsBaptized(ctx)
	case member.FieldBaptizedBy:
		return m.OldBaptizedBy(ctx)
	case member.FieldBaptismChurch:
		return m.OldBaptismChurch(ctx)
	case member.FieldBaptismCertNumber:
		return m.OldBaptismCertNumber(ctx)
	case member.FieldBaptismDate:
		return m.OldBaptismDate(ctx)
	case member.FieldMembershipYear:
		return m.OldMembershipYear(ctx)
	case member.FieldPhotoURL:
		return m.OldPhotoURL(ctx)
	case member.FieldPhotoData:
		return m.OldPhotoData(ctx)
	case member.FieldPhotoHash:
		return m.OldPhotoHash(ctx)
	case member.FieldIsActive:
		return m.OldIsActive(ctx)
	case member.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case member.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case member.FieldFormNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormNumber(v)
		return nil
	case member.FieldIDNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDNumber(v)
		return nil
	case member.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case member.FieldOtherNames:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherNames(v)
		return nil
	case member.FieldDob:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDob(v)
		return nil
	case member.FieldGender:
		v, ok := value.(member.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case member.FieldHometown:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHometown(v)
		return nil
	case member.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case member.FieldResidence:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResidence(v)
		return nil
	case member.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case member.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case member.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case member.FieldSundaySchoolClass:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSundaySchoolClass(v)
		return nil
	case member.FieldOccupation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupation(v)
		return nil
	case member.FieldHasTitleCard:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasTitleCard(v)
		return nil
	case member.FieldTitleCardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleCardNumber(v)
		return nil
	case member.FieldDayBorn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDayBorn(v)
		return nil
	case member.FieldHasSpouse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasSpouse(v)
		return nil
	case member.FieldSpouseIDNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpouseIDNumber(v)
		return nil
	case member.FieldSpouseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpouseName(v)
		return nil
	case member.FieldSpouseOccupation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpouseOccupation(v)
		return nil
	case member.FieldSpouseContact:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpouseContact(v)
		return nil
	case member.FieldIsBaptized:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsBaptized(v)
		return nil
	case member.FieldBaptizedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaptizedBy(v)
		return nil
	case member.FieldBaptismChurch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaptismChurch(v)
		return nil
	case member.FieldBaptismCertNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaptismCertNumber(v)
		return nil
	case member.FieldBaptismDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaptismDate(v)
		return nil
	case member.FieldMembershipYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMembershipYear(v)
		return nil
	case member.FieldPhotoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL(v)
		return nil
	case member.FieldPhotoData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoData(v)
		return nil
	case member.FieldPhotoHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoHash(v)
		return nil
	case member.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case member.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case member.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	var fields []string
	if m.addmembership_year != nil {
		fields = append(fields, member.FieldMembershipYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case member.FieldMembershipYear:
		return m.AddedMembershipYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	case member.FieldMembershipYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMembershipYear(v)
		return nil
	}
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(member.FieldFormNumber) {
		fields = append(fields, member.FieldFormNumber)
	}
	if m.FieldCleared(member.FieldResidence) {
		fields = append(fields, member.FieldResidence)
	}
	if m.FieldCleared(member.FieldEmail) {
		fields = append(fields, member.FieldEmail)
	}
	if m.FieldCleared(member.FieldSundaySchoolClass) {
		fields = append(fields, member.FieldSundaySchoolClass)
	}
	if m.FieldCleared(member.FieldTitleCardNumber) {
		fields = append(fields, member.FieldTitleCardNumber)
	}
	if m.FieldCleared(member.FieldDayBorn) {
		fields = append(fields, member.FieldDayBorn)
	}
	if m.FieldCleared(member.FieldSpouseIDNumber) {
		fields = append(fields, member.FieldSpouseIDNumber)
	}
	if m.FieldCleared(member.FieldSpouseName) {
		fields = append(fields, member.FieldSpouseName)
	}
	if m.FieldCleared(member.FieldSpouseOccupation) {
		fields = append(fields, member.FieldSpouseOccupation)
	}
	if m.FieldCleared(member.FieldSpouseContact) {
		fields = append(fields, member.FieldSpouseContact)
	}
	if m.FieldCleared(member.FieldBaptizedBy) {
		fields = append(fields, member.FieldBaptizedBy)
	}
	if m.FieldCleared(member.FieldBaptismChurch) {
		fields = append(fields, member.FieldBaptismChurch)
	}
	if m.FieldCleared(member.FieldBaptismCertNumber) {
		fields = append(fields, member.FieldBaptismCertNumber)
	}
	if m.FieldCleared(member.FieldBaptismDate) {
		fields = append(fields, member.FieldBaptismDate)
	}
	if m.FieldCleared(member.FieldPhotoURL) {
		fields = append(fields, member.FieldPhotoURL)
	}
	if m.FieldCleared(member.FieldPhotoData) {
		fields = append(fields, member.FieldPhotoData)
	}
	if m.FieldCleared(member.FieldPhotoHash) {
		fields = append(fields, member.FieldPhotoHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	switch name {
	case member.FieldFormNumber:
		m.ClearFormNumber()
		return nil
	case member.FieldResidence:
		m.ClearResidence()
		return nil
	case member.FieldEmail:
		m.ClearEmail()
		return nil
	case member.FieldSundaySchoolClass:
		m.ClearSundaySchoolClass()
		return nil
	case member.FieldTitleCardNumber:
		m.ClearTitleCardNumber()
		return nil
	case member.FieldDayBorn:
		m.ClearDayBorn()
		return nil
	case member.FieldSpouseIDNumber:
		m.ClearSpouseIDNumber()
		return nil
	case member.FieldSpouseName:
		m.ClearSpouseName()
		return nil
	case member.FieldSpouseOccupation:
		m.ClearSpouseOccupation()
		return nil
	case member.FieldSpouseContact:
		m.ClearSpouseContact()
		return nil
	case member.FieldBaptizedBy:
		m.ClearBaptizedBy()
		return nil
	case member.FieldBaptismChurch:
		m.ClearBaptismChurch()
		return nil
	case member.FieldBaptismCertNumber:
		m.ClearBaptismCertNumber()
		return nil
	case member.FieldBaptismDate:
		m.ClearBaptismDate()
		return nil
	case member.FieldPhotoURL:
		m.ClearPhotoURL()
		return nil
	case member.FieldPhotoData:
		m.ClearPhotoData()
		return nil
	case member.FieldPhotoHash:
		m.ClearPhotoHash()
		return nil
	}
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	switch name {
	case member.FieldFormNumber:
		m.ResetFormNumber()
		return nil
	case member.FieldIDNumber:
		m.ResetIDNumber()
		return nil
	case member.FieldSurname:
		m.ResetSurname()
		return nil
	case member.FieldOtherNames:
		m.ResetOtherNames()
		return nil
	case member.FieldDob:
		m.ResetDob()
		return nil
	case member.FieldGender:
		m.ResetGender()
		return nil
	case member.FieldHometown:
		m.ResetHometown()
		return nil
	case member.FieldRegion:
		m.ResetRegion()
		return nil
	case member.FieldResidence:
		m.ResetResidence()
		return nil
	case member.FieldAddress:
		m.ResetAddress()
		return nil
	case member.FieldMobile:
		m.ResetMobile()
		return nil
	case member.FieldEmail:
		m.ResetEmail()
		return nil
	case member.FieldSundaySchoolClass:
		m.ResetSundaySchoolClass()
		return nil
	case member.FieldOccupation:
		m.ResetOccupation()
		return nil
	case member.FieldHasTitleCard:
		m.ResetHasTitleCard()
		return nil
	case member.FieldTitleCardNumber:
		m.ResetTitleCardNumber()
		return nil
	case member.FieldDayBorn:
		m.ResetDayBorn()
		return nil
	case member.FieldHasSpouse:
		m.ResetHasSpouse()
		return nil
	case member.FieldSpouseIDNumber:
		m.ResetSpouseIDNumber()
		return nil
	case member.FieldSpouseName:
		m.ResetSpouseName()
		return nil
	case member.FieldSpouseOccupation:
		m.ResetSpouseOccupation()
		return nil
	case member.FieldSpouseContact:
		m.ResetSpouseContact()
		return nil
	case member.FieldIsBaptized:
		m.ResetIsBaptized()
		return nil
	case member.FieldBaptizedBy:
		m.ResetBaptizedBy()
		return nil
	case member.FieldBaptismChurch:
		m.ResetBaptismChurch()
		return nil
	case member.FieldBaptismCertNumber:
		m.ResetBaptismCertNumber()
		return nil
	case member.FieldBaptismDate:
		m.ResetBaptismDate()
		return nil
	case member.FieldMembershipYear:
		m.ResetMembershipYear()
		return nil
	case member.FieldPhotoURL:
		m.ResetPhotoURL()
		return nil
	case member.FieldPhotoData:
		m.ResetPhotoData()
		return nil
	case member.FieldPhotoHash:
		m.ResetPhotoHash()
		return nil
	case member.FieldIsActive:
		m.ResetIsActive()
		return nil
	case member.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case member.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Member edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	email            *string
	phone            *string
	subject          *message.Subject
	state            *message.State
	description      *string
	created_at       *time.Time
	clearedFields    map[string]struct{}
	responses        map[int]struct{}
	removedresponses map[int]struct{}
	clearedresponses bool
	done             bool
	oldValue         func(context.Context) (*Message, error)
	predicates       []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MessageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MessageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MessageMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *MessageMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MessageMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *MessageMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *MessageMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *MessageMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *MessageMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[message.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *MessageMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[message.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *MessageMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, message.FieldPhone)
}

// SetSubject sets the "subject" field.
func (m *MessageMutation) SetSubject(value message.Subject) {
	m.subject = &value
}

// Subject returns the value of the "subject" field in the mutation.
func (m *MessageMutation) Subject() (r message.Subject, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSubject(ctx context.Context) (v message.Subject, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *MessageMutation) ResetSubject() {
	m.subject = nil
}

// SetState sets the "state" field.
func (m *MessageMutation) SetState(value message.State) {
	m.state = &value
}

// State returns the value of the "state" field in the mutation.
func (m *MessageMutation) State() (r message.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldState(ctx context.Context) (v message.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *MessageMutation) ResetState() {
	m.state = nil
}

// SetDescription sets the "description" field.
func (m *MessageMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MessageMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MessageMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddResponseIDs adds the "responses" edge to the Response entity by ids.
func (m *MessageMutation) AddResponseIDs(ids ...int) {
	if m.responses == nil {
		m.responses = make(map[int]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the Response entity.
func (m *MessageMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared reports if the "responses" edge to the Response entity was cleared.
func (m *MessageMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the Response entity by IDs.
func (m *MessageMutation) RemoveResponseIDs(ids ...int) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.responses, ids[i])
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the Response entity.
func (m *MessageMutation) RemovedResponsesIDs() (ids []int) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *MessageMutation) ResponsesIDs() (ids []int) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *MessageMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Message, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, message.FieldName)
	}
	if m.email != nil {
		fields = append(fields, message.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, message.FieldPhone)
	}
	if m.subject != nil {
		fields = append(fields, message.FieldSubject)
	}
	if m.state != nil {
		fields = append(fields, message.FieldState)
	}
	if m.description != nil {
		fields = append(fields, message.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, message.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldName:
		return m.Name()
	case message.FieldEmail:
		return m.Email()
	case message.FieldPhone:
		return m.Phone()
	case message.FieldSubject:
		return m.Subject()
	case message.FieldState:
		return m.State()
	case message.FieldDescription:
		return m.Description()
	case message.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldName:
		return m.OldName(ctx)
	case message.FieldEmail:
		return m.OldEmail(ctx)
	case message.FieldPhone:
		return m.OldPhone(ctx)
	case message.FieldSubject:
		return m.OldSubject(ctx)
	case message.FieldState:
		return m.OldState(ctx)
	case message.FieldDescription:
		return m.OldDescription(ctx)
	case message.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case message.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case message.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case message.FieldSubject:
		v, ok := value.(message.Subject)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case message.FieldState:
		v, ok := value.(message.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case message.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case message.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldPhone) {
		fields = append(fields, message.FieldPhone)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldPhone:
		m.ClearPhone()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldName:
		m.ResetName()
		return nil
	case message.FieldEmail:
		m.ResetEmail()
		return nil
	case message.FieldPhone:
		m.ResetPhone()
		return nil
	case message.FieldSubject:
		m.ResetSubject()
		return nil
	case message.FieldState:
		m.ResetState()
		return nil
	case message.FieldDescription:
		m.ResetDescription()
		return nil
	case message.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.responses != nil {
		edges = append(edges, message.EdgeResponses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedresponses != nil {
		edges = append(edges, message.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedresponses {
		edges = append(edges, message.EdgeResponses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeResponses:
		return m.clearedresponses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeResponses:
		m.ResetResponses()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// ResponseMutation represents an operation that mutates the Response nodes in the graph.
type ResponseMutation struct {
	config
	op             Op
	typ            string
	id             *int
	email          *string
	subject        *response.Subject
	description    *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	message        *int
	clearedmessage bool
	user           *int
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Response, error)
	predicates     []predicate.Response
}

var _ ent.Mutation = (*ResponseMutation)(nil)

// responseOption allows management of the mutation configuration using functional options.
type responseOption func(*ResponseMutation)

// newResponseMutation creates new mutation for the Response entity.
func newResponseMutation(c config, op Op, opts ...responseOption) *ResponseMutation {
	m := &ResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResponseID sets the ID field of the mutation.
func withResponseID(id int) responseOption {
	return func(m *ResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *Response
		)
		m.oldValue = func(ctx context.Context) (*Response, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Response.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResponse sets the old Response of the mutation.
func withResponse(node *Response) responseOption {
	return func(m *ResponseMutation) {
		m.oldValue = func(context.Context) (*Response, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Response entities.
func (m *ResponseMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResponseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResponseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Response.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *ResponseMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ResponseMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *ResponseMutation) ResetEmail() {
	m.email = nil
}

// SetSubject sets the "subject" field.
func (m *ResponseMutation) SetSubject(r response.Subject) {
	m.subject = &r
}

// Subject returns the value of the "subject" field in the mutation.
func (m *ResponseMutation) Subject() (r response.Subject, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldSubject(ctx context.Context) (v response.Subject, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *ResponseMutation) ResetSubject() {
	m.subject = nil
}

// SetUserID sets the "user_id" field.
func (m *ResponseMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ResponseMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ResponseMutation) ResetUserID() {
	m.user = nil
}

// SetDescription sets the "description" field.
func (m *ResponseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ResponseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ResponseMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *ResponseMutation) SetMessageID(id int) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *ResponseMutation) ClearMessage() {
	m.clearedmessage = true
	m.clearedFields[response.FieldUserID] = struct{}{}
}

// MessageCleared reports if the "message" edge to the Message entity was cleared.
func (m *ResponseMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *ResponseMutation) MessageID() (id int, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *ResponseMutation) MessageIDs() (ids []int) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *ResponseMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *ResponseMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[response.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ResponseMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ResponseMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ResponseMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ResponseMutation builder.
func (m *ResponseMutation) Where(ps ...predicate.Response) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResponseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResponseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Response, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResponseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResponseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Response).
func (m *ResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResponseMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.email != nil {
		fields = append(fields, response.FieldEmail)
	}
	if m.subject != nil {
		fields = append(fields, response.FieldSubject)
	}
	if m.user != nil {
		fields = append(fields, response.FieldUserID)
	}
	if m.description != nil {
		fields = append(fields, response.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, response.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case response.FieldEmail:
		return m.Email()
	case response.FieldSubject:
		return m.Subject()
	case response.FieldUserID:
		return m.UserID()
	case response.FieldDescription:
		return m.Description()
	case response.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case response.FieldEmail:
		return m.OldEmail(ctx)
	case response.FieldSubject:
		return m.OldSubject(ctx)
	case response.FieldUserID:
		return m.OldUserID(ctx)
	case response.FieldDescription:
		return m.OldDescription(ctx)
	case response.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Response field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case response.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case response.FieldSubject:
		v, ok := value.(response.Subject)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case response.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case response.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case response.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Response field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResponseMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResponseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Response numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Response nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResponseMutation) ResetField(name string) error {
	switch name {
	case response.FieldEmail:
		m.ResetEmail()
		return nil
	case response.FieldSubject:
		m.ResetSubject()
		return nil
	case response.FieldUserID:
		m.ResetUserID()
		return nil
	case response.FieldDescription:
		m.ResetDescription()
		return nil
	case response.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Response field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.message != nil {
		edges = append(edges, response.EdgeMessage)
	}
	if m.user != nil {
		edges = append(edges, response.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case response.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	case response.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResponseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmessage {
		edges = append(edges, response.EdgeMessage)
	}
	if m.cleareduser {
		edges = append(edges, response.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case response.EdgeMessage:
		return m.clearedmessage
	case response.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResponseMutation) ClearEdge(name string) error {
	switch name {
	case response.EdgeMessage:
		m.ClearMessage()
		return nil
	case response.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Response unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResponseMutation) ResetEdge(name string) error {
	switch name {
	case response.EdgeMessage:
		m.ResetMessage()
		return nil
	case response.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Response edge %s", name)
}

// ServiceMutation represents an operation that mutates the Service nodes in the graph.
type ServiceMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	date                      *time.Time
	name                      *string
	_type                     *service.Type
	clearedFields             map[string]struct{}
	attendance_records        map[int]struct{}
	removedattendance_records map[int]struct{}
	clearedattendance_records bool
	done                      bool
	oldValue                  func(context.Context) (*Service, error)
	predicates                []predicate.Service
}

var _ ent.Mutation = (*ServiceMutation)(nil)

// serviceOption allows management of the mutation configuration using functional options.
type serviceOption func(*ServiceMutation)

// newServiceMutation creates new mutation for the Service entity.
func newServiceMutation(c config, op Op, opts ...serviceOption) *ServiceMutation {
	m := &ServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceID sets the ID field of the mutation.
func withServiceID(id int) serviceOption {
	return func(m *ServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Service
		)
		m.oldValue = func(ctx context.Context) (*Service, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Service.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withService sets the old Service of the mutation.
func withService(node *Service) serviceOption {
	return func(m *ServiceMutation) {
		m.oldValue = func(context.Context) (*Service, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Service entities.
func (m *ServiceMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Service.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *ServiceMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ServiceMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ServiceMutation) ResetDate() {
	m.date = nil
}

// SetName sets the "name" field.
func (m *ServiceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ServiceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ServiceMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *ServiceMutation) SetType(s service.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ServiceMutation) GetType() (r service.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldType(ctx context.Context) (v service.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ServiceMutation) ResetType() {
	m._type = nil
}

// AddAttendanceRecordIDs adds the "attendance_records" edge to the AttendanceRecord entity by ids.
func (m *ServiceMutation) AddAttendanceRecordIDs(ids ...int) {
	if m.attendance_records == nil {
		m.attendance_records = make(map[int]struct{})
	}
	for i := range ids {
		m.attendance_records[ids[i]] = struct{}{}
	}
}

// ClearAttendanceRecords clears the "attendance_records" edge to the AttendanceRecord entity.
func (m *ServiceMutation) ClearAttendanceRecords() {
	m.clearedattendance_records = true
}

// AttendanceRecordsCleared reports if the "attendance_records" edge to the AttendanceRecord entity was cleared.
func (m *ServiceMutation) AttendanceRecordsCleared() bool {
	return m.clearedattendance_records
}

// RemoveAttendanceRecordIDs removes the "attendance_records" edge to the AttendanceRecord entity by IDs.
func (m *ServiceMutation) RemoveAttendanceRecordIDs(ids ...int) {
	if m.removedattendance_records == nil {
		m.removedattendance_records = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attendance_records, ids[i])
		m.removedattendance_records[ids[i]] = struct{}{}
	}
}

// RemovedAttendanceRecords returns the removed IDs of the "attendance_records" edge to the AttendanceRecord entity.
func (m *ServiceMutation) RemovedAttendanceRecordsIDs() (ids []int) {
	for id := range m.removedattendance_records {
		ids = append(ids, id)
	}
	return
}

// AttendanceRecordsIDs returns the "attendance_records" edge IDs in the mutation.
func (m *ServiceMutation) AttendanceRecordsIDs() (ids []int) {
	for id := range m.attendance_records {
		ids = append(ids, id)
	}
	return
}

// ResetAttendanceRecords resets all changes to the "attendance_records" edge.
func (m *ServiceMutation) ResetAttendanceRecords() {
	m.attendance_records = nil
	m.clearedattendance_records = false
	m.removedattendance_records = nil
}

// Where appends a list predicates to the ServiceMutation builder.
func (m *ServiceMutation) Where(ps ...predicate.Service) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Service, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Service).
func (m *ServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.date != nil {
		fields = append(fields, service.FieldDate)
	}
	if m.name != nil {
		fields = append(fields, service.FieldName)
	}
	if m._type != nil {
		fields = append(fields, service.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case service.FieldDate:
		return m.Date()
	case service.FieldName:
		return m.Name()
	case service.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case service.FieldDate:
		return m.OldDate(ctx)
	case service.FieldName:
		return m.OldName(ctx)
	case service.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Service field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case service.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case service.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case service.FieldType:
		v, ok := value.(service.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Service numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Service nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceMutation) ResetField(name string) error {
	switch name {
	case service.FieldDate:
		m.ResetDate()
		return nil
	case service.FieldName:
		m.ResetName()
		return nil
	case service.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attendance_records != nil {
		edges = append(edges, service.EdgeAttendanceRecords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case service.EdgeAttendanceRecords:
		ids := make([]ent.Value, 0, len(m.attendance_records))
		for id := range m.attendance_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattendance_records != nil {
		edges = append(edges, service.EdgeAttendanceRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case service.EdgeAttendanceRecords:
		ids := make([]ent.Value, 0, len(m.removedattendance_records))
		for id := range m.removedattendance_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattendance_records {
		edges = append(edges, service.EdgeAttendanceRecords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceMutation) EdgeCleared(name string) bool {
	switch name {
	case service.EdgeAttendanceRecords:
		return m.clearedattendance_records
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Service unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceMutation) ResetEdge(name string) error {
	switch name {
	case service.EdgeAttendanceRecords:
		m.ResetAttendanceRecords()
		return nil
	}
	return fmt.Errorf("unknown Service edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	token         *string
	data          *[]byte
	expiry        *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *SessionMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *SessionMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *SessionMutation) ResetToken() {
	m.token = nil
}

// SetData sets the "data" field.
func (m *SessionMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *SessionMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *SessionMutation) ResetData() {
	m.data = nil
}

// SetExpiry sets the "expiry" field.
func (m *SessionMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *SessionMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *SessionMutation) ResetExpiry() {
	m.expiry = nil
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.token != nil {
		fields = append(fields, session.FieldToken)
	}
	if m.data != nil {
		fields = append(fields, session.FieldData)
	}
	if m.expiry != nil {
		fields = append(fields, session.FieldExpiry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldToken:
		return m.Token()
	case session.FieldData:
		return m.Data()
	case session.FieldExpiry:
		return m.Expiry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldToken:
		return m.OldToken(ctx)
	case session.FieldData:
		return m.OldData(ctx)
	case session.FieldExpiry:
		return m.OldExpiry(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case session.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case session.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldToken:
		m.ResetToken()
		return nil
	case session.FieldData:
		m.ResetData()
		return nil
	case session.FieldExpiry:
		m.ResetExpiry()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Session edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	create_time            *time.Time
	update_time            *time.Time
	username               *string
	verify_token           *string
	email                  *string
	password               *string
	registration_token     *string
	resetToken             *string
	department             *string
	role                   *user.Role
	token_expires_at       *time.Time
	state                  *user.State
	created_at             *time.Time
	join_date              *time.Time
	last_login             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	responses              map[int]struct{}
	removedresponses       map[int]struct{}
	clearedresponses       bool
	contact_profile        *int
	clearedcontact_profile bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[user.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[user.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, user.FieldUsername)
}

// SetVerifyToken sets the "verify_token" field.
func (m *UserMutation) SetVerifyToken(s string) {
	m.verify_token = &s
}

// VerifyToken returns the value of the "verify_token" field in the mutation.
func (m *UserMutation) VerifyToken() (r string, exists bool) {
	v := m.verify_token
	if v == nil {
		return
	}
	return *v, true
}

// OldVerifyToken returns the old "verify_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerifyToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerifyToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerifyToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerifyToken: %w", err)
	}
	return oldValue.VerifyToken, nil
}

// ClearVerifyToken clears the value of the "verify_token" field.
func (m *UserMutation) ClearVerifyToken() {
	m.verify_token = nil
	m.clearedFields[user.FieldVerifyToken] = struct{}{}
}

// VerifyTokenCleared returns if the "verify_token" field was cleared in this mutation.
func (m *UserMutation) VerifyTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldVerifyToken]
	return ok
}

// ResetVerifyToken resets all changes to the "verify_token" field.
func (m *UserMutation) ResetVerifyToken() {
	m.verify_token = nil
	delete(m.clearedFields, user.FieldVerifyToken)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetRegistrationToken sets the "registration_token" field.
func (m *UserMutation) SetRegistrationToken(s string) {
	m.registration_token = &s
}

// RegistrationToken returns the value of the "registration_token" field in the mutation.
func (m *UserMutation) RegistrationToken() (r string, exists bool) {
	v := m.registration_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationToken returns the old "registration_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRegistrationToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegistrationToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegistrationToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationToken: %w", err)
	}
	return oldValue.RegistrationToken, nil
}

// ClearRegistrationToken clears the value of the "registration_token" field.
func (m *UserMutation) ClearRegistrationToken() {
	m.registration_token = nil
	m.clearedFields[user.FieldRegistrationToken] = struct{}{}
}

// RegistrationTokenCleared returns if the "registration_token" field was cleared in this mutation.
func (m *UserMutation) RegistrationTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldRegistrationToken]
	return ok
}

// ResetRegistrationToken resets all changes to the "registration_token" field.
func (m *UserMutation) ResetRegistrationToken() {
	m.registration_token = nil
	delete(m.clearedFields, user.FieldRegistrationToken)
}

// SetResetToken sets the "resetToken" field.
func (m *UserMutation) SetResetToken(s string) {
	m.resetToken = &s
}

// ResetToken returns the value of the "resetToken" field in the mutation.
func (m *UserMutation) ResetToken() (r string, exists bool) {
	v := m.resetToken
	if v == nil {
		return
	}
	return *v, true
}

// OldResetToken returns the old "resetToken" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldResetToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResetToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResetToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetToken: %w", err)
	}
	return oldValue.ResetToken, nil
}

// ClearResetToken clears the value of the "resetToken" field.
func (m *UserMutation) ClearResetToken() {
	m.resetToken = nil
	m.clearedFields[user.FieldResetToken] = struct{}{}
}

// ResetTokenCleared returns if the "resetToken" field was cleared in this mutation.
func (m *UserMutation) ResetTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldResetToken]
	return ok
}

// ResetResetToken resets all changes to the "resetToken" field.
func (m *UserMutation) ResetResetToken() {
	m.resetToken = nil
	delete(m.clearedFields, user.FieldResetToken)
}

// SetDepartment sets the "department" field.
func (m *UserMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *UserMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ClearDepartment clears the value of the "department" field.
func (m *UserMutation) ClearDepartment() {
	m.department = nil
	m.clearedFields[user.FieldDepartment] = struct{}{}
}

// DepartmentCleared returns if the "department" field was cleared in this mutation.
func (m *UserMutation) DepartmentCleared() bool {
	_, ok := m.clearedFields[user.FieldDepartment]
	return ok
}

// ResetDepartment resets all changes to the "department" field.
func (m *UserMutation) ResetDepartment() {
	m.department = nil
	delete(m.clearedFields, user.FieldDepartment)
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (m *UserMutation) SetTokenExpiresAt(t time.Time) {
	m.token_expires_at = &t
}

// TokenExpiresAt returns the value of the "token_expires_at" field in the mutation.
func (m *UserMutation) TokenExpiresAt() (r time.Time, exists bool) {
	v := m.token_expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenExpiresAt returns the old "token_expires_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTokenExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenExpiresAt: %w", err)
	}
	return oldValue.TokenExpiresAt, nil
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (m *UserMutation) ClearTokenExpiresAt() {
	m.token_expires_at = nil
	m.clearedFields[user.FieldTokenExpiresAt] = struct{}{}
}

// TokenExpiresAtCleared returns if the "token_expires_at" field was cleared in this mutation.
func (m *UserMutation) TokenExpiresAtCleared() bool {
	_, ok := m.clearedFields[user.FieldTokenExpiresAt]
	return ok
}

// ResetTokenExpiresAt resets all changes to the "token_expires_at" field.
func (m *UserMutation) ResetTokenExpiresAt() {
	m.token_expires_at = nil
	delete(m.clearedFields, user.FieldTokenExpiresAt)
}

// SetState sets the "state" field.
func (m *UserMutation) SetState(u user.State) {
	m.state = &u
}

// State returns the value of the "state" field in the mutation.
func (m *UserMutation) State() (r user.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldState(ctx context.Context) (v user.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *UserMutation) ResetState() {
	m.state = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetJoinDate sets the "join_date" field.
func (m *UserMutation) SetJoinDate(t time.Time) {
	m.join_date = &t
}

// JoinDate returns the value of the "join_date" field in the mutation.
func (m *UserMutation) JoinDate() (r time.Time, exists bool) {
	v := m.join_date
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinDate returns the old "join_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldJoinDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinDate: %w", err)
	}
	return oldValue.JoinDate, nil
}

// ClearJoinDate clears the value of the "join_date" field.
func (m *UserMutation) ClearJoinDate() {
	m.join_date = nil
	m.clearedFields[user.FieldJoinDate] = struct{}{}
}

// JoinDateCleared returns if the "join_date" field was cleared in this mutation.
func (m *UserMutation) JoinDateCleared() bool {
	_, ok := m.clearedFields[user.FieldJoinDate]
	return ok
}

// ResetJoinDate resets all changes to the "join_date" field.
func (m *UserMutation) ResetJoinDate() {
	m.join_date = nil
	delete(m.clearedFields, user.FieldJoinDate)
}

// SetLastLogin sets the "last_login" field.
func (m *UserMutation) SetLastLogin(t time.Time) {
	m.last_login = &t
}

// LastLogin returns the value of the "last_login" field in the mutation.
func (m *UserMutation) LastLogin() (r time.Time, exists bool) {
	v := m.last_login
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLogin returns the old "last_login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLogin(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLogin: %w", err)
	}
	return oldValue.LastLogin, nil
}

// ClearLastLogin clears the value of the "last_login" field.
func (m *UserMutation) ClearLastLogin() {
	m.last_login = nil
	m.clearedFields[user.FieldLastLogin] = struct{}{}
}

// LastLoginCleared returns if the "last_login" field was cleared in this mutation.
func (m *UserMutation) LastLoginCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLogin]
	return ok
}

// ResetLastLogin resets all changes to the "last_login" field.
func (m *UserMutation) ResetLastLogin() {
	m.last_login = nil
	delete(m.clearedFields, user.FieldLastLogin)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddResponseIDs adds the "responses" edge to the Response entity by ids.
func (m *UserMutation) AddResponseIDs(ids ...int) {
	if m.responses == nil {
		m.responses = make(map[int]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the Response entity.
func (m *UserMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared reports if the "responses" edge to the Response entity was cleared.
func (m *UserMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the Response entity by IDs.
func (m *UserMutation) RemoveResponseIDs(ids ...int) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.responses, ids[i])
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the Response entity.
func (m *UserMutation) RemovedResponsesIDs() (ids []int) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *UserMutation) ResponsesIDs() (ids []int) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *UserMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// SetContactProfileID sets the "contact_profile" edge to the ContactProfile entity by id.
func (m *UserMutation) SetContactProfileID(id int) {
	m.contact_profile = &id
}

// ClearContactProfile clears the "contact_profile" edge to the ContactProfile entity.
func (m *UserMutation) ClearContactProfile() {
	m.clearedcontact_profile = true
}

// ContactProfileCleared reports if the "contact_profile" edge to the ContactProfile entity was cleared.
func (m *UserMutation) ContactProfileCleared() bool {
	return m.clearedcontact_profile
}

// ContactProfileID returns the "contact_profile" edge ID in the mutation.
func (m *UserMutation) ContactProfileID() (id int, exists bool) {
	if m.contact_profile != nil {
		return *m.contact_profile, true
	}
	return
}

// ContactProfileIDs returns the "contact_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContactProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ContactProfileIDs() (ids []int) {
	if id := m.contact_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContactProfile resets all changes to the "contact_profile" edge.
func (m *UserMutation) ResetContactProfile() {
	m.contact_profile = nil
	m.clearedcontact_profile = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.verify_token != nil {
		fields = append(fields, user.FieldVerifyToken)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.registration_token != nil {
		fields = append(fields, user.FieldRegistrationToken)
	}
	if m.resetToken != nil {
		fields = append(fields, user.FieldResetToken)
	}
	if m.department != nil {
		fields = append(fields, user.FieldDepartment)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.token_expires_at != nil {
		fields = append(fields, user.FieldTokenExpiresAt)
	}
	if m.state != nil {
		fields = append(fields, user.FieldState)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.join_date != nil {
		fields = append(fields, user.FieldJoinDate)
	}
	if m.last_login != nil {
		fields = append(fields, user.FieldLastLogin)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUsername:
		return m.Username()
	case user.FieldVerifyToken:
		return m.VerifyToken()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRegistrationToken:
		return m.RegistrationToken()
	case user.FieldResetToken:
		return m.ResetToken()
	case user.FieldDepartment:
		return m.Department()
	case user.FieldRole:
		return m.Role()
	case user.FieldTokenExpiresAt:
		return m.TokenExpiresAt()
	case user.FieldState:
		return m.State()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldJoinDate:
		return m.JoinDate()
	case user.FieldLastLogin:
		return m.LastLogin()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldVerifyToken:
		return m.OldVerifyToken(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRegistrationToken:
		return m.OldRegistrationToken(ctx)
	case user.FieldResetToken:
		return m.OldResetToken(ctx)
	case user.FieldDepartment:
		return m.OldDepartment(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldTokenExpiresAt:
		return m.OldTokenExpiresAt(ctx)
	case user.FieldState:
		return m.OldState(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldJoinDate:
		return m.OldJoinDate(ctx)
	case user.FieldLastLogin:
		return m.OldLastLogin(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldVerifyToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerifyToken(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRegistrationToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationToken(v)
		return nil
	case user.FieldResetToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetToken(v)
		return nil
	case user.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldTokenExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenExpiresAt(v)
		return nil
	case user.FieldState:
		v, ok := value.(user.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldJoinDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinDate(v)
		return nil
	case user.FieldLastLogin:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLogin(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUsername) {
		fields = append(fields, user.FieldUsername)
	}
	if m.FieldCleared(user.FieldVerifyToken) {
		fields = append(fields, user.FieldVerifyToken)
	}
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldRegistrationToken) {
		fields = append(fields, user.FieldRegistrationToken)
	}
	if m.FieldCleared(user.FieldResetToken) {
		fields = append(fields, user.FieldResetToken)
	}
	if m.FieldCleared(user.FieldDepartment) {
		fields = append(fields, user.FieldDepartment)
	}
	if m.FieldCleared(user.FieldTokenExpiresAt) {
		fields = append(fields, user.FieldTokenExpiresAt)
	}
	if m.FieldCleared(user.FieldJoinDate) {
		fields = append(fields, user.FieldJoinDate)
	}
	if m.FieldCleared(user.FieldLastLogin) {
		fields = append(fields, user.FieldLastLogin)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ClearUsername()
		return nil
	case user.FieldVerifyToken:
		m.ClearVerifyToken()
		return nil
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldRegistrationToken:
		m.ClearRegistrationToken()
		return nil
	case user.FieldResetToken:
		m.ClearResetToken()
		return nil
	case user.FieldDepartment:
		m.ClearDepartment()
		return nil
	case user.FieldTokenExpiresAt:
		m.ClearTokenExpiresAt()
		return nil
	case user.FieldJoinDate:
		m.ClearJoinDate()
		return nil
	case user.FieldLastLogin:
		m.ClearLastLogin()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldVerifyToken:
		m.ResetVerifyToken()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRegistrationToken:
		m.ResetRegistrationToken()
		return nil
	case user.FieldResetToken:
		m.ResetResetToken()
		return nil
	case user.FieldDepartment:
		m.ResetDepartment()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldTokenExpiresAt:
		m.ResetTokenExpiresAt()
		return nil
	case user.FieldState:
		m.ResetState()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldJoinDate:
		m.ResetJoinDate()
		return nil
	case user.FieldLastLogin:
		m.ResetLastLogin()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.responses != nil {
		edges = append(edges, user.EdgeResponses)
	}
	if m.contact_profile != nil {
		edges = append(edges, user.EdgeContactProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeContactProfile:
		if id := m.contact_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedresponses != nil {
		edges = append(edges, user.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedresponses {
		edges = append(edges, user.EdgeResponses)
	}
	if m.clearedcontact_profile {
		edges = append(edges, user.EdgeContactProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeResponses:
		return m.clearedresponses
	case user.EdgeContactProfile:
		return m.clearedcontact_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeContactProfile:
		m.ClearContactProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeResponses:
		m.ResetResponses()
		return nil
	case user.EdgeContactProfile:
		m.ResetContactProfile()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
