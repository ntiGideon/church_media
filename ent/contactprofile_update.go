// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/contactprofile"
	"github.com/ogidi/church-media/ent/predicate"
	"github.com/ogidi/church-media/ent/user"
)

// ContactProfileUpdate is the builder for updating ContactProfile entities.
type ContactProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ContactProfileMutation
}

// Where appends a list predicates to the ContactProfileUpdate builder.
func (cpu *ContactProfileUpdate) Where(ps ...predicate.ContactProfile) *ContactProfileUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetFirstName sets the "first_name" field.
func (cpu *ContactProfileUpdate) SetFirstName(s string) *ContactProfileUpdate {
	cpu.mutation.SetFirstName(s)
	return cpu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableFirstName(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetFirstName(*s)
	}
	return cpu
}

// SetSurname sets the "surname" field.
func (cpu *ContactProfileUpdate) SetSurname(s string) *ContactProfileUpdate {
	cpu.mutation.SetSurname(s)
	return cpu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableSurname(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetSurname(*s)
	}
	return cpu
}

// SetPhoneNumber sets the "phone_number" field.
func (cpu *ContactProfileUpdate) SetPhoneNumber(s string) *ContactProfileUpdate {
	cpu.mutation.SetPhoneNumber(s)
	return cpu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillablePhoneNumber(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetPhoneNumber(*s)
	}
	return cpu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (cpu *ContactProfileUpdate) ClearPhoneNumber() *ContactProfileUpdate {
	cpu.mutation.ClearPhoneNumber()
	return cpu
}

// SetProfilePicture sets the "profile_picture" field.
func (cpu *ContactProfileUpdate) SetProfilePicture(s string) *ContactProfileUpdate {
	cpu.mutation.SetProfilePicture(s)
	return cpu
}

// SetNillableProfilePicture sets the "profile_picture" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableProfilePicture(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetProfilePicture(*s)
	}
	return cpu
}

// ClearProfilePicture clears the value of the "profile_picture" field.
func (cpu *ContactProfileUpdate) ClearProfilePicture() *ContactProfileUpdate {
	cpu.mutation.ClearProfilePicture()
	return cpu
}

// SetAddress sets the "address" field.
func (cpu *ContactProfileUpdate) SetAddress(s string) *ContactProfileUpdate {
	cpu.mutation.SetAddress(s)
	return cpu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableAddress(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetAddress(*s)
	}
	return cpu
}

// ClearAddress clears the value of the "address" field.
func (cpu *ContactProfileUpdate) ClearAddress() *ContactProfileUpdate {
	cpu.mutation.ClearAddress()
	return cpu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cpu *ContactProfileUpdate) SetDateOfBirth(t time.Time) *ContactProfileUpdate {
	cpu.mutation.SetDateOfBirth(t)
	return cpu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableDateOfBirth(t *time.Time) *ContactProfileUpdate {
	if t != nil {
		cpu.SetDateOfBirth(*t)
	}
	return cpu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (cpu *ContactProfileUpdate) ClearDateOfBirth() *ContactProfileUpdate {
	cpu.mutation.ClearDateOfBirth()
	return cpu
}

// SetGender sets the "gender" field.
func (cpu *ContactProfileUpdate) SetGender(c contactprofile.Gender) *ContactProfileUpdate {
	cpu.mutation.SetGender(c)
	return cpu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableGender(c *contactprofile.Gender) *ContactProfileUpdate {
	if c != nil {
		cpu.SetGender(*c)
	}
	return cpu
}

// ClearGender clears the value of the "gender" field.
func (cpu *ContactProfileUpdate) ClearGender() *ContactProfileUpdate {
	cpu.mutation.ClearGender()
	return cpu
}

// SetOccupation sets the "occupation" field.
func (cpu *ContactProfileUpdate) SetOccupation(s string) *ContactProfileUpdate {
	cpu.mutation.SetOccupation(s)
	return cpu
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableOccupation(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetOccupation(*s)
	}
	return cpu
}

// ClearOccupation clears the value of the "occupation" field.
func (cpu *ContactProfileUpdate) ClearOccupation() *ContactProfileUpdate {
	cpu.mutation.ClearOccupation()
	return cpu
}

// SetMaritalStatus sets the "marital_status" field.
func (cpu *ContactProfileUpdate) SetMaritalStatus(s string) *ContactProfileUpdate {
	cpu.mutation.SetMaritalStatus(s)
	return cpu
}

// SetNillableMaritalStatus sets the "marital_status" field if the given value is not nil.
func (cpu *ContactProfileUpdate) SetNillableMaritalStatus(s *string) *ContactProfileUpdate {
	if s != nil {
		cpu.SetMaritalStatus(*s)
	}
	return cpu
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (cpu *ContactProfileUpdate) ClearMaritalStatus() *ContactProfileUpdate {
	cpu.mutation.ClearMaritalStatus()
	return cpu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cpu *ContactProfileUpdate) SetUserID(id int) *ContactProfileUpdate {
	cpu.mutation.SetUserID(id)
	return cpu
}

// SetUser sets the "user" edge to the User entity.
func (cpu *ContactProfileUpdate) SetUser(u *User) *ContactProfileUpdate {
	return cpu.SetUserID(u.ID)
}

// Mutation returns the ContactProfileMutation object of the builder.
func (cpu *ContactProfileUpdate) Mutation() *ContactProfileMutation {
	return cpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cpu *ContactProfileUpdate) ClearUser() *ContactProfileUpdate {
	cpu.mutation.ClearUser()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ContactProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ContactProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ContactProfileUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ContactProfileUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *ContactProfileUpdate) check() error {
	if v, ok := cpu.mutation.FirstName(); ok {
		if err := contactprofile.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.first_name": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.Surname(); ok {
		if err := contactprofile.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.surname": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.PhoneNumber(); ok {
		if err := contactprofile.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.phone_number": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.Gender(); ok {
		if err := contactprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.gender": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.Occupation(); ok {
		if err := contactprofile.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.occupation": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.MaritalStatus(); ok {
		if err := contactprofile.MaritalStatusValidator(v); err != nil {
			return &ValidationError{Name: "marital_status", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.marital_status": %w`, err)}
		}
	}
	if cpu.mutation.UserCleared() && len(cpu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContactProfile.user"`)
	}
	return nil
}

func (cpu *ContactProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactprofile.Table, contactprofile.Columns, sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.FirstName(); ok {
		_spec.SetField(contactprofile.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cpu.mutation.Surname(); ok {
		_spec.SetField(contactprofile.FieldSurname, field.TypeString, value)
	}
	if value, ok := cpu.mutation.PhoneNumber(); ok {
		_spec.SetField(contactprofile.FieldPhoneNumber, field.TypeString, value)
	}
	if cpu.mutation.PhoneNumberCleared() {
		_spec.ClearField(contactprofile.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := cpu.mutation.ProfilePicture(); ok {
		_spec.SetField(contactprofile.FieldProfilePicture, field.TypeString, value)
	}
	if cpu.mutation.ProfilePictureCleared() {
		_spec.ClearField(contactprofile.FieldProfilePicture, field.TypeString)
	}
	if value, ok := cpu.mutation.Address(); ok {
		_spec.SetField(contactprofile.FieldAddress, field.TypeString, value)
	}
	if cpu.mutation.AddressCleared() {
		_spec.ClearField(contactprofile.FieldAddress, field.TypeString)
	}
	if value, ok := cpu.mutation.DateOfBirth(); ok {
		_spec.SetField(contactprofile.FieldDateOfBirth, field.TypeTime, value)
	}
	if cpu.mutation.DateOfBirthCleared() {
		_spec.ClearField(contactprofile.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := cpu.mutation.Gender(); ok {
		_spec.SetField(contactprofile.FieldGender, field.TypeEnum, value)
	}
	if cpu.mutation.GenderCleared() {
		_spec.ClearField(contactprofile.FieldGender, field.TypeEnum)
	}
	if value, ok := cpu.mutation.Occupation(); ok {
		_spec.SetField(contactprofile.FieldOccupation, field.TypeString, value)
	}
	if cpu.mutation.OccupationCleared() {
		_spec.ClearField(contactprofile.FieldOccupation, field.TypeString)
	}
	if value, ok := cpu.mutation.MaritalStatus(); ok {
		_spec.SetField(contactprofile.FieldMaritalStatus, field.TypeString, value)
	}
	if cpu.mutation.MaritalStatusCleared() {
		_spec.ClearField(contactprofile.FieldMaritalStatus, field.TypeString)
	}
	if cpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contactprofile.UserTable,
			Columns: []string{contactprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contactprofile.UserTable,
			Columns: []string{contactprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// ContactProfileUpdateOne is the builder for updating a single ContactProfile entity.
type ContactProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactProfileMutation
}

// SetFirstName sets the "first_name" field.
func (cpuo *ContactProfileUpdateOne) SetFirstName(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetFirstName(s)
	return cpuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableFirstName(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetFirstName(*s)
	}
	return cpuo
}

// SetSurname sets the "surname" field.
func (cpuo *ContactProfileUpdateOne) SetSurname(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetSurname(s)
	return cpuo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableSurname(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetSurname(*s)
	}
	return cpuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cpuo *ContactProfileUpdateOne) SetPhoneNumber(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetPhoneNumber(s)
	return cpuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillablePhoneNumber(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetPhoneNumber(*s)
	}
	return cpuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (cpuo *ContactProfileUpdateOne) ClearPhoneNumber() *ContactProfileUpdateOne {
	cpuo.mutation.ClearPhoneNumber()
	return cpuo
}

// SetProfilePicture sets the "profile_picture" field.
func (cpuo *ContactProfileUpdateOne) SetProfilePicture(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetProfilePicture(s)
	return cpuo
}

// SetNillableProfilePicture sets the "profile_picture" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableProfilePicture(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetProfilePicture(*s)
	}
	return cpuo
}

// ClearProfilePicture clears the value of the "profile_picture" field.
func (cpuo *ContactProfileUpdateOne) ClearProfilePicture() *ContactProfileUpdateOne {
	cpuo.mutation.ClearProfilePicture()
	return cpuo
}

// SetAddress sets the "address" field.
func (cpuo *ContactProfileUpdateOne) SetAddress(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetAddress(s)
	return cpuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableAddress(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetAddress(*s)
	}
	return cpuo
}

// ClearAddress clears the value of the "address" field.
func (cpuo *ContactProfileUpdateOne) ClearAddress() *ContactProfileUpdateOne {
	cpuo.mutation.ClearAddress()
	return cpuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cpuo *ContactProfileUpdateOne) SetDateOfBirth(t time.Time) *ContactProfileUpdateOne {
	cpuo.mutation.SetDateOfBirth(t)
	return cpuo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableDateOfBirth(t *time.Time) *ContactProfileUpdateOne {
	if t != nil {
		cpuo.SetDateOfBirth(*t)
	}
	return cpuo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (cpuo *ContactProfileUpdateOne) ClearDateOfBirth() *ContactProfileUpdateOne {
	cpuo.mutation.ClearDateOfBirth()
	return cpuo
}

// SetGender sets the "gender" field.
func (cpuo *ContactProfileUpdateOne) SetGender(c contactprofile.Gender) *ContactProfileUpdateOne {
	cpuo.mutation.SetGender(c)
	return cpuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableGender(c *contactprofile.Gender) *ContactProfileUpdateOne {
	if c != nil {
		cpuo.SetGender(*c)
	}
	return cpuo
}

// ClearGender clears the value of the "gender" field.
func (cpuo *ContactProfileUpdateOne) ClearGender() *ContactProfileUpdateOne {
	cpuo.mutation.ClearGender()
	return cpuo
}

// SetOccupation sets the "occupation" field.
func (cpuo *ContactProfileUpdateOne) SetOccupation(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetOccupation(s)
	return cpuo
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableOccupation(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetOccupation(*s)
	}
	return cpuo
}

// ClearOccupation clears the value of the "occupation" field.
func (cpuo *ContactProfileUpdateOne) ClearOccupation() *ContactProfileUpdateOne {
	cpuo.mutation.ClearOccupation()
	return cpuo
}

// SetMaritalStatus sets the "marital_status" field.
func (cpuo *ContactProfileUpdateOne) SetMaritalStatus(s string) *ContactProfileUpdateOne {
	cpuo.mutation.SetMaritalStatus(s)
	return cpuo
}

// SetNillableMaritalStatus sets the "marital_status" field if the given value is not nil.
func (cpuo *ContactProfileUpdateOne) SetNillableMaritalStatus(s *string) *ContactProfileUpdateOne {
	if s != nil {
		cpuo.SetMaritalStatus(*s)
	}
	return cpuo
}

// ClearMaritalStatus clears the value of the "marital_status" field.
func (cpuo *ContactProfileUpdateOne) ClearMaritalStatus() *ContactProfileUpdateOne {
	cpuo.mutation.ClearMaritalStatus()
	return cpuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cpuo *ContactProfileUpdateOne) SetUserID(id int) *ContactProfileUpdateOne {
	cpuo.mutation.SetUserID(id)
	return cpuo
}

// SetUser sets the "user" edge to the User entity.
func (cpuo *ContactProfileUpdateOne) SetUser(u *User) *ContactProfileUpdateOne {
	return cpuo.SetUserID(u.ID)
}

// Mutation returns the ContactProfileMutation object of the builder.
func (cpuo *ContactProfileUpdateOne) Mutation() *ContactProfileMutation {
	return cpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cpuo *ContactProfileUpdateOne) ClearUser() *ContactProfileUpdateOne {
	cpuo.mutation.ClearUser()
	return cpuo
}

// Where appends a list predicates to the ContactProfileUpdate builder.
func (cpuo *ContactProfileUpdateOne) Where(ps ...predicate.ContactProfile) *ContactProfileUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *ContactProfileUpdateOne) Select(field string, fields ...string) *ContactProfileUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated ContactProfile entity.
func (cpuo *ContactProfileUpdateOne) Save(ctx context.Context) (*ContactProfile, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ContactProfileUpdateOne) SaveX(ctx context.Context) *ContactProfile {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ContactProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ContactProfileUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *ContactProfileUpdateOne) check() error {
	if v, ok := cpuo.mutation.FirstName(); ok {
		if err := contactprofile.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.first_name": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.Surname(); ok {
		if err := contactprofile.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.surname": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.PhoneNumber(); ok {
		if err := contactprofile.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.phone_number": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.Gender(); ok {
		if err := contactprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.gender": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.Occupation(); ok {
		if err := contactprofile.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.occupation": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.MaritalStatus(); ok {
		if err := contactprofile.MaritalStatusValidator(v); err != nil {
			return &ValidationError{Name: "marital_status", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.marital_status": %w`, err)}
		}
	}
	if cpuo.mutation.UserCleared() && len(cpuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContactProfile.user"`)
	}
	return nil
}

func (cpuo *ContactProfileUpdateOne) sqlSave(ctx context.Context) (_node *ContactProfile, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactprofile.Table, contactprofile.Columns, sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContactProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactprofile.FieldID)
		for _, f := range fields {
			if !contactprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.FirstName(); ok {
		_spec.SetField(contactprofile.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.Surname(); ok {
		_spec.SetField(contactprofile.FieldSurname, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.PhoneNumber(); ok {
		_spec.SetField(contactprofile.FieldPhoneNumber, field.TypeString, value)
	}
	if cpuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(contactprofile.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := cpuo.mutation.ProfilePicture(); ok {
		_spec.SetField(contactprofile.FieldProfilePicture, field.TypeString, value)
	}
	if cpuo.mutation.ProfilePictureCleared() {
		_spec.ClearField(contactprofile.FieldProfilePicture, field.TypeString)
	}
	if value, ok := cpuo.mutation.Address(); ok {
		_spec.SetField(contactprofile.FieldAddress, field.TypeString, value)
	}
	if cpuo.mutation.AddressCleared() {
		_spec.ClearField(contactprofile.FieldAddress, field.TypeString)
	}
	if value, ok := cpuo.mutation.DateOfBirth(); ok {
		_spec.SetField(contactprofile.FieldDateOfBirth, field.TypeTime, value)
	}
	if cpuo.mutation.DateOfBirthCleared() {
		_spec.ClearField(contactprofile.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := cpuo.mutation.Gender(); ok {
		_spec.SetField(contactprofile.FieldGender, field.TypeEnum, value)
	}
	if cpuo.mutation.GenderCleared() {
		_spec.ClearField(contactprofile.FieldGender, field.TypeEnum)
	}
	if value, ok := cpuo.mutation.Occupation(); ok {
		_spec.SetField(contactprofile.FieldOccupation, field.TypeString, value)
	}
	if cpuo.mutation.OccupationCleared() {
		_spec.ClearField(contactprofile.FieldOccupation, field.TypeString)
	}
	if value, ok := cpuo.mutation.MaritalStatus(); ok {
		_spec.SetField(contactprofile.FieldMaritalStatus, field.TypeString, value)
	}
	if cpuo.mutation.MaritalStatusCleared() {
		_spec.ClearField(contactprofile.FieldMaritalStatus, field.TypeString)
	}
	if cpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contactprofile.UserTable,
			Columns: []string{contactprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contactprofile.UserTable,
			Columns: []string{contactprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContactProfile{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
