// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ogidi/church-media/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// VerifyToken applies equality check predicate on the "verify_token" field. It's identical to VerifyTokenEQ.
func VerifyToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerifyToken, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// RegistrationToken applies equality check predicate on the "registration_token" field. It's identical to RegistrationTokenEQ.
func RegistrationToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegistrationToken, v))
}

// ResetToken applies equality check predicate on the "resetToken" field. It's identical to ResetTokenEQ.
func ResetToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetToken, v))
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartment, v))
}

// TokenExpiresAt applies equality check predicate on the "token_expires_at" field. It's identical to TokenExpiresAtEQ.
func TokenExpiresAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTokenExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// JoinDate applies equality check predicate on the "join_date" field. It's identical to JoinDateEQ.
func JoinDate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJoinDate, v))
}

// LastLogin applies equality check predicate on the "last_login" field. It's identical to LastLoginEQ.
func LastLogin(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogin, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// VerifyTokenEQ applies the EQ predicate on the "verify_token" field.
func VerifyTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerifyToken, v))
}

// VerifyTokenNEQ applies the NEQ predicate on the "verify_token" field.
func VerifyTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVerifyToken, v))
}

// VerifyTokenIn applies the In predicate on the "verify_token" field.
func VerifyTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldVerifyToken, vs...))
}

// VerifyTokenNotIn applies the NotIn predicate on the "verify_token" field.
func VerifyTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldVerifyToken, vs...))
}

// VerifyTokenGT applies the GT predicate on the "verify_token" field.
func VerifyTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldVerifyToken, v))
}

// VerifyTokenGTE applies the GTE predicate on the "verify_token" field.
func VerifyTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldVerifyToken, v))
}

// VerifyTokenLT applies the LT predicate on the "verify_token" field.
func VerifyTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldVerifyToken, v))
}

// VerifyTokenLTE applies the LTE predicate on the "verify_token" field.
func VerifyTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldVerifyToken, v))
}

// VerifyTokenContains applies the Contains predicate on the "verify_token" field.
func VerifyTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldVerifyToken, v))
}

// VerifyTokenHasPrefix applies the HasPrefix predicate on the "verify_token" field.
func VerifyTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldVerifyToken, v))
}

// VerifyTokenHasSuffix applies the HasSuffix predicate on the "verify_token" field.
func VerifyTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldVerifyToken, v))
}

// VerifyTokenIsNil applies the IsNil predicate on the "verify_token" field.
func VerifyTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldVerifyToken))
}

// VerifyTokenNotNil applies the NotNil predicate on the "verify_token" field.
func VerifyTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldVerifyToken))
}

// VerifyTokenEqualFold applies the EqualFold predicate on the "verify_token" field.
func VerifyTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldVerifyToken, v))
}

// VerifyTokenContainsFold applies the ContainsFold predicate on the "verify_token" field.
func VerifyTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldVerifyToken, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// RegistrationTokenEQ applies the EQ predicate on the "registration_token" field.
func RegistrationTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRegistrationToken, v))
}

// RegistrationTokenNEQ applies the NEQ predicate on the "registration_token" field.
func RegistrationTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRegistrationToken, v))
}

// RegistrationTokenIn applies the In predicate on the "registration_token" field.
func RegistrationTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRegistrationToken, vs...))
}

// RegistrationTokenNotIn applies the NotIn predicate on the "registration_token" field.
func RegistrationTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRegistrationToken, vs...))
}

// RegistrationTokenGT applies the GT predicate on the "registration_token" field.
func RegistrationTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRegistrationToken, v))
}

// RegistrationTokenGTE applies the GTE predicate on the "registration_token" field.
func RegistrationTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRegistrationToken, v))
}

// RegistrationTokenLT applies the LT predicate on the "registration_token" field.
func RegistrationTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRegistrationToken, v))
}

// RegistrationTokenLTE applies the LTE predicate on the "registration_token" field.
func RegistrationTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRegistrationToken, v))
}

// RegistrationTokenContains applies the Contains predicate on the "registration_token" field.
func RegistrationTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRegistrationToken, v))
}

// RegistrationTokenHasPrefix applies the HasPrefix predicate on the "registration_token" field.
func RegistrationTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRegistrationToken, v))
}

// RegistrationTokenHasSuffix applies the HasSuffix predicate on the "registration_token" field.
func RegistrationTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRegistrationToken, v))
}

// RegistrationTokenIsNil applies the IsNil predicate on the "registration_token" field.
func RegistrationTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRegistrationToken))
}

// RegistrationTokenNotNil applies the NotNil predicate on the "registration_token" field.
func RegistrationTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRegistrationToken))
}

// RegistrationTokenEqualFold applies the EqualFold predicate on the "registration_token" field.
func RegistrationTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRegistrationToken, v))
}

// RegistrationTokenContainsFold applies the ContainsFold predicate on the "registration_token" field.
func RegistrationTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRegistrationToken, v))
}

// ResetTokenEQ applies the EQ predicate on the "resetToken" field.
func ResetTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetToken, v))
}

// ResetTokenNEQ applies the NEQ predicate on the "resetToken" field.
func ResetTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldResetToken, v))
}

// ResetTokenIn applies the In predicate on the "resetToken" field.
func ResetTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldResetToken, vs...))
}

// ResetTokenNotIn applies the NotIn predicate on the "resetToken" field.
func ResetTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldResetToken, vs...))
}

// ResetTokenGT applies the GT predicate on the "resetToken" field.
func ResetTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldResetToken, v))
}

// ResetTokenGTE applies the GTE predicate on the "resetToken" field.
func ResetTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldResetToken, v))
}

// ResetTokenLT applies the LT predicate on the "resetToken" field.
func ResetTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldResetToken, v))
}

// ResetTokenLTE applies the LTE predicate on the "resetToken" field.
func ResetTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldResetToken, v))
}

// ResetTokenContains applies the Contains predicate on the "resetToken" field.
func ResetTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldResetToken, v))
}

// ResetTokenHasPrefix applies the HasPrefix predicate on the "resetToken" field.
func ResetTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldResetToken, v))
}

// ResetTokenHasSuffix applies the HasSuffix predicate on the "resetToken" field.
func ResetTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldResetToken, v))
}

// ResetTokenIsNil applies the IsNil predicate on the "resetToken" field.
func ResetTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldResetToken))
}

// ResetTokenNotNil applies the NotNil predicate on the "resetToken" field.
func ResetTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldResetToken))
}

// ResetTokenEqualFold applies the EqualFold predicate on the "resetToken" field.
func ResetTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldResetToken, v))
}

// ResetTokenContainsFold applies the ContainsFold predicate on the "resetToken" field.
func ResetTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldResetToken, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDepartment, vs...))
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDepartment, v))
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDepartment, v))
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDepartment, v))
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDepartment, v))
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDepartment, v))
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDepartment, v))
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDepartment, v))
}

// DepartmentIsNil applies the IsNil predicate on the "department" field.
func DepartmentIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDepartment))
}

// DepartmentNotNil applies the NotNil predicate on the "department" field.
func DepartmentNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDepartment))
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDepartment, v))
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDepartment, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// TokenExpiresAtEQ applies the EQ predicate on the "token_expires_at" field.
func TokenExpiresAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTokenExpiresAt, v))
}

// TokenExpiresAtNEQ applies the NEQ predicate on the "token_expires_at" field.
func TokenExpiresAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTokenExpiresAt, v))
}

// TokenExpiresAtIn applies the In predicate on the "token_expires_at" field.
func TokenExpiresAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldTokenExpiresAt, vs...))
}

// TokenExpiresAtNotIn applies the NotIn predicate on the "token_expires_at" field.
func TokenExpiresAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTokenExpiresAt, vs...))
}

// TokenExpiresAtGT applies the GT predicate on the "token_expires_at" field.
func TokenExpiresAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldTokenExpiresAt, v))
}

// TokenExpiresAtGTE applies the GTE predicate on the "token_expires_at" field.
func TokenExpiresAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTokenExpiresAt, v))
}

// TokenExpiresAtLT applies the LT predicate on the "token_expires_at" field.
func TokenExpiresAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldTokenExpiresAt, v))
}

// TokenExpiresAtLTE applies the LTE predicate on the "token_expires_at" field.
func TokenExpiresAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTokenExpiresAt, v))
}

// TokenExpiresAtIsNil applies the IsNil predicate on the "token_expires_at" field.
func TokenExpiresAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTokenExpiresAt))
}

// TokenExpiresAtNotNil applies the NotNil predicate on the "token_expires_at" field.
func TokenExpiresAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTokenExpiresAt))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.User {
	return predicate.User(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.User {
	return predicate.User(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldState, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// JoinDateEQ applies the EQ predicate on the "join_date" field.
func JoinDateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJoinDate, v))
}

// JoinDateNEQ applies the NEQ predicate on the "join_date" field.
func JoinDateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldJoinDate, v))
}

// JoinDateIn applies the In predicate on the "join_date" field.
func JoinDateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldJoinDate, vs...))
}

// JoinDateNotIn applies the NotIn predicate on the "join_date" field.
func JoinDateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldJoinDate, vs...))
}

// JoinDateGT applies the GT predicate on the "join_date" field.
func JoinDateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldJoinDate, v))
}

// JoinDateGTE applies the GTE predicate on the "join_date" field.
func JoinDateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldJoinDate, v))
}

// JoinDateLT applies the LT predicate on the "join_date" field.
func JoinDateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldJoinDate, v))
}

// JoinDateLTE applies the LTE predicate on the "join_date" field.
func JoinDateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldJoinDate, v))
}

// JoinDateIsNil applies the IsNil predicate on the "join_date" field.
func JoinDateIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldJoinDate))
}

// JoinDateNotNil applies the NotNil predicate on the "join_date" field.
func JoinDateNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldJoinDate))
}

// LastLoginEQ applies the EQ predicate on the "last_login" field.
func LastLoginEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogin, v))
}

// LastLoginNEQ applies the NEQ predicate on the "last_login" field.
func LastLoginNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLogin, v))
}

// LastLoginIn applies the In predicate on the "last_login" field.
func LastLoginIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLogin, vs...))
}

// LastLoginNotIn applies the NotIn predicate on the "last_login" field.
func LastLoginNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLogin, vs...))
}

// LastLoginGT applies the GT predicate on the "last_login" field.
func LastLoginGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLogin, v))
}

// LastLoginGTE applies the GTE predicate on the "last_login" field.
func LastLoginGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLogin, v))
}

// LastLoginLT applies the LT predicate on the "last_login" field.
func LastLoginLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLogin, v))
}

// LastLoginLTE applies the LTE predicate on the "last_login" field.
func LastLoginLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLogin, v))
}

// LastLoginIsNil applies the IsNil predicate on the "last_login" field.
func LastLoginIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLogin))
}

// LastLoginNotNil applies the NotNil predicate on the "last_login" field.
func LastLoginNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLogin))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasResponses applies the HasEdge predicate on the "responses" edge.
func HasResponses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResponsesWith applies the HasEdge predicate on the "responses" edge with a given conditions (other predicates).
func HasResponsesWith(preds ...predicate.Response) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newResponsesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStories applies the HasEdge predicate on the "stories" edge.
func HasStories() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StoriesTable, StoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoriesWith applies the HasEdge predicate on the "stories" edge with a given conditions (other predicates).
func HasStoriesWith(preds ...predicate.Story) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newStoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContactProfile applies the HasEdge predicate on the "contact_profile" edge.
func HasContactProfile() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ContactProfileTable, ContactProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactProfileWith applies the HasEdge predicate on the "contact_profile" edge with a given conditions (other predicates).
func HasContactProfileWith(preds ...predicate.ContactProfile) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newContactProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
