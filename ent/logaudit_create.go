// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/logaudit"
)

// LogAuditCreate is the builder for creating a LogAudit entity.
type LogAuditCreate struct {
	config
	mutation *LogAuditMutation
	hooks    []Hook
}

// SetAction sets the "action" field.
func (lac *LogAuditCreate) SetAction(s string) *LogAuditCreate {
	lac.mutation.SetAction(s)
	return lac
}

// SetEntityType sets the "entity_type" field.
func (lac *LogAuditCreate) SetEntityType(s string) *LogAuditCreate {
	lac.mutation.SetEntityType(s)
	return lac
}

// SetEntityID sets the "entity_id" field.
func (lac *LogAuditCreate) SetEntityID(i int) *LogAuditCreate {
	lac.mutation.SetEntityID(i)
	return lac
}

// SetEntityData sets the "entity_data" field.
func (lac *LogAuditCreate) SetEntityData(m map[string]interface{}) *LogAuditCreate {
	lac.mutation.SetEntityData(m)
	return lac
}

// SetCreatedBy sets the "created_by" field.
func (lac *LogAuditCreate) SetCreatedBy(i int) *LogAuditCreate {
	lac.mutation.SetCreatedBy(i)
	return lac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (lac *LogAuditCreate) SetNillableCreatedBy(i *int) *LogAuditCreate {
	if i != nil {
		lac.SetCreatedBy(*i)
	}
	return lac
}

// SetCreatedAt sets the "created_at" field.
func (lac *LogAuditCreate) SetCreatedAt(t time.Time) *LogAuditCreate {
	lac.mutation.SetCreatedAt(t)
	return lac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lac *LogAuditCreate) SetNillableCreatedAt(t *time.Time) *LogAuditCreate {
	if t != nil {
		lac.SetCreatedAt(*t)
	}
	return lac
}

// SetIPAddress sets the "ip_address" field.
func (lac *LogAuditCreate) SetIPAddress(s string) *LogAuditCreate {
	lac.mutation.SetIPAddress(s)
	return lac
}

// SetUserAgent sets the "user_agent" field.
func (lac *LogAuditCreate) SetUserAgent(s string) *LogAuditCreate {
	lac.mutation.SetUserAgent(s)
	return lac
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (lac *LogAuditCreate) SetNillableUserAgent(s *string) *LogAuditCreate {
	if s != nil {
		lac.SetUserAgent(*s)
	}
	return lac
}

// SetRequestID sets the "request_id" field.
func (lac *LogAuditCreate) SetRequestID(s string) *LogAuditCreate {
	lac.mutation.SetRequestID(s)
	return lac
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (lac *LogAuditCreate) SetNillableRequestID(s *string) *LogAuditCreate {
	if s != nil {
		lac.SetRequestID(*s)
	}
	return lac
}

// SetMetadata sets the "metadata" field.
func (lac *LogAuditCreate) SetMetadata(m map[string]interface{}) *LogAuditCreate {
	lac.mutation.SetMetadata(m)
	return lac
}

// SetID sets the "id" field.
func (lac *LogAuditCreate) SetID(i int) *LogAuditCreate {
	lac.mutation.SetID(i)
	return lac
}

// Mutation returns the LogAuditMutation object of the builder.
func (lac *LogAuditCreate) Mutation() *LogAuditMutation {
	return lac.mutation
}

// Save creates the LogAudit in the database.
func (lac *LogAuditCreate) Save(ctx context.Context) (*LogAudit, error) {
	lac.defaults()
	return withHooks(ctx, lac.sqlSave, lac.mutation, lac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lac *LogAuditCreate) SaveX(ctx context.Context) *LogAudit {
	v, err := lac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lac *LogAuditCreate) Exec(ctx context.Context) error {
	_, err := lac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lac *LogAuditCreate) ExecX(ctx context.Context) {
	if err := lac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lac *LogAuditCreate) defaults() {
	if _, ok := lac.mutation.CreatedAt(); !ok {
		v := logaudit.DefaultCreatedAt()
		lac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lac *LogAuditCreate) check() error {
	if _, ok := lac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "LogAudit.action"`)}
	}
	if v, ok := lac.mutation.Action(); ok {
		if err := logaudit.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "LogAudit.action": %w`, err)}
		}
	}
	if _, ok := lac.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "LogAudit.entity_type"`)}
	}
	if v, ok := lac.mutation.EntityType(); ok {
		if err := logaudit.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "LogAudit.entity_type": %w`, err)}
		}
	}
	if _, ok := lac.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "LogAudit.entity_id"`)}
	}
	if _, ok := lac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogAudit.created_at"`)}
	}
	if _, ok := lac.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "LogAudit.ip_address"`)}
	}
	if v, ok := lac.mutation.IPAddress(); ok {
		if err := logaudit.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "LogAudit.ip_address": %w`, err)}
		}
	}
	return nil
}

func (lac *LogAuditCreate) sqlSave(ctx context.Context) (*LogAudit, error) {
	if err := lac.check(); err != nil {
		return nil, err
	}
	_node, _spec := lac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	lac.mutation.id = &_node.ID
	lac.mutation.done = true
	return _node, nil
}

func (lac *LogAuditCreate) createSpec() (*LogAudit, *sqlgraph.CreateSpec) {
	var (
		_node = &LogAudit{config: lac.config}
		_spec = sqlgraph.NewCreateSpec(logaudit.Table, sqlgraph.NewFieldSpec(logaudit.FieldID, field.TypeInt))
	)
	if id, ok := lac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lac.mutation.Action(); ok {
		_spec.SetField(logaudit.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := lac.mutation.EntityType(); ok {
		_spec.SetField(logaudit.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := lac.mutation.EntityID(); ok {
		_spec.SetField(logaudit.FieldEntityID, field.TypeInt, value)
		_node.EntityID = value
	}
	if value, ok := lac.mutation.EntityData(); ok {
		_spec.SetField(logaudit.FieldEntityData, field.TypeJSON, value)
		_node.EntityData = value
	}
	if value, ok := lac.mutation.CreatedBy(); ok {
		_spec.SetField(logaudit.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := lac.mutation.CreatedAt(); ok {
		_spec.SetField(logaudit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lac.mutation.IPAddress(); ok {
		_spec.SetField(logaudit.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := lac.mutation.UserAgent(); ok {
		_spec.SetField(logaudit.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := lac.mutation.RequestID(); ok {
		_spec.SetField(logaudit.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := lac.mutation.Metadata(); ok {
		_spec.SetField(logaudit.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// LogAuditCreateBulk is the builder for creating many LogAudit entities in bulk.
type LogAuditCreateBulk struct {
	config
	err      error
	builders []*LogAuditCreate
}

// Save creates the LogAudit entities in the database.
func (lacb *LogAuditCreateBulk) Save(ctx context.Context) ([]*LogAudit, error) {
	if lacb.err != nil {
		return nil, lacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lacb.builders))
	nodes := make([]*LogAudit, len(lacb.builders))
	mutators := make([]Mutator, len(lacb.builders))
	for i := range lacb.builders {
		func(i int, root context.Context) {
			builder := lacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogAuditMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lacb *LogAuditCreateBulk) SaveX(ctx context.Context) []*LogAudit {
	v, err := lacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lacb *LogAuditCreateBulk) Exec(ctx context.Context) error {
	_, err := lacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lacb *LogAuditCreateBulk) ExecX(ctx context.Context) {
	if err := lacb.Exec(ctx); err != nil {
		panic(err)
	}
}
