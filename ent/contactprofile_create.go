// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/contactprofile"
	"github.com/ogidi/church-media/ent/user"
)

// ContactProfileCreate is the builder for creating a ContactProfile entity.
type ContactProfileCreate struct {
	config
	mutation *ContactProfileMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (cpc *ContactProfileCreate) SetFirstName(s string) *ContactProfileCreate {
	cpc.mutation.SetFirstName(s)
	return cpc
}

// SetSurname sets the "surname" field.
func (cpc *ContactProfileCreate) SetSurname(s string) *ContactProfileCreate {
	cpc.mutation.SetSurname(s)
	return cpc
}

// SetPhoneNumber sets the "phone_number" field.
func (cpc *ContactProfileCreate) SetPhoneNumber(s string) *ContactProfileCreate {
	cpc.mutation.SetPhoneNumber(s)
	return cpc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillablePhoneNumber(s *string) *ContactProfileCreate {
	if s != nil {
		cpc.SetPhoneNumber(*s)
	}
	return cpc
}

// SetProfilePicture sets the "profile_picture" field.
func (cpc *ContactProfileCreate) SetProfilePicture(s string) *ContactProfileCreate {
	cpc.mutation.SetProfilePicture(s)
	return cpc
}

// SetNillableProfilePicture sets the "profile_picture" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillableProfilePicture(s *string) *ContactProfileCreate {
	if s != nil {
		cpc.SetProfilePicture(*s)
	}
	return cpc
}

// SetAddress sets the "address" field.
func (cpc *ContactProfileCreate) SetAddress(s string) *ContactProfileCreate {
	cpc.mutation.SetAddress(s)
	return cpc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillableAddress(s *string) *ContactProfileCreate {
	if s != nil {
		cpc.SetAddress(*s)
	}
	return cpc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cpc *ContactProfileCreate) SetDateOfBirth(t time.Time) *ContactProfileCreate {
	cpc.mutation.SetDateOfBirth(t)
	return cpc
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillableDateOfBirth(t *time.Time) *ContactProfileCreate {
	if t != nil {
		cpc.SetDateOfBirth(*t)
	}
	return cpc
}

// SetGender sets the "gender" field.
func (cpc *ContactProfileCreate) SetGender(c contactprofile.Gender) *ContactProfileCreate {
	cpc.mutation.SetGender(c)
	return cpc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillableGender(c *contactprofile.Gender) *ContactProfileCreate {
	if c != nil {
		cpc.SetGender(*c)
	}
	return cpc
}

// SetOccupation sets the "occupation" field.
func (cpc *ContactProfileCreate) SetOccupation(s string) *ContactProfileCreate {
	cpc.mutation.SetOccupation(s)
	return cpc
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillableOccupation(s *string) *ContactProfileCreate {
	if s != nil {
		cpc.SetOccupation(*s)
	}
	return cpc
}

// SetMaritalStatus sets the "marital_status" field.
func (cpc *ContactProfileCreate) SetMaritalStatus(s string) *ContactProfileCreate {
	cpc.mutation.SetMaritalStatus(s)
	return cpc
}

// SetNillableMaritalStatus sets the "marital_status" field if the given value is not nil.
func (cpc *ContactProfileCreate) SetNillableMaritalStatus(s *string) *ContactProfileCreate {
	if s != nil {
		cpc.SetMaritalStatus(*s)
	}
	return cpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cpc *ContactProfileCreate) SetUserID(id int) *ContactProfileCreate {
	cpc.mutation.SetUserID(id)
	return cpc
}

// SetUser sets the "user" edge to the User entity.
func (cpc *ContactProfileCreate) SetUser(u *User) *ContactProfileCreate {
	return cpc.SetUserID(u.ID)
}

// Mutation returns the ContactProfileMutation object of the builder.
func (cpc *ContactProfileCreate) Mutation() *ContactProfileMutation {
	return cpc.mutation
}

// Save creates the ContactProfile in the database.
func (cpc *ContactProfileCreate) Save(ctx context.Context) (*ContactProfile, error) {
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ContactProfileCreate) SaveX(ctx context.Context) *ContactProfile {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ContactProfileCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ContactProfileCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ContactProfileCreate) check() error {
	if _, ok := cpc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "ContactProfile.first_name"`)}
	}
	if v, ok := cpc.mutation.FirstName(); ok {
		if err := contactprofile.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.first_name": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "ContactProfile.surname"`)}
	}
	if v, ok := cpc.mutation.Surname(); ok {
		if err := contactprofile.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.surname": %w`, err)}
		}
	}
	if v, ok := cpc.mutation.PhoneNumber(); ok {
		if err := contactprofile.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.phone_number": %w`, err)}
		}
	}
	if v, ok := cpc.mutation.Gender(); ok {
		if err := contactprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.gender": %w`, err)}
		}
	}
	if v, ok := cpc.mutation.Occupation(); ok {
		if err := contactprofile.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.occupation": %w`, err)}
		}
	}
	if v, ok := cpc.mutation.MaritalStatus(); ok {
		if err := contactprofile.MaritalStatusValidator(v); err != nil {
			return &ValidationError{Name: "marital_status", err: fmt.Errorf(`ent: validator failed for field "ContactProfile.marital_status": %w`, err)}
		}
	}
	if len(cpc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ContactProfile.user"`)}
	}
	return nil
}

func (cpc *ContactProfileCreate) sqlSave(ctx context.Context) (*ContactProfile, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *ContactProfileCreate) createSpec() (*ContactProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactProfile{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(contactprofile.Table, sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt))
	)
	if value, ok := cpc.mutation.FirstName(); ok {
		_spec.SetField(contactprofile.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := cpc.mutation.Surname(); ok {
		_spec.SetField(contactprofile.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := cpc.mutation.PhoneNumber(); ok {
		_spec.SetField(contactprofile.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = &value
	}
	if value, ok := cpc.mutation.ProfilePicture(); ok {
		_spec.SetField(contactprofile.FieldProfilePicture, field.TypeString, value)
		_node.ProfilePicture = &value
	}
	if value, ok := cpc.mutation.Address(); ok {
		_spec.SetField(contactprofile.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := cpc.mutation.DateOfBirth(); ok {
		_spec.SetField(contactprofile.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = &value
	}
	if value, ok := cpc.mutation.Gender(); ok {
		_spec.SetField(contactprofile.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := cpc.mutation.Occupation(); ok {
		_spec.SetField(contactprofile.FieldOccupation, field.TypeString, value)
		_node.Occupation = value
	}
	if value, ok := cpc.mutation.MaritalStatus(); ok {
		_spec.SetField(contactprofile.FieldMaritalStatus, field.TypeString, value)
		_node.MaritalStatus = value
	}
	if nodes := cpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactprofile.UserTable,
			Columns: []string{contactprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_contact_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContactProfileCreateBulk is the builder for creating many ContactProfile entities in bulk.
type ContactProfileCreateBulk struct {
	config
	err      error
	builders []*ContactProfileCreate
}

// Save creates the ContactProfile entities in the database.
func (cpcb *ContactProfileCreateBulk) Save(ctx context.Context) ([]*ContactProfile, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ContactProfile, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ContactProfileCreateBulk) SaveX(ctx context.Context) []*ContactProfile {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ContactProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ContactProfileCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
