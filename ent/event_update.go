// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/event"
	"github.com/ogidi/church-media/ent/predicate"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *EventUpdate) SetTitle(s string) *EventUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTitle(s *string) *EventUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *EventUpdate) SetStartTime(t time.Time) *EventUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// SetEndTime sets the "end_time" field.
func (eu *EventUpdate) SetEndTime(t time.Time) *EventUpdate {
	eu.mutation.SetEndTime(t)
	return eu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndTime(*t)
	}
	return eu
}

// SetLocation sets the "location" field.
func (eu *EventUpdate) SetLocation(s string) *EventUpdate {
	eu.mutation.SetLocation(s)
	return eu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocation(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocation(*s)
	}
	return eu
}

// SetImageURL sets the "image_url" field.
func (eu *EventUpdate) SetImageURL(s string) *EventUpdate {
	eu.mutation.SetImageURL(s)
	return eu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableImageURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetImageURL(*s)
	}
	return eu
}

// ClearImageURL clears the value of the "image_url" field.
func (eu *EventUpdate) ClearImageURL() *EventUpdate {
	eu.mutation.ClearImageURL()
	return eu
}

// SetFeatured sets the "featured" field.
func (eu *EventUpdate) SetFeatured(b bool) *EventUpdate {
	eu.mutation.SetFeatured(b)
	return eu
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFeatured(b *bool) *EventUpdate {
	if b != nil {
		eu.SetFeatured(*b)
	}
	return eu
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := event.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Event.title": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if value, ok := eu.mutation.ImageURL(); ok {
		_spec.SetField(event.FieldImageURL, field.TypeString, value)
	}
	if eu.mutation.ImageURLCleared() {
		_spec.ClearField(event.FieldImageURL, field.TypeString)
	}
	if value, ok := eu.mutation.Featured(); ok {
		_spec.SetField(event.FieldFeatured, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetTitle sets the "title" field.
func (euo *EventUpdateOne) SetTitle(s string) *EventUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitle(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *EventUpdateOne) SetStartTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// SetEndTime sets the "end_time" field.
func (euo *EventUpdateOne) SetEndTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndTime(t)
	return euo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndTime(*t)
	}
	return euo
}

// SetLocation sets the "location" field.
func (euo *EventUpdateOne) SetLocation(s string) *EventUpdateOne {
	euo.mutation.SetLocation(s)
	return euo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocation(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocation(*s)
	}
	return euo
}

// SetImageURL sets the "image_url" field.
func (euo *EventUpdateOne) SetImageURL(s string) *EventUpdateOne {
	euo.mutation.SetImageURL(s)
	return euo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableImageURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetImageURL(*s)
	}
	return euo
}

// ClearImageURL clears the value of the "image_url" field.
func (euo *EventUpdateOne) ClearImageURL() *EventUpdateOne {
	euo.mutation.ClearImageURL()
	return euo
}

// SetFeatured sets the "featured" field.
func (euo *EventUpdateOne) SetFeatured(b bool) *EventUpdateOne {
	euo.mutation.SetFeatured(b)
	return euo
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFeatured(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetFeatured(*b)
	}
	return euo
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := event.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Event.title": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if value, ok := euo.mutation.ImageURL(); ok {
		_spec.SetField(event.FieldImageURL, field.TypeString, value)
	}
	if euo.mutation.ImageURLCleared() {
		_spec.ClearField(event.FieldImageURL, field.TypeString)
	}
	if value, ok := euo.mutation.Featured(); ok {
		_spec.SetField(event.FieldFeatured, field.TypeBool, value)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
