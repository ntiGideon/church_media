// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogidi/church-media/ent/logaudit"
)

// LogAudit is the model entity for the LogAudit schema.
type LogAudit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID int `json:"entity_id,omitempty"`
	// EntityData holds the value of the "entity_data" field.
	EntityData map[string]interface{} `json:"entity_data,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogAudit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logaudit.FieldEntityData, logaudit.FieldMetadata:
			values[i] = new([]byte)
		case logaudit.FieldID, logaudit.FieldEntityID, logaudit.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case logaudit.FieldAction, logaudit.FieldEntityType, logaudit.FieldIPAddress, logaudit.FieldUserAgent, logaudit.FieldRequestID:
			values[i] = new(sql.NullString)
		case logaudit.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogAudit fields.
func (la *LogAudit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logaudit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			la.ID = int(value.Int64)
		case logaudit.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				la.Action = value.String
			}
		case logaudit.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				la.EntityType = value.String
			}
		case logaudit.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				la.EntityID = int(value.Int64)
			}
		case logaudit.FieldEntityData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field entity_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &la.EntityData); err != nil {
					return fmt.Errorf("unmarshal field entity_data: %w", err)
				}
			}
		case logaudit.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				la.CreatedBy = int(value.Int64)
			}
		case logaudit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case logaudit.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				la.IPAddress = value.String
			}
		case logaudit.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				la.UserAgent = value.String
			}
		case logaudit.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				la.RequestID = value.String
			}
		case logaudit.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &la.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogAudit.
// This includes values selected through modifiers, order, etc.
func (la *LogAudit) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// Update returns a builder for updating this LogAudit.
// Note that you need to call LogAudit.Unwrap() before calling this method if this LogAudit
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LogAudit) Update() *LogAuditUpdateOne {
	return NewLogAuditClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LogAudit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LogAudit) Unwrap() *LogAudit {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogAudit is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LogAudit) String() string {
	var builder strings.Builder
	builder.WriteString("LogAudit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	builder.WriteString("action=")
	builder.WriteString(la.Action)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(la.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", la.EntityID))
	builder.WriteString(", ")
	builder.WriteString("entity_data=")
	builder.WriteString(fmt.Sprintf("%v", la.EntityData))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", la.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(la.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(la.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(la.RequestID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", la.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// LogAudits is a parsable slice of LogAudit.
type LogAudits []*LogAudit
