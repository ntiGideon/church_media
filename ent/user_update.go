// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/contactprofile"
	"github.com/ogidi/church-media/ent/predicate"
	"github.com/ogidi/church-media/ent/response"
	"github.com/ogidi/church-media/ent/story"
	"github.com/ogidi/church-media/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetVerifyToken sets the "verify_token" field.
func (uu *UserUpdate) SetVerifyToken(s string) *UserUpdate {
	uu.mutation.SetVerifyToken(s)
	return uu
}

// SetNillableVerifyToken sets the "verify_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerifyToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetVerifyToken(*s)
	}
	return uu
}

// ClearVerifyToken clears the value of the "verify_token" field.
func (uu *UserUpdate) ClearVerifyToken() *UserUpdate {
	uu.mutation.ClearVerifyToken()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetRegistrationToken sets the "registration_token" field.
func (uu *UserUpdate) SetRegistrationToken(s string) *UserUpdate {
	uu.mutation.SetRegistrationToken(s)
	return uu
}

// SetNillableRegistrationToken sets the "registration_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegistrationToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetRegistrationToken(*s)
	}
	return uu
}

// ClearRegistrationToken clears the value of the "registration_token" field.
func (uu *UserUpdate) ClearRegistrationToken() *UserUpdate {
	uu.mutation.ClearRegistrationToken()
	return uu
}

// SetResetToken sets the "resetToken" field.
func (uu *UserUpdate) SetResetToken(s string) *UserUpdate {
	uu.mutation.SetResetToken(s)
	return uu
}

// SetNillableResetToken sets the "resetToken" field if the given value is not nil.
func (uu *UserUpdate) SetNillableResetToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetResetToken(*s)
	}
	return uu
}

// ClearResetToken clears the value of the "resetToken" field.
func (uu *UserUpdate) ClearResetToken() *UserUpdate {
	uu.mutation.ClearResetToken()
	return uu
}

// SetDepartment sets the "department" field.
func (uu *UserUpdate) SetDepartment(s string) *UserUpdate {
	uu.mutation.SetDepartment(s)
	return uu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartment(s *string) *UserUpdate {
	if s != nil {
		uu.SetDepartment(*s)
	}
	return uu
}

// ClearDepartment clears the value of the "department" field.
func (uu *UserUpdate) ClearDepartment() *UserUpdate {
	uu.mutation.ClearDepartment()
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (uu *UserUpdate) SetTokenExpiresAt(t time.Time) *UserUpdate {
	uu.mutation.SetTokenExpiresAt(t)
	return uu
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTokenExpiresAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetTokenExpiresAt(*t)
	}
	return uu
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (uu *UserUpdate) ClearTokenExpiresAt() *UserUpdate {
	uu.mutation.ClearTokenExpiresAt()
	return uu
}

// SetState sets the "state" field.
func (uu *UserUpdate) SetState(u user.State) *UserUpdate {
	uu.mutation.SetState(u)
	return uu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (uu *UserUpdate) SetNillableState(u *user.State) *UserUpdate {
	if u != nil {
		uu.SetState(*u)
	}
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetJoinDate sets the "join_date" field.
func (uu *UserUpdate) SetJoinDate(t time.Time) *UserUpdate {
	uu.mutation.SetJoinDate(t)
	return uu
}

// SetNillableJoinDate sets the "join_date" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJoinDate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetJoinDate(*t)
	}
	return uu
}

// ClearJoinDate clears the value of the "join_date" field.
func (uu *UserUpdate) ClearJoinDate() *UserUpdate {
	uu.mutation.ClearJoinDate()
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "last_login" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (uu *UserUpdate) AddResponseIDs(ids ...int) *UserUpdate {
	uu.mutation.AddResponseIDs(ids...)
	return uu
}

// AddResponses adds the "responses" edges to the Response entity.
func (uu *UserUpdate) AddResponses(r ...*Response) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddResponseIDs(ids...)
}

// AddStoryIDs adds the "stories" edge to the Story entity by IDs.
func (uu *UserUpdate) AddStoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddStoryIDs(ids...)
	return uu
}

// AddStories adds the "stories" edges to the Story entity.
func (uu *UserUpdate) AddStories(s ...*Story) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStoryIDs(ids...)
}

// SetContactProfileID sets the "contact_profile" edge to the ContactProfile entity by ID.
func (uu *UserUpdate) SetContactProfileID(id int) *UserUpdate {
	uu.mutation.SetContactProfileID(id)
	return uu
}

// SetNillableContactProfileID sets the "contact_profile" edge to the ContactProfile entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableContactProfileID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetContactProfileID(*id)
	}
	return uu
}

// SetContactProfile sets the "contact_profile" edge to the ContactProfile entity.
func (uu *UserUpdate) SetContactProfile(c *ContactProfile) *UserUpdate {
	return uu.SetContactProfileID(c.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (uu *UserUpdate) ClearResponses() *UserUpdate {
	uu.mutation.ClearResponses()
	return uu
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (uu *UserUpdate) RemoveResponseIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveResponseIDs(ids...)
	return uu
}

// RemoveResponses removes "responses" edges to Response entities.
func (uu *UserUpdate) RemoveResponses(r ...*Response) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveResponseIDs(ids...)
}

// ClearStories clears all "stories" edges to the Story entity.
func (uu *UserUpdate) ClearStories() *UserUpdate {
	uu.mutation.ClearStories()
	return uu
}

// RemoveStoryIDs removes the "stories" edge to Story entities by IDs.
func (uu *UserUpdate) RemoveStoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveStoryIDs(ids...)
	return uu
}

// RemoveStories removes "stories" edges to Story entities.
func (uu *UserUpdate) RemoveStories(s ...*Story) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStoryIDs(ids...)
}

// ClearContactProfile clears the "contact_profile" edge to the ContactProfile entity.
func (uu *UserUpdate) ClearContactProfile() *UserUpdate {
	uu.mutation.ClearContactProfile()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uu.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "User.state": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.VerifyToken(); ok {
		_spec.SetField(user.FieldVerifyToken, field.TypeString, value)
	}
	if uu.mutation.VerifyTokenCleared() {
		_spec.ClearField(user.FieldVerifyToken, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.RegistrationToken(); ok {
		_spec.SetField(user.FieldRegistrationToken, field.TypeString, value)
	}
	if uu.mutation.RegistrationTokenCleared() {
		_spec.ClearField(user.FieldRegistrationToken, field.TypeString)
	}
	if value, ok := uu.mutation.ResetToken(); ok {
		_spec.SetField(user.FieldResetToken, field.TypeString, value)
	}
	if uu.mutation.ResetTokenCleared() {
		_spec.ClearField(user.FieldResetToken, field.TypeString)
	}
	if value, ok := uu.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uu.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.TokenExpiresAt(); ok {
		_spec.SetField(user.FieldTokenExpiresAt, field.TypeTime, value)
	}
	if uu.mutation.TokenExpiresAtCleared() {
		_spec.ClearField(user.FieldTokenExpiresAt, field.TypeTime)
	}
	if value, ok := uu.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.JoinDate(); ok {
		_spec.SetField(user.FieldJoinDate, field.TypeTime, value)
	}
	if uu.mutation.JoinDateCleared() {
		_spec.ClearField(user.FieldJoinDate, field.TypeTime)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uu.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !uu.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StoriesTable,
			Columns: []string{user.StoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStoriesIDs(); len(nodes) > 0 && !uu.mutation.StoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StoriesTable,
			Columns: []string{user.StoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StoriesTable,
			Columns: []string{user.StoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ContactProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ContactProfileTable,
			Columns: []string{user.ContactProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContactProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ContactProfileTable,
			Columns: []string{user.ContactProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetVerifyToken sets the "verify_token" field.
func (uuo *UserUpdateOne) SetVerifyToken(s string) *UserUpdateOne {
	uuo.mutation.SetVerifyToken(s)
	return uuo
}

// SetNillableVerifyToken sets the "verify_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerifyToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetVerifyToken(*s)
	}
	return uuo
}

// ClearVerifyToken clears the value of the "verify_token" field.
func (uuo *UserUpdateOne) ClearVerifyToken() *UserUpdateOne {
	uuo.mutation.ClearVerifyToken()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetRegistrationToken sets the "registration_token" field.
func (uuo *UserUpdateOne) SetRegistrationToken(s string) *UserUpdateOne {
	uuo.mutation.SetRegistrationToken(s)
	return uuo
}

// SetNillableRegistrationToken sets the "registration_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegistrationToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRegistrationToken(*s)
	}
	return uuo
}

// ClearRegistrationToken clears the value of the "registration_token" field.
func (uuo *UserUpdateOne) ClearRegistrationToken() *UserUpdateOne {
	uuo.mutation.ClearRegistrationToken()
	return uuo
}

// SetResetToken sets the "resetToken" field.
func (uuo *UserUpdateOne) SetResetToken(s string) *UserUpdateOne {
	uuo.mutation.SetResetToken(s)
	return uuo
}

// SetNillableResetToken sets the "resetToken" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableResetToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetResetToken(*s)
	}
	return uuo
}

// ClearResetToken clears the value of the "resetToken" field.
func (uuo *UserUpdateOne) ClearResetToken() *UserUpdateOne {
	uuo.mutation.ClearResetToken()
	return uuo
}

// SetDepartment sets the "department" field.
func (uuo *UserUpdateOne) SetDepartment(s string) *UserUpdateOne {
	uuo.mutation.SetDepartment(s)
	return uuo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartment(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDepartment(*s)
	}
	return uuo
}

// ClearDepartment clears the value of the "department" field.
func (uuo *UserUpdateOne) ClearDepartment() *UserUpdateOne {
	uuo.mutation.ClearDepartment()
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (uuo *UserUpdateOne) SetTokenExpiresAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetTokenExpiresAt(t)
	return uuo
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTokenExpiresAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetTokenExpiresAt(*t)
	}
	return uuo
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (uuo *UserUpdateOne) ClearTokenExpiresAt() *UserUpdateOne {
	uuo.mutation.ClearTokenExpiresAt()
	return uuo
}

// SetState sets the "state" field.
func (uuo *UserUpdateOne) SetState(u user.State) *UserUpdateOne {
	uuo.mutation.SetState(u)
	return uuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableState(u *user.State) *UserUpdateOne {
	if u != nil {
		uuo.SetState(*u)
	}
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetJoinDate sets the "join_date" field.
func (uuo *UserUpdateOne) SetJoinDate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetJoinDate(t)
	return uuo
}

// SetNillableJoinDate sets the "join_date" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJoinDate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetJoinDate(*t)
	}
	return uuo
}

// ClearJoinDate clears the value of the "join_date" field.
func (uuo *UserUpdateOne) ClearJoinDate() *UserUpdateOne {
	uuo.mutation.ClearJoinDate()
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (uuo *UserUpdateOne) AddResponseIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddResponseIDs(ids...)
	return uuo
}

// AddResponses adds the "responses" edges to the Response entity.
func (uuo *UserUpdateOne) AddResponses(r ...*Response) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddResponseIDs(ids...)
}

// AddStoryIDs adds the "stories" edge to the Story entity by IDs.
func (uuo *UserUpdateOne) AddStoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddStoryIDs(ids...)
	return uuo
}

// AddStories adds the "stories" edges to the Story entity.
func (uuo *UserUpdateOne) AddStories(s ...*Story) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStoryIDs(ids...)
}

// SetContactProfileID sets the "contact_profile" edge to the ContactProfile entity by ID.
func (uuo *UserUpdateOne) SetContactProfileID(id int) *UserUpdateOne {
	uuo.mutation.SetContactProfileID(id)
	return uuo
}

// SetNillableContactProfileID sets the "contact_profile" edge to the ContactProfile entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableContactProfileID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetContactProfileID(*id)
	}
	return uuo
}

// SetContactProfile sets the "contact_profile" edge to the ContactProfile entity.
func (uuo *UserUpdateOne) SetContactProfile(c *ContactProfile) *UserUpdateOne {
	return uuo.SetContactProfileID(c.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (uuo *UserUpdateOne) ClearResponses() *UserUpdateOne {
	uuo.mutation.ClearResponses()
	return uuo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (uuo *UserUpdateOne) RemoveResponseIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveResponseIDs(ids...)
	return uuo
}

// RemoveResponses removes "responses" edges to Response entities.
func (uuo *UserUpdateOne) RemoveResponses(r ...*Response) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveResponseIDs(ids...)
}

// ClearStories clears all "stories" edges to the Story entity.
func (uuo *UserUpdateOne) ClearStories() *UserUpdateOne {
	uuo.mutation.ClearStories()
	return uuo
}

// RemoveStoryIDs removes the "stories" edge to Story entities by IDs.
func (uuo *UserUpdateOne) RemoveStoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveStoryIDs(ids...)
	return uuo
}

// RemoveStories removes "stories" edges to Story entities.
func (uuo *UserUpdateOne) RemoveStories(s ...*Story) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStoryIDs(ids...)
}

// ClearContactProfile clears the "contact_profile" edge to the ContactProfile entity.
func (uuo *UserUpdateOne) ClearContactProfile() *UserUpdateOne {
	uuo.mutation.ClearContactProfile()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "User.state": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.VerifyToken(); ok {
		_spec.SetField(user.FieldVerifyToken, field.TypeString, value)
	}
	if uuo.mutation.VerifyTokenCleared() {
		_spec.ClearField(user.FieldVerifyToken, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.RegistrationToken(); ok {
		_spec.SetField(user.FieldRegistrationToken, field.TypeString, value)
	}
	if uuo.mutation.RegistrationTokenCleared() {
		_spec.ClearField(user.FieldRegistrationToken, field.TypeString)
	}
	if value, ok := uuo.mutation.ResetToken(); ok {
		_spec.SetField(user.FieldResetToken, field.TypeString, value)
	}
	if uuo.mutation.ResetTokenCleared() {
		_spec.ClearField(user.FieldResetToken, field.TypeString)
	}
	if value, ok := uuo.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uuo.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.TokenExpiresAt(); ok {
		_spec.SetField(user.FieldTokenExpiresAt, field.TypeTime, value)
	}
	if uuo.mutation.TokenExpiresAtCleared() {
		_spec.ClearField(user.FieldTokenExpiresAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.JoinDate(); ok {
		_spec.SetField(user.FieldJoinDate, field.TypeTime, value)
	}
	if uuo.mutation.JoinDateCleared() {
		_spec.ClearField(user.FieldJoinDate, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !uuo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ResponsesTable,
			Columns: []string{user.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StoriesTable,
			Columns: []string{user.StoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStoriesIDs(); len(nodes) > 0 && !uuo.mutation.StoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StoriesTable,
			Columns: []string{user.StoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StoriesTable,
			Columns: []string{user.StoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ContactProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ContactProfileTable,
			Columns: []string{user.ContactProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContactProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ContactProfileTable,
			Columns: []string{user.ContactProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
