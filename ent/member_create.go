// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/member"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
}

// SetFormNumber sets the "form_number" field.
func (mc *MemberCreate) SetFormNumber(s string) *MemberCreate {
	mc.mutation.SetFormNumber(s)
	return mc
}

// SetNillableFormNumber sets the "form_number" field if the given value is not nil.
func (mc *MemberCreate) SetNillableFormNumber(s *string) *MemberCreate {
	if s != nil {
		mc.SetFormNumber(*s)
	}
	return mc
}

// SetIDNumber sets the "id_number" field.
func (mc *MemberCreate) SetIDNumber(s string) *MemberCreate {
	mc.mutation.SetIDNumber(s)
	return mc
}

// SetSurname sets the "surname" field.
func (mc *MemberCreate) SetSurname(s string) *MemberCreate {
	mc.mutation.SetSurname(s)
	return mc
}

// SetOtherNames sets the "other_names" field.
func (mc *MemberCreate) SetOtherNames(s string) *MemberCreate {
	mc.mutation.SetOtherNames(s)
	return mc
}

// SetDob sets the "dob" field.
func (mc *MemberCreate) SetDob(t time.Time) *MemberCreate {
	mc.mutation.SetDob(t)
	return mc
}

// SetGender sets the "gender" field.
func (mc *MemberCreate) SetGender(m member.Gender) *MemberCreate {
	mc.mutation.SetGender(m)
	return mc
}

// SetHometown sets the "hometown" field.
func (mc *MemberCreate) SetHometown(s string) *MemberCreate {
	mc.mutation.SetHometown(s)
	return mc
}

// SetRegion sets the "region" field.
func (mc *MemberCreate) SetRegion(s string) *MemberCreate {
	mc.mutation.SetRegion(s)
	return mc
}

// SetResidence sets the "residence" field.
func (mc *MemberCreate) SetResidence(s string) *MemberCreate {
	mc.mutation.SetResidence(s)
	return mc
}

// SetNillableResidence sets the "residence" field if the given value is not nil.
func (mc *MemberCreate) SetNillableResidence(s *string) *MemberCreate {
	if s != nil {
		mc.SetResidence(*s)
	}
	return mc
}

// SetAddress sets the "address" field.
func (mc *MemberCreate) SetAddress(s string) *MemberCreate {
	mc.mutation.SetAddress(s)
	return mc
}

// SetMobile sets the "mobile" field.
func (mc *MemberCreate) SetMobile(s string) *MemberCreate {
	mc.mutation.SetMobile(s)
	return mc
}

// SetEmail sets the "email" field.
func (mc *MemberCreate) SetEmail(s string) *MemberCreate {
	mc.mutation.SetEmail(s)
	return mc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mc *MemberCreate) SetNillableEmail(s *string) *MemberCreate {
	if s != nil {
		mc.SetEmail(*s)
	}
	return mc
}

// SetSundaySchoolClass sets the "sunday_school_class" field.
func (mc *MemberCreate) SetSundaySchoolClass(s string) *MemberCreate {
	mc.mutation.SetSundaySchoolClass(s)
	return mc
}

// SetNillableSundaySchoolClass sets the "sunday_school_class" field if the given value is not nil.
func (mc *MemberCreate) SetNillableSundaySchoolClass(s *string) *MemberCreate {
	if s != nil {
		mc.SetSundaySchoolClass(*s)
	}
	return mc
}

// SetOccupation sets the "occupation" field.
func (mc *MemberCreate) SetOccupation(s string) *MemberCreate {
	mc.mutation.SetOccupation(s)
	return mc
}

// SetHasTitleCard sets the "has_title_card" field.
func (mc *MemberCreate) SetHasTitleCard(b bool) *MemberCreate {
	mc.mutation.SetHasTitleCard(b)
	return mc
}

// SetNillableHasTitleCard sets the "has_title_card" field if the given value is not nil.
func (mc *MemberCreate) SetNillableHasTitleCard(b *bool) *MemberCreate {
	if b != nil {
		mc.SetHasTitleCard(*b)
	}
	return mc
}

// SetTitleCardNumber sets the "title_card_number" field.
func (mc *MemberCreate) SetTitleCardNumber(s string) *MemberCreate {
	mc.mutation.SetTitleCardNumber(s)
	return mc
}

// SetNillableTitleCardNumber sets the "title_card_number" field if the given value is not nil.
func (mc *MemberCreate) SetNillableTitleCardNumber(s *string) *MemberCreate {
	if s != nil {
		mc.SetTitleCardNumber(*s)
	}
	return mc
}

// SetDayBorn sets the "day_born" field.
func (mc *MemberCreate) SetDayBorn(s string) *MemberCreate {
	mc.mutation.SetDayBorn(s)
	return mc
}

// SetNillableDayBorn sets the "day_born" field if the given value is not nil.
func (mc *MemberCreate) SetNillableDayBorn(s *string) *MemberCreate {
	if s != nil {
		mc.SetDayBorn(*s)
	}
	return mc
}

// SetHasSpouse sets the "has_spouse" field.
func (mc *MemberCreate) SetHasSpouse(b bool) *MemberCreate {
	mc.mutation.SetHasSpouse(b)
	return mc
}

// SetNillableHasSpouse sets the "has_spouse" field if the given value is not nil.
func (mc *MemberCreate) SetNillableHasSpouse(b *bool) *MemberCreate {
	if b != nil {
		mc.SetHasSpouse(*b)
	}
	return mc
}

// SetSpouseIDNumber sets the "spouse_id_number" field.
func (mc *MemberCreate) SetSpouseIDNumber(s string) *MemberCreate {
	mc.mutation.SetSpouseIDNumber(s)
	return mc
}

// SetNillableSpouseIDNumber sets the "spouse_id_number" field if the given value is not nil.
func (mc *MemberCreate) SetNillableSpouseIDNumber(s *string) *MemberCreate {
	if s != nil {
		mc.SetSpouseIDNumber(*s)
	}
	return mc
}

// SetSpouseName sets the "spouse_name" field.
func (mc *MemberCreate) SetSpouseName(s string) *MemberCreate {
	mc.mutation.SetSpouseName(s)
	return mc
}

// SetNillableSpouseName sets the "spouse_name" field if the given value is not nil.
func (mc *MemberCreate) SetNillableSpouseName(s *string) *MemberCreate {
	if s != nil {
		mc.SetSpouseName(*s)
	}
	return mc
}

// SetSpouseOccupation sets the "spouse_occupation" field.
func (mc *MemberCreate) SetSpouseOccupation(s string) *MemberCreate {
	mc.mutation.SetSpouseOccupation(s)
	return mc
}

// SetNillableSpouseOccupation sets the "spouse_occupation" field if the given value is not nil.
func (mc *MemberCreate) SetNillableSpouseOccupation(s *string) *MemberCreate {
	if s != nil {
		mc.SetSpouseOccupation(*s)
	}
	return mc
}

// SetSpouseContact sets the "spouse_contact" field.
func (mc *MemberCreate) SetSpouseContact(s string) *MemberCreate {
	mc.mutation.SetSpouseContact(s)
	return mc
}

// SetNillableSpouseContact sets the "spouse_contact" field if the given value is not nil.
func (mc *MemberCreate) SetNillableSpouseContact(s *string) *MemberCreate {
	if s != nil {
		mc.SetSpouseContact(*s)
	}
	return mc
}

// SetIsBaptized sets the "is_baptized" field.
func (mc *MemberCreate) SetIsBaptized(b bool) *MemberCreate {
	mc.mutation.SetIsBaptized(b)
	return mc
}

// SetNillableIsBaptized sets the "is_baptized" field if the given value is not nil.
func (mc *MemberCreate) SetNillableIsBaptized(b *bool) *MemberCreate {
	if b != nil {
		mc.SetIsBaptized(*b)
	}
	return mc
}

// SetBaptizedBy sets the "baptized_by" field.
func (mc *MemberCreate) SetBaptizedBy(s string) *MemberCreate {
	mc.mutation.SetBaptizedBy(s)
	return mc
}

// SetNillableBaptizedBy sets the "baptized_by" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBaptizedBy(s *string) *MemberCreate {
	if s != nil {
		mc.SetBaptizedBy(*s)
	}
	return mc
}

// SetBaptismChurch sets the "baptism_church" field.
func (mc *MemberCreate) SetBaptismChurch(s string) *MemberCreate {
	mc.mutation.SetBaptismChurch(s)
	return mc
}

// SetNillableBaptismChurch sets the "baptism_church" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBaptismChurch(s *string) *MemberCreate {
	if s != nil {
		mc.SetBaptismChurch(*s)
	}
	return mc
}

// SetBaptismCertNumber sets the "baptism_cert_number" field.
func (mc *MemberCreate) SetBaptismCertNumber(s string) *MemberCreate {
	mc.mutation.SetBaptismCertNumber(s)
	return mc
}

// SetNillableBaptismCertNumber sets the "baptism_cert_number" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBaptismCertNumber(s *string) *MemberCreate {
	if s != nil {
		mc.SetBaptismCertNumber(*s)
	}
	return mc
}

// SetBaptismDate sets the "baptism_date" field.
func (mc *MemberCreate) SetBaptismDate(t time.Time) *MemberCreate {
	mc.mutation.SetBaptismDate(t)
	return mc
}

// SetNillableBaptismDate sets the "baptism_date" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBaptismDate(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetBaptismDate(*t)
	}
	return mc
}

// SetMembershipYear sets the "membership_year" field.
func (mc *MemberCreate) SetMembershipYear(i int) *MemberCreate {
	mc.mutation.SetMembershipYear(i)
	return mc
}

// SetPhotoURL sets the "photo_url" field.
func (mc *MemberCreate) SetPhotoURL(s string) *MemberCreate {
	mc.mutation.SetPhotoURL(s)
	return mc
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (mc *MemberCreate) SetNillablePhotoURL(s *string) *MemberCreate {
	if s != nil {
		mc.SetPhotoURL(*s)
	}
	return mc
}

// SetPhotoData sets the "photo_data" field.
func (mc *MemberCreate) SetPhotoData(b []byte) *MemberCreate {
	mc.mutation.SetPhotoData(b)
	return mc
}

// SetPhotoHash sets the "photo_hash" field.
func (mc *MemberCreate) SetPhotoHash(s string) *MemberCreate {
	mc.mutation.SetPhotoHash(s)
	return mc
}

// SetNillablePhotoHash sets the "photo_hash" field if the given value is not nil.
func (mc *MemberCreate) SetNillablePhotoHash(s *string) *MemberCreate {
	if s != nil {
		mc.SetPhotoHash(*s)
	}
	return mc
}

// SetIsActive sets the "is_active" field.
func (mc *MemberCreate) SetIsActive(b bool) *MemberCreate {
	mc.mutation.SetIsActive(b)
	return mc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (mc *MemberCreate) SetNillableIsActive(b *bool) *MemberCreate {
	if b != nil {
		mc.SetIsActive(*b)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MemberCreate) SetCreatedAt(t time.Time) *MemberCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MemberCreate) SetNillableCreatedAt(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MemberCreate) SetUpdatedAt(t time.Time) *MemberCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MemberCreate) SetNillableUpdatedAt(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MemberCreate) SetID(i int) *MemberCreate {
	mc.mutation.SetID(i)
	return mc
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MemberCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MemberCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MemberCreate) defaults() {
	if _, ok := mc.mutation.HasTitleCard(); !ok {
		v := member.DefaultHasTitleCard
		mc.mutation.SetHasTitleCard(v)
	}
	if _, ok := mc.mutation.HasSpouse(); !ok {
		v := member.DefaultHasSpouse
		mc.mutation.SetHasSpouse(v)
	}
	if _, ok := mc.mutation.IsBaptized(); !ok {
		v := member.DefaultIsBaptized
		mc.mutation.SetIsBaptized(v)
	}
	if _, ok := mc.mutation.IsActive(); !ok {
		v := member.DefaultIsActive
		mc.mutation.SetIsActive(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := member.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := member.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MemberCreate) check() error {
	if _, ok := mc.mutation.IDNumber(); !ok {
		return &ValidationError{Name: "id_number", err: errors.New(`ent: missing required field "Member.id_number"`)}
	}
	if _, ok := mc.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "Member.surname"`)}
	}
	if v, ok := mc.mutation.Surname(); ok {
		if err := member.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Member.surname": %w`, err)}
		}
	}
	if _, ok := mc.mutation.OtherNames(); !ok {
		return &ValidationError{Name: "other_names", err: errors.New(`ent: missing required field "Member.other_names"`)}
	}
	if v, ok := mc.mutation.OtherNames(); ok {
		if err := member.OtherNamesValidator(v); err != nil {
			return &ValidationError{Name: "other_names", err: fmt.Errorf(`ent: validator failed for field "Member.other_names": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Dob(); !ok {
		return &ValidationError{Name: "dob", err: errors.New(`ent: missing required field "Member.dob"`)}
	}
	if _, ok := mc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Member.gender"`)}
	}
	if v, ok := mc.mutation.Gender(); ok {
		if err := member.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Member.gender": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Hometown(); !ok {
		return &ValidationError{Name: "hometown", err: errors.New(`ent: missing required field "Member.hometown"`)}
	}
	if _, ok := mc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "Member.region"`)}
	}
	if _, ok := mc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Member.address"`)}
	}
	if _, ok := mc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "Member.mobile"`)}
	}
	if _, ok := mc.mutation.Occupation(); !ok {
		return &ValidationError{Name: "occupation", err: errors.New(`ent: missing required field "Member.occupation"`)}
	}
	if v, ok := mc.mutation.Occupation(); ok {
		if err := member.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "Member.occupation": %w`, err)}
		}
	}
	if _, ok := mc.mutation.HasTitleCard(); !ok {
		return &ValidationError{Name: "has_title_card", err: errors.New(`ent: missing required field "Member.has_title_card"`)}
	}
	if _, ok := mc.mutation.HasSpouse(); !ok {
		return &ValidationError{Name: "has_spouse", err: errors.New(`ent: missing required field "Member.has_spouse"`)}
	}
	if _, ok := mc.mutation.IsBaptized(); !ok {
		return &ValidationError{Name: "is_baptized", err: errors.New(`ent: missing required field "Member.is_baptized"`)}
	}
	if _, ok := mc.mutation.MembershipYear(); !ok {
		return &ValidationError{Name: "membership_year", err: errors.New(`ent: missing required field "Member.membership_year"`)}
	}
	if v, ok := mc.mutation.MembershipYear(); ok {
		if err := member.MembershipYearValidator(v); err != nil {
			return &ValidationError{Name: "membership_year", err: fmt.Errorf(`ent: validator failed for field "Member.membership_year": %w`, err)}
		}
	}
	if _, ok := mc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Member.is_active"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Member.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Member.updated_at"`)}
	}
	return nil
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		_node = &Member{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(member.Table, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.FormNumber(); ok {
		_spec.SetField(member.FieldFormNumber, field.TypeString, value)
		_node.FormNumber = value
	}
	if value, ok := mc.mutation.IDNumber(); ok {
		_spec.SetField(member.FieldIDNumber, field.TypeString, value)
		_node.IDNumber = value
	}
	if value, ok := mc.mutation.Surname(); ok {
		_spec.SetField(member.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := mc.mutation.OtherNames(); ok {
		_spec.SetField(member.FieldOtherNames, field.TypeString, value)
		_node.OtherNames = value
	}
	if value, ok := mc.mutation.Dob(); ok {
		_spec.SetField(member.FieldDob, field.TypeTime, value)
		_node.Dob = value
	}
	if value, ok := mc.mutation.Gender(); ok {
		_spec.SetField(member.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := mc.mutation.Hometown(); ok {
		_spec.SetField(member.FieldHometown, field.TypeString, value)
		_node.Hometown = value
	}
	if value, ok := mc.mutation.Region(); ok {
		_spec.SetField(member.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := mc.mutation.Residence(); ok {
		_spec.SetField(member.FieldResidence, field.TypeString, value)
		_node.Residence = value
	}
	if value, ok := mc.mutation.Address(); ok {
		_spec.SetField(member.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := mc.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := mc.mutation.Email(); ok {
		_spec.SetField(member.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := mc.mutation.SundaySchoolClass(); ok {
		_spec.SetField(member.FieldSundaySchoolClass, field.TypeString, value)
		_node.SundaySchoolClass = value
	}
	if value, ok := mc.mutation.Occupation(); ok {
		_spec.SetField(member.FieldOccupation, field.TypeString, value)
		_node.Occupation = value
	}
	if value, ok := mc.mutation.HasTitleCard(); ok {
		_spec.SetField(member.FieldHasTitleCard, field.TypeBool, value)
		_node.HasTitleCard = value
	}
	if value, ok := mc.mutation.TitleCardNumber(); ok {
		_spec.SetField(member.FieldTitleCardNumber, field.TypeString, value)
		_node.TitleCardNumber = value
	}
	if value, ok := mc.mutation.DayBorn(); ok {
		_spec.SetField(member.FieldDayBorn, field.TypeString, value)
		_node.DayBorn = value
	}
	if value, ok := mc.mutation.HasSpouse(); ok {
		_spec.SetField(member.FieldHasSpouse, field.TypeBool, value)
		_node.HasSpouse = value
	}
	if value, ok := mc.mutation.SpouseIDNumber(); ok {
		_spec.SetField(member.FieldSpouseIDNumber, field.TypeString, value)
		_node.SpouseIDNumber = value
	}
	if value, ok := mc.mutation.SpouseName(); ok {
		_spec.SetField(member.FieldSpouseName, field.TypeString, value)
		_node.SpouseName = value
	}
	if value, ok := mc.mutation.SpouseOccupation(); ok {
		_spec.SetField(member.FieldSpouseOccupation, field.TypeString, value)
		_node.SpouseOccupation = value
	}
	if value, ok := mc.mutation.SpouseContact(); ok {
		_spec.SetField(member.FieldSpouseContact, field.TypeString, value)
		_node.SpouseContact = value
	}
	if value, ok := mc.mutation.IsBaptized(); ok {
		_spec.SetField(member.FieldIsBaptized, field.TypeBool, value)
		_node.IsBaptized = value
	}
	if value, ok := mc.mutation.BaptizedBy(); ok {
		_spec.SetField(member.FieldBaptizedBy, field.TypeString, value)
		_node.BaptizedBy = value
	}
	if value, ok := mc.mutation.BaptismChurch(); ok {
		_spec.SetField(member.FieldBaptismChurch, field.TypeString, value)
		_node.BaptismChurch = value
	}
	if value, ok := mc.mutation.BaptismCertNumber(); ok {
		_spec.SetField(member.FieldBaptismCertNumber, field.TypeString, value)
		_node.BaptismCertNumber = value
	}
	if value, ok := mc.mutation.BaptismDate(); ok {
		_spec.SetField(member.FieldBaptismDate, field.TypeTime, value)
		_node.BaptismDate = value
	}
	if value, ok := mc.mutation.MembershipYear(); ok {
		_spec.SetField(member.FieldMembershipYear, field.TypeInt, value)
		_node.MembershipYear = value
	}
	if value, ok := mc.mutation.PhotoURL(); ok {
		_spec.SetField(member.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := mc.mutation.PhotoData(); ok {
		_spec.SetField(member.FieldPhotoData, field.TypeBytes, value)
		_node.PhotoData = value
	}
	if value, ok := mc.mutation.PhotoHash(); ok {
		_spec.SetField(member.FieldPhotoHash, field.TypeString, value)
		_node.PhotoHash = value
	}
	if value, ok := mc.mutation.IsActive(); ok {
		_spec.SetField(member.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(member.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MemberCreateBulk is the builder for creating many Member entities in bulk.
type MemberCreateBulk struct {
	config
	err      error
	builders []*MemberCreate
}

// Save creates the Member entities in the database.
func (mcb *MemberCreateBulk) Save(ctx context.Context) ([]*Member, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Member, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MemberCreateBulk) SaveX(ctx context.Context) []*Member {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MemberCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MemberCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
