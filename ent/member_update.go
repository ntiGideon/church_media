// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogidi/church-media/ent/member"
	"github.com/ogidi/church-media/ent/predicate"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetFormNumber sets the "form_number" field.
func (mu *MemberUpdate) SetFormNumber(s string) *MemberUpdate {
	mu.mutation.SetFormNumber(s)
	return mu
}

// SetNillableFormNumber sets the "form_number" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableFormNumber(s *string) *MemberUpdate {
	if s != nil {
		mu.SetFormNumber(*s)
	}
	return mu
}

// ClearFormNumber clears the value of the "form_number" field.
func (mu *MemberUpdate) ClearFormNumber() *MemberUpdate {
	mu.mutation.ClearFormNumber()
	return mu
}

// SetIDNumber sets the "id_number" field.
func (mu *MemberUpdate) SetIDNumber(s string) *MemberUpdate {
	mu.mutation.SetIDNumber(s)
	return mu
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableIDNumber(s *string) *MemberUpdate {
	if s != nil {
		mu.SetIDNumber(*s)
	}
	return mu
}

// ClearIDNumber clears the value of the "id_number" field.
func (mu *MemberUpdate) ClearIDNumber() *MemberUpdate {
	mu.mutation.ClearIDNumber()
	return mu
}

// SetSurname sets the "surname" field.
func (mu *MemberUpdate) SetSurname(s string) *MemberUpdate {
	mu.mutation.SetSurname(s)
	return mu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSurname(s *string) *MemberUpdate {
	if s != nil {
		mu.SetSurname(*s)
	}
	return mu
}

// SetOtherNames sets the "other_names" field.
func (mu *MemberUpdate) SetOtherNames(s string) *MemberUpdate {
	mu.mutation.SetOtherNames(s)
	return mu
}

// SetNillableOtherNames sets the "other_names" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableOtherNames(s *string) *MemberUpdate {
	if s != nil {
		mu.SetOtherNames(*s)
	}
	return mu
}

// SetDob sets the "dob" field.
func (mu *MemberUpdate) SetDob(t time.Time) *MemberUpdate {
	mu.mutation.SetDob(t)
	return mu
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableDob(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetDob(*t)
	}
	return mu
}

// SetGender sets the "gender" field.
func (mu *MemberUpdate) SetGender(m member.Gender) *MemberUpdate {
	mu.mutation.SetGender(m)
	return mu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableGender(m *member.Gender) *MemberUpdate {
	if m != nil {
		mu.SetGender(*m)
	}
	return mu
}

// SetHometown sets the "hometown" field.
func (mu *MemberUpdate) SetHometown(s string) *MemberUpdate {
	mu.mutation.SetHometown(s)
	return mu
}

// SetNillableHometown sets the "hometown" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableHometown(s *string) *MemberUpdate {
	if s != nil {
		mu.SetHometown(*s)
	}
	return mu
}

// SetRegion sets the "region" field.
func (mu *MemberUpdate) SetRegion(s string) *MemberUpdate {
	mu.mutation.SetRegion(s)
	return mu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableRegion(s *string) *MemberUpdate {
	if s != nil {
		mu.SetRegion(*s)
	}
	return mu
}

// SetResidence sets the "residence" field.
func (mu *MemberUpdate) SetResidence(s string) *MemberUpdate {
	mu.mutation.SetResidence(s)
	return mu
}

// SetNillableResidence sets the "residence" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableResidence(s *string) *MemberUpdate {
	if s != nil {
		mu.SetResidence(*s)
	}
	return mu
}

// ClearResidence clears the value of the "residence" field.
func (mu *MemberUpdate) ClearResidence() *MemberUpdate {
	mu.mutation.ClearResidence()
	return mu
}

// SetAddress sets the "address" field.
func (mu *MemberUpdate) SetAddress(s string) *MemberUpdate {
	mu.mutation.SetAddress(s)
	return mu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableAddress(s *string) *MemberUpdate {
	if s != nil {
		mu.SetAddress(*s)
	}
	return mu
}

// SetMobile sets the "mobile" field.
func (mu *MemberUpdate) SetMobile(s string) *MemberUpdate {
	mu.mutation.SetMobile(s)
	return mu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableMobile(s *string) *MemberUpdate {
	if s != nil {
		mu.SetMobile(*s)
	}
	return mu
}

// ClearMobile clears the value of the "mobile" field.
func (mu *MemberUpdate) ClearMobile() *MemberUpdate {
	mu.mutation.ClearMobile()
	return mu
}

// SetEmail sets the "email" field.
func (mu *MemberUpdate) SetEmail(s string) *MemberUpdate {
	mu.mutation.SetEmail(s)
	return mu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableEmail(s *string) *MemberUpdate {
	if s != nil {
		mu.SetEmail(*s)
	}
	return mu
}

// ClearEmail clears the value of the "email" field.
func (mu *MemberUpdate) ClearEmail() *MemberUpdate {
	mu.mutation.ClearEmail()
	return mu
}

// SetSundaySchoolClass sets the "sunday_school_class" field.
func (mu *MemberUpdate) SetSundaySchoolClass(s string) *MemberUpdate {
	mu.mutation.SetSundaySchoolClass(s)
	return mu
}

// SetNillableSundaySchoolClass sets the "sunday_school_class" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSundaySchoolClass(s *string) *MemberUpdate {
	if s != nil {
		mu.SetSundaySchoolClass(*s)
	}
	return mu
}

// ClearSundaySchoolClass clears the value of the "sunday_school_class" field.
func (mu *MemberUpdate) ClearSundaySchoolClass() *MemberUpdate {
	mu.mutation.ClearSundaySchoolClass()
	return mu
}

// SetOccupation sets the "occupation" field.
func (mu *MemberUpdate) SetOccupation(s string) *MemberUpdate {
	mu.mutation.SetOccupation(s)
	return mu
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableOccupation(s *string) *MemberUpdate {
	if s != nil {
		mu.SetOccupation(*s)
	}
	return mu
}

// SetHasTitleCard sets the "has_title_card" field.
func (mu *MemberUpdate) SetHasTitleCard(b bool) *MemberUpdate {
	mu.mutation.SetHasTitleCard(b)
	return mu
}

// SetNillableHasTitleCard sets the "has_title_card" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableHasTitleCard(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetHasTitleCard(*b)
	}
	return mu
}

// SetTitleCardNumber sets the "title_card_number" field.
func (mu *MemberUpdate) SetTitleCardNumber(s string) *MemberUpdate {
	mu.mutation.SetTitleCardNumber(s)
	return mu
}

// SetNillableTitleCardNumber sets the "title_card_number" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableTitleCardNumber(s *string) *MemberUpdate {
	if s != nil {
		mu.SetTitleCardNumber(*s)
	}
	return mu
}

// ClearTitleCardNumber clears the value of the "title_card_number" field.
func (mu *MemberUpdate) ClearTitleCardNumber() *MemberUpdate {
	mu.mutation.ClearTitleCardNumber()
	return mu
}

// SetDayBorn sets the "day_born" field.
func (mu *MemberUpdate) SetDayBorn(s string) *MemberUpdate {
	mu.mutation.SetDayBorn(s)
	return mu
}

// SetNillableDayBorn sets the "day_born" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableDayBorn(s *string) *MemberUpdate {
	if s != nil {
		mu.SetDayBorn(*s)
	}
	return mu
}

// ClearDayBorn clears the value of the "day_born" field.
func (mu *MemberUpdate) ClearDayBorn() *MemberUpdate {
	mu.mutation.ClearDayBorn()
	return mu
}

// SetHasSpouse sets the "has_spouse" field.
func (mu *MemberUpdate) SetHasSpouse(b bool) *MemberUpdate {
	mu.mutation.SetHasSpouse(b)
	return mu
}

// SetNillableHasSpouse sets the "has_spouse" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableHasSpouse(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetHasSpouse(*b)
	}
	return mu
}

// SetSpouseIDNumber sets the "spouse_id_number" field.
func (mu *MemberUpdate) SetSpouseIDNumber(s string) *MemberUpdate {
	mu.mutation.SetSpouseIDNumber(s)
	return mu
}

// SetNillableSpouseIDNumber sets the "spouse_id_number" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSpouseIDNumber(s *string) *MemberUpdate {
	if s != nil {
		mu.SetSpouseIDNumber(*s)
	}
	return mu
}

// ClearSpouseIDNumber clears the value of the "spouse_id_number" field.
func (mu *MemberUpdate) ClearSpouseIDNumber() *MemberUpdate {
	mu.mutation.ClearSpouseIDNumber()
	return mu
}

// SetSpouseName sets the "spouse_name" field.
func (mu *MemberUpdate) SetSpouseName(s string) *MemberUpdate {
	mu.mutation.SetSpouseName(s)
	return mu
}

// SetNillableSpouseName sets the "spouse_name" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSpouseName(s *string) *MemberUpdate {
	if s != nil {
		mu.SetSpouseName(*s)
	}
	return mu
}

// ClearSpouseName clears the value of the "spouse_name" field.
func (mu *MemberUpdate) ClearSpouseName() *MemberUpdate {
	mu.mutation.ClearSpouseName()
	return mu
}

// SetSpouseOccupation sets the "spouse_occupation" field.
func (mu *MemberUpdate) SetSpouseOccupation(s string) *MemberUpdate {
	mu.mutation.SetSpouseOccupation(s)
	return mu
}

// SetNillableSpouseOccupation sets the "spouse_occupation" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSpouseOccupation(s *string) *MemberUpdate {
	if s != nil {
		mu.SetSpouseOccupation(*s)
	}
	return mu
}

// ClearSpouseOccupation clears the value of the "spouse_occupation" field.
func (mu *MemberUpdate) ClearSpouseOccupation() *MemberUpdate {
	mu.mutation.ClearSpouseOccupation()
	return mu
}

// SetSpouseContact sets the "spouse_contact" field.
func (mu *MemberUpdate) SetSpouseContact(s string) *MemberUpdate {
	mu.mutation.SetSpouseContact(s)
	return mu
}

// SetNillableSpouseContact sets the "spouse_contact" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSpouseContact(s *string) *MemberUpdate {
	if s != nil {
		mu.SetSpouseContact(*s)
	}
	return mu
}

// ClearSpouseContact clears the value of the "spouse_contact" field.
func (mu *MemberUpdate) ClearSpouseContact() *MemberUpdate {
	mu.mutation.ClearSpouseContact()
	return mu
}

// SetIsBaptized sets the "is_baptized" field.
func (mu *MemberUpdate) SetIsBaptized(b bool) *MemberUpdate {
	mu.mutation.SetIsBaptized(b)
	return mu
}

// SetNillableIsBaptized sets the "is_baptized" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableIsBaptized(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetIsBaptized(*b)
	}
	return mu
}

// SetBaptizedBy sets the "baptized_by" field.
func (mu *MemberUpdate) SetBaptizedBy(s string) *MemberUpdate {
	mu.mutation.SetBaptizedBy(s)
	return mu
}

// SetNillableBaptizedBy sets the "baptized_by" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableBaptizedBy(s *string) *MemberUpdate {
	if s != nil {
		mu.SetBaptizedBy(*s)
	}
	return mu
}

// ClearBaptizedBy clears the value of the "baptized_by" field.
func (mu *MemberUpdate) ClearBaptizedBy() *MemberUpdate {
	mu.mutation.ClearBaptizedBy()
	return mu
}

// SetBaptismChurch sets the "baptism_church" field.
func (mu *MemberUpdate) SetBaptismChurch(s string) *MemberUpdate {
	mu.mutation.SetBaptismChurch(s)
	return mu
}

// SetNillableBaptismChurch sets the "baptism_church" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableBaptismChurch(s *string) *MemberUpdate {
	if s != nil {
		mu.SetBaptismChurch(*s)
	}
	return mu
}

// ClearBaptismChurch clears the value of the "baptism_church" field.
func (mu *MemberUpdate) ClearBaptismChurch() *MemberUpdate {
	mu.mutation.ClearBaptismChurch()
	return mu
}

// SetBaptismCertNumber sets the "baptism_cert_number" field.
func (mu *MemberUpdate) SetBaptismCertNumber(s string) *MemberUpdate {
	mu.mutation.SetBaptismCertNumber(s)
	return mu
}

// SetNillableBaptismCertNumber sets the "baptism_cert_number" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableBaptismCertNumber(s *string) *MemberUpdate {
	if s != nil {
		mu.SetBaptismCertNumber(*s)
	}
	return mu
}

// ClearBaptismCertNumber clears the value of the "baptism_cert_number" field.
func (mu *MemberUpdate) ClearBaptismCertNumber() *MemberUpdate {
	mu.mutation.ClearBaptismCertNumber()
	return mu
}

// SetBaptismDate sets the "baptism_date" field.
func (mu *MemberUpdate) SetBaptismDate(t time.Time) *MemberUpdate {
	mu.mutation.SetBaptismDate(t)
	return mu
}

// SetNillableBaptismDate sets the "baptism_date" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableBaptismDate(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetBaptismDate(*t)
	}
	return mu
}

// ClearBaptismDate clears the value of the "baptism_date" field.
func (mu *MemberUpdate) ClearBaptismDate() *MemberUpdate {
	mu.mutation.ClearBaptismDate()
	return mu
}

// SetMembershipYear sets the "membership_year" field.
func (mu *MemberUpdate) SetMembershipYear(i int) *MemberUpdate {
	mu.mutation.ResetMembershipYear()
	mu.mutation.SetMembershipYear(i)
	return mu
}

// SetNillableMembershipYear sets the "membership_year" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableMembershipYear(i *int) *MemberUpdate {
	if i != nil {
		mu.SetMembershipYear(*i)
	}
	return mu
}

// AddMembershipYear adds i to the "membership_year" field.
func (mu *MemberUpdate) AddMembershipYear(i int) *MemberUpdate {
	mu.mutation.AddMembershipYear(i)
	return mu
}

// SetPhotoURL sets the "photo_url" field.
func (mu *MemberUpdate) SetPhotoURL(s string) *MemberUpdate {
	mu.mutation.SetPhotoURL(s)
	return mu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (mu *MemberUpdate) SetNillablePhotoURL(s *string) *MemberUpdate {
	if s != nil {
		mu.SetPhotoURL(*s)
	}
	return mu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (mu *MemberUpdate) ClearPhotoURL() *MemberUpdate {
	mu.mutation.ClearPhotoURL()
	return mu
}

// SetPhotoData sets the "photo_data" field.
func (mu *MemberUpdate) SetPhotoData(b []byte) *MemberUpdate {
	mu.mutation.SetPhotoData(b)
	return mu
}

// ClearPhotoData clears the value of the "photo_data" field.
func (mu *MemberUpdate) ClearPhotoData() *MemberUpdate {
	mu.mutation.ClearPhotoData()
	return mu
}

// SetPhotoHash sets the "photo_hash" field.
func (mu *MemberUpdate) SetPhotoHash(s string) *MemberUpdate {
	mu.mutation.SetPhotoHash(s)
	return mu
}

// SetNillablePhotoHash sets the "photo_hash" field if the given value is not nil.
func (mu *MemberUpdate) SetNillablePhotoHash(s *string) *MemberUpdate {
	if s != nil {
		mu.SetPhotoHash(*s)
	}
	return mu
}

// ClearPhotoHash clears the value of the "photo_hash" field.
func (mu *MemberUpdate) ClearPhotoHash() *MemberUpdate {
	mu.mutation.ClearPhotoHash()
	return mu
}

// SetIsActive sets the "is_active" field.
func (mu *MemberUpdate) SetIsActive(b bool) *MemberUpdate {
	mu.mutation.SetIsActive(b)
	return mu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableIsActive(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetIsActive(*b)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MemberUpdate) SetUpdatedAt(t time.Time) *MemberUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MemberUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := member.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Surname(); ok {
		if err := member.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Member.surname": %w`, err)}
		}
	}
	if v, ok := mu.mutation.OtherNames(); ok {
		if err := member.OtherNamesValidator(v); err != nil {
			return &ValidationError{Name: "other_names", err: fmt.Errorf(`ent: validator failed for field "Member.other_names": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Gender(); ok {
		if err := member.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Member.gender": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Occupation(); ok {
		if err := member.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "Member.occupation": %w`, err)}
		}
	}
	if v, ok := mu.mutation.MembershipYear(); ok {
		if err := member.MembershipYearValidator(v); err != nil {
			return &ValidationError{Name: "membership_year", err: fmt.Errorf(`ent: validator failed for field "Member.membership_year": %w`, err)}
		}
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.FormNumber(); ok {
		_spec.SetField(member.FieldFormNumber, field.TypeString, value)
	}
	if mu.mutation.FormNumberCleared() {
		_spec.ClearField(member.FieldFormNumber, field.TypeString)
	}
	if value, ok := mu.mutation.IDNumber(); ok {
		_spec.SetField(member.FieldIDNumber, field.TypeString, value)
	}
	if mu.mutation.IDNumberCleared() {
		_spec.ClearField(member.FieldIDNumber, field.TypeString)
	}
	if value, ok := mu.mutation.Surname(); ok {
		_spec.SetField(member.FieldSurname, field.TypeString, value)
	}
	if value, ok := mu.mutation.OtherNames(); ok {
		_spec.SetField(member.FieldOtherNames, field.TypeString, value)
	}
	if value, ok := mu.mutation.Dob(); ok {
		_spec.SetField(member.FieldDob, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Gender(); ok {
		_spec.SetField(member.FieldGender, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Hometown(); ok {
		_spec.SetField(member.FieldHometown, field.TypeString, value)
	}
	if value, ok := mu.mutation.Region(); ok {
		_spec.SetField(member.FieldRegion, field.TypeString, value)
	}
	if value, ok := mu.mutation.Residence(); ok {
		_spec.SetField(member.FieldResidence, field.TypeString, value)
	}
	if mu.mutation.ResidenceCleared() {
		_spec.ClearField(member.FieldResidence, field.TypeString)
	}
	if value, ok := mu.mutation.Address(); ok {
		_spec.SetField(member.FieldAddress, field.TypeString, value)
	}
	if value, ok := mu.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
	}
	if mu.mutation.MobileCleared() {
		_spec.ClearField(member.FieldMobile, field.TypeString)
	}
	if value, ok := mu.mutation.Email(); ok {
		_spec.SetField(member.FieldEmail, field.TypeString, value)
	}
	if mu.mutation.EmailCleared() {
		_spec.ClearField(member.FieldEmail, field.TypeString)
	}
	if value, ok := mu.mutation.SundaySchoolClass(); ok {
		_spec.SetField(member.FieldSundaySchoolClass, field.TypeString, value)
	}
	if mu.mutation.SundaySchoolClassCleared() {
		_spec.ClearField(member.FieldSundaySchoolClass, field.TypeString)
	}
	if value, ok := mu.mutation.Occupation(); ok {
		_spec.SetField(member.FieldOccupation, field.TypeString, value)
	}
	if value, ok := mu.mutation.HasTitleCard(); ok {
		_spec.SetField(member.FieldHasTitleCard, field.TypeBool, value)
	}
	if value, ok := mu.mutation.TitleCardNumber(); ok {
		_spec.SetField(member.FieldTitleCardNumber, field.TypeString, value)
	}
	if mu.mutation.TitleCardNumberCleared() {
		_spec.ClearField(member.FieldTitleCardNumber, field.TypeString)
	}
	if value, ok := mu.mutation.DayBorn(); ok {
		_spec.SetField(member.FieldDayBorn, field.TypeString, value)
	}
	if mu.mutation.DayBornCleared() {
		_spec.ClearField(member.FieldDayBorn, field.TypeString)
	}
	if value, ok := mu.mutation.HasSpouse(); ok {
		_spec.SetField(member.FieldHasSpouse, field.TypeBool, value)
	}
	if value, ok := mu.mutation.SpouseIDNumber(); ok {
		_spec.SetField(member.FieldSpouseIDNumber, field.TypeString, value)
	}
	if mu.mutation.SpouseIDNumberCleared() {
		_spec.ClearField(member.FieldSpouseIDNumber, field.TypeString)
	}
	if value, ok := mu.mutation.SpouseName(); ok {
		_spec.SetField(member.FieldSpouseName, field.TypeString, value)
	}
	if mu.mutation.SpouseNameCleared() {
		_spec.ClearField(member.FieldSpouseName, field.TypeString)
	}
	if value, ok := mu.mutation.SpouseOccupation(); ok {
		_spec.SetField(member.FieldSpouseOccupation, field.TypeString, value)
	}
	if mu.mutation.SpouseOccupationCleared() {
		_spec.ClearField(member.FieldSpouseOccupation, field.TypeString)
	}
	if value, ok := mu.mutation.SpouseContact(); ok {
		_spec.SetField(member.FieldSpouseContact, field.TypeString, value)
	}
	if mu.mutation.SpouseContactCleared() {
		_spec.ClearField(member.FieldSpouseContact, field.TypeString)
	}
	if value, ok := mu.mutation.IsBaptized(); ok {
		_spec.SetField(member.FieldIsBaptized, field.TypeBool, value)
	}
	if value, ok := mu.mutation.BaptizedBy(); ok {
		_spec.SetField(member.FieldBaptizedBy, field.TypeString, value)
	}
	if mu.mutation.BaptizedByCleared() {
		_spec.ClearField(member.FieldBaptizedBy, field.TypeString)
	}
	if value, ok := mu.mutation.BaptismChurch(); ok {
		_spec.SetField(member.FieldBaptismChurch, field.TypeString, value)
	}
	if mu.mutation.BaptismChurchCleared() {
		_spec.ClearField(member.FieldBaptismChurch, field.TypeString)
	}
	if value, ok := mu.mutation.BaptismCertNumber(); ok {
		_spec.SetField(member.FieldBaptismCertNumber, field.TypeString, value)
	}
	if mu.mutation.BaptismCertNumberCleared() {
		_spec.ClearField(member.FieldBaptismCertNumber, field.TypeString)
	}
	if value, ok := mu.mutation.BaptismDate(); ok {
		_spec.SetField(member.FieldBaptismDate, field.TypeTime, value)
	}
	if mu.mutation.BaptismDateCleared() {
		_spec.ClearField(member.FieldBaptismDate, field.TypeTime)
	}
	if value, ok := mu.mutation.MembershipYear(); ok {
		_spec.SetField(member.FieldMembershipYear, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedMembershipYear(); ok {
		_spec.AddField(member.FieldMembershipYear, field.TypeInt, value)
	}
	if value, ok := mu.mutation.PhotoURL(); ok {
		_spec.SetField(member.FieldPhotoURL, field.TypeString, value)
	}
	if mu.mutation.PhotoURLCleared() {
		_spec.ClearField(member.FieldPhotoURL, field.TypeString)
	}
	if value, ok := mu.mutation.PhotoData(); ok {
		_spec.SetField(member.FieldPhotoData, field.TypeBytes, value)
	}
	if mu.mutation.PhotoDataCleared() {
		_spec.ClearField(member.FieldPhotoData, field.TypeBytes)
	}
	if value, ok := mu.mutation.PhotoHash(); ok {
		_spec.SetField(member.FieldPhotoHash, field.TypeString, value)
	}
	if mu.mutation.PhotoHashCleared() {
		_spec.ClearField(member.FieldPhotoHash, field.TypeString)
	}
	if value, ok := mu.mutation.IsActive(); ok {
		_spec.SetField(member.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetFormNumber sets the "form_number" field.
func (muo *MemberUpdateOne) SetFormNumber(s string) *MemberUpdateOne {
	muo.mutation.SetFormNumber(s)
	return muo
}

// SetNillableFormNumber sets the "form_number" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableFormNumber(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetFormNumber(*s)
	}
	return muo
}

// ClearFormNumber clears the value of the "form_number" field.
func (muo *MemberUpdateOne) ClearFormNumber() *MemberUpdateOne {
	muo.mutation.ClearFormNumber()
	return muo
}

// SetIDNumber sets the "id_number" field.
func (muo *MemberUpdateOne) SetIDNumber(s string) *MemberUpdateOne {
	muo.mutation.SetIDNumber(s)
	return muo
}

// SetNillableIDNumber sets the "id_number" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableIDNumber(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetIDNumber(*s)
	}
	return muo
}

// ClearIDNumber clears the value of the "id_number" field.
func (muo *MemberUpdateOne) ClearIDNumber() *MemberUpdateOne {
	muo.mutation.ClearIDNumber()
	return muo
}

// SetSurname sets the "surname" field.
func (muo *MemberUpdateOne) SetSurname(s string) *MemberUpdateOne {
	muo.mutation.SetSurname(s)
	return muo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSurname(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetSurname(*s)
	}
	return muo
}

// SetOtherNames sets the "other_names" field.
func (muo *MemberUpdateOne) SetOtherNames(s string) *MemberUpdateOne {
	muo.mutation.SetOtherNames(s)
	return muo
}

// SetNillableOtherNames sets the "other_names" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableOtherNames(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetOtherNames(*s)
	}
	return muo
}

// SetDob sets the "dob" field.
func (muo *MemberUpdateOne) SetDob(t time.Time) *MemberUpdateOne {
	muo.mutation.SetDob(t)
	return muo
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableDob(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetDob(*t)
	}
	return muo
}

// SetGender sets the "gender" field.
func (muo *MemberUpdateOne) SetGender(m member.Gender) *MemberUpdateOne {
	muo.mutation.SetGender(m)
	return muo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableGender(m *member.Gender) *MemberUpdateOne {
	if m != nil {
		muo.SetGender(*m)
	}
	return muo
}

// SetHometown sets the "hometown" field.
func (muo *MemberUpdateOne) SetHometown(s string) *MemberUpdateOne {
	muo.mutation.SetHometown(s)
	return muo
}

// SetNillableHometown sets the "hometown" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableHometown(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetHometown(*s)
	}
	return muo
}

// SetRegion sets the "region" field.
func (muo *MemberUpdateOne) SetRegion(s string) *MemberUpdateOne {
	muo.mutation.SetRegion(s)
	return muo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableRegion(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetRegion(*s)
	}
	return muo
}

// SetResidence sets the "residence" field.
func (muo *MemberUpdateOne) SetResidence(s string) *MemberUpdateOne {
	muo.mutation.SetResidence(s)
	return muo
}

// SetNillableResidence sets the "residence" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableResidence(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetResidence(*s)
	}
	return muo
}

// ClearResidence clears the value of the "residence" field.
func (muo *MemberUpdateOne) ClearResidence() *MemberUpdateOne {
	muo.mutation.ClearResidence()
	return muo
}

// SetAddress sets the "address" field.
func (muo *MemberUpdateOne) SetAddress(s string) *MemberUpdateOne {
	muo.mutation.SetAddress(s)
	return muo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableAddress(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetAddress(*s)
	}
	return muo
}

// SetMobile sets the "mobile" field.
func (muo *MemberUpdateOne) SetMobile(s string) *MemberUpdateOne {
	muo.mutation.SetMobile(s)
	return muo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableMobile(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetMobile(*s)
	}
	return muo
}

// ClearMobile clears the value of the "mobile" field.
func (muo *MemberUpdateOne) ClearMobile() *MemberUpdateOne {
	muo.mutation.ClearMobile()
	return muo
}

// SetEmail sets the "email" field.
func (muo *MemberUpdateOne) SetEmail(s string) *MemberUpdateOne {
	muo.mutation.SetEmail(s)
	return muo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableEmail(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetEmail(*s)
	}
	return muo
}

// ClearEmail clears the value of the "email" field.
func (muo *MemberUpdateOne) ClearEmail() *MemberUpdateOne {
	muo.mutation.ClearEmail()
	return muo
}

// SetSundaySchoolClass sets the "sunday_school_class" field.
func (muo *MemberUpdateOne) SetSundaySchoolClass(s string) *MemberUpdateOne {
	muo.mutation.SetSundaySchoolClass(s)
	return muo
}

// SetNillableSundaySchoolClass sets the "sunday_school_class" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSundaySchoolClass(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetSundaySchoolClass(*s)
	}
	return muo
}

// ClearSundaySchoolClass clears the value of the "sunday_school_class" field.
func (muo *MemberUpdateOne) ClearSundaySchoolClass() *MemberUpdateOne {
	muo.mutation.ClearSundaySchoolClass()
	return muo
}

// SetOccupation sets the "occupation" field.
func (muo *MemberUpdateOne) SetOccupation(s string) *MemberUpdateOne {
	muo.mutation.SetOccupation(s)
	return muo
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableOccupation(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetOccupation(*s)
	}
	return muo
}

// SetHasTitleCard sets the "has_title_card" field.
func (muo *MemberUpdateOne) SetHasTitleCard(b bool) *MemberUpdateOne {
	muo.mutation.SetHasTitleCard(b)
	return muo
}

// SetNillableHasTitleCard sets the "has_title_card" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableHasTitleCard(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetHasTitleCard(*b)
	}
	return muo
}

// SetTitleCardNumber sets the "title_card_number" field.
func (muo *MemberUpdateOne) SetTitleCardNumber(s string) *MemberUpdateOne {
	muo.mutation.SetTitleCardNumber(s)
	return muo
}

// SetNillableTitleCardNumber sets the "title_card_number" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableTitleCardNumber(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetTitleCardNumber(*s)
	}
	return muo
}

// ClearTitleCardNumber clears the value of the "title_card_number" field.
func (muo *MemberUpdateOne) ClearTitleCardNumber() *MemberUpdateOne {
	muo.mutation.ClearTitleCardNumber()
	return muo
}

// SetDayBorn sets the "day_born" field.
func (muo *MemberUpdateOne) SetDayBorn(s string) *MemberUpdateOne {
	muo.mutation.SetDayBorn(s)
	return muo
}

// SetNillableDayBorn sets the "day_born" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableDayBorn(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetDayBorn(*s)
	}
	return muo
}

// ClearDayBorn clears the value of the "day_born" field.
func (muo *MemberUpdateOne) ClearDayBorn() *MemberUpdateOne {
	muo.mutation.ClearDayBorn()
	return muo
}

// SetHasSpouse sets the "has_spouse" field.
func (muo *MemberUpdateOne) SetHasSpouse(b bool) *MemberUpdateOne {
	muo.mutation.SetHasSpouse(b)
	return muo
}

// SetNillableHasSpouse sets the "has_spouse" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableHasSpouse(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetHasSpouse(*b)
	}
	return muo
}

// SetSpouseIDNumber sets the "spouse_id_number" field.
func (muo *MemberUpdateOne) SetSpouseIDNumber(s string) *MemberUpdateOne {
	muo.mutation.SetSpouseIDNumber(s)
	return muo
}

// SetNillableSpouseIDNumber sets the "spouse_id_number" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSpouseIDNumber(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetSpouseIDNumber(*s)
	}
	return muo
}

// ClearSpouseIDNumber clears the value of the "spouse_id_number" field.
func (muo *MemberUpdateOne) ClearSpouseIDNumber() *MemberUpdateOne {
	muo.mutation.ClearSpouseIDNumber()
	return muo
}

// SetSpouseName sets the "spouse_name" field.
func (muo *MemberUpdateOne) SetSpouseName(s string) *MemberUpdateOne {
	muo.mutation.SetSpouseName(s)
	return muo
}

// SetNillableSpouseName sets the "spouse_name" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSpouseName(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetSpouseName(*s)
	}
	return muo
}

// ClearSpouseName clears the value of the "spouse_name" field.
func (muo *MemberUpdateOne) ClearSpouseName() *MemberUpdateOne {
	muo.mutation.ClearSpouseName()
	return muo
}

// SetSpouseOccupation sets the "spouse_occupation" field.
func (muo *MemberUpdateOne) SetSpouseOccupation(s string) *MemberUpdateOne {
	muo.mutation.SetSpouseOccupation(s)
	return muo
}

// SetNillableSpouseOccupation sets the "spouse_occupation" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSpouseOccupation(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetSpouseOccupation(*s)
	}
	return muo
}

// ClearSpouseOccupation clears the value of the "spouse_occupation" field.
func (muo *MemberUpdateOne) ClearSpouseOccupation() *MemberUpdateOne {
	muo.mutation.ClearSpouseOccupation()
	return muo
}

// SetSpouseContact sets the "spouse_contact" field.
func (muo *MemberUpdateOne) SetSpouseContact(s string) *MemberUpdateOne {
	muo.mutation.SetSpouseContact(s)
	return muo
}

// SetNillableSpouseContact sets the "spouse_contact" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSpouseContact(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetSpouseContact(*s)
	}
	return muo
}

// ClearSpouseContact clears the value of the "spouse_contact" field.
func (muo *MemberUpdateOne) ClearSpouseContact() *MemberUpdateOne {
	muo.mutation.ClearSpouseContact()
	return muo
}

// SetIsBaptized sets the "is_baptized" field.
func (muo *MemberUpdateOne) SetIsBaptized(b bool) *MemberUpdateOne {
	muo.mutation.SetIsBaptized(b)
	return muo
}

// SetNillableIsBaptized sets the "is_baptized" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableIsBaptized(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetIsBaptized(*b)
	}
	return muo
}

// SetBaptizedBy sets the "baptized_by" field.
func (muo *MemberUpdateOne) SetBaptizedBy(s string) *MemberUpdateOne {
	muo.mutation.SetBaptizedBy(s)
	return muo
}

// SetNillableBaptizedBy sets the "baptized_by" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableBaptizedBy(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetBaptizedBy(*s)
	}
	return muo
}

// ClearBaptizedBy clears the value of the "baptized_by" field.
func (muo *MemberUpdateOne) ClearBaptizedBy() *MemberUpdateOne {
	muo.mutation.ClearBaptizedBy()
	return muo
}

// SetBaptismChurch sets the "baptism_church" field.
func (muo *MemberUpdateOne) SetBaptismChurch(s string) *MemberUpdateOne {
	muo.mutation.SetBaptismChurch(s)
	return muo
}

// SetNillableBaptismChurch sets the "baptism_church" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableBaptismChurch(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetBaptismChurch(*s)
	}
	return muo
}

// ClearBaptismChurch clears the value of the "baptism_church" field.
func (muo *MemberUpdateOne) ClearBaptismChurch() *MemberUpdateOne {
	muo.mutation.ClearBaptismChurch()
	return muo
}

// SetBaptismCertNumber sets the "baptism_cert_number" field.
func (muo *MemberUpdateOne) SetBaptismCertNumber(s string) *MemberUpdateOne {
	muo.mutation.SetBaptismCertNumber(s)
	return muo
}

// SetNillableBaptismCertNumber sets the "baptism_cert_number" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableBaptismCertNumber(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetBaptismCertNumber(*s)
	}
	return muo
}

// ClearBaptismCertNumber clears the value of the "baptism_cert_number" field.
func (muo *MemberUpdateOne) ClearBaptismCertNumber() *MemberUpdateOne {
	muo.mutation.ClearBaptismCertNumber()
	return muo
}

// SetBaptismDate sets the "baptism_date" field.
func (muo *MemberUpdateOne) SetBaptismDate(t time.Time) *MemberUpdateOne {
	muo.mutation.SetBaptismDate(t)
	return muo
}

// SetNillableBaptismDate sets the "baptism_date" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableBaptismDate(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetBaptismDate(*t)
	}
	return muo
}

// ClearBaptismDate clears the value of the "baptism_date" field.
func (muo *MemberUpdateOne) ClearBaptismDate() *MemberUpdateOne {
	muo.mutation.ClearBaptismDate()
	return muo
}

// SetMembershipYear sets the "membership_year" field.
func (muo *MemberUpdateOne) SetMembershipYear(i int) *MemberUpdateOne {
	muo.mutation.ResetMembershipYear()
	muo.mutation.SetMembershipYear(i)
	return muo
}

// SetNillableMembershipYear sets the "membership_year" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableMembershipYear(i *int) *MemberUpdateOne {
	if i != nil {
		muo.SetMembershipYear(*i)
	}
	return muo
}

// AddMembershipYear adds i to the "membership_year" field.
func (muo *MemberUpdateOne) AddMembershipYear(i int) *MemberUpdateOne {
	muo.mutation.AddMembershipYear(i)
	return muo
}

// SetPhotoURL sets the "photo_url" field.
func (muo *MemberUpdateOne) SetPhotoURL(s string) *MemberUpdateOne {
	muo.mutation.SetPhotoURL(s)
	return muo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillablePhotoURL(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetPhotoURL(*s)
	}
	return muo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (muo *MemberUpdateOne) ClearPhotoURL() *MemberUpdateOne {
	muo.mutation.ClearPhotoURL()
	return muo
}

// SetPhotoData sets the "photo_data" field.
func (muo *MemberUpdateOne) SetPhotoData(b []byte) *MemberUpdateOne {
	muo.mutation.SetPhotoData(b)
	return muo
}

// ClearPhotoData clears the value of the "photo_data" field.
func (muo *MemberUpdateOne) ClearPhotoData() *MemberUpdateOne {
	muo.mutation.ClearPhotoData()
	return muo
}

// SetPhotoHash sets the "photo_hash" field.
func (muo *MemberUpdateOne) SetPhotoHash(s string) *MemberUpdateOne {
	muo.mutation.SetPhotoHash(s)
	return muo
}

// SetNillablePhotoHash sets the "photo_hash" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillablePhotoHash(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetPhotoHash(*s)
	}
	return muo
}

// ClearPhotoHash clears the value of the "photo_hash" field.
func (muo *MemberUpdateOne) ClearPhotoHash() *MemberUpdateOne {
	muo.mutation.ClearPhotoHash()
	return muo
}

// SetIsActive sets the "is_active" field.
func (muo *MemberUpdateOne) SetIsActive(b bool) *MemberUpdateOne {
	muo.mutation.SetIsActive(b)
	return muo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableIsActive(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetIsActive(*b)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MemberUpdateOne) SetUpdatedAt(t time.Time) *MemberUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MemberUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := member.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Surname(); ok {
		if err := member.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Member.surname": %w`, err)}
		}
	}
	if v, ok := muo.mutation.OtherNames(); ok {
		if err := member.OtherNamesValidator(v); err != nil {
			return &ValidationError{Name: "other_names", err: fmt.Errorf(`ent: validator failed for field "Member.other_names": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Gender(); ok {
		if err := member.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Member.gender": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Occupation(); ok {
		if err := member.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "Member.occupation": %w`, err)}
		}
	}
	if v, ok := muo.mutation.MembershipYear(); ok {
		if err := member.MembershipYearValidator(v); err != nil {
			return &ValidationError{Name: "membership_year", err: fmt.Errorf(`ent: validator failed for field "Member.membership_year": %w`, err)}
		}
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.FormNumber(); ok {
		_spec.SetField(member.FieldFormNumber, field.TypeString, value)
	}
	if muo.mutation.FormNumberCleared() {
		_spec.ClearField(member.FieldFormNumber, field.TypeString)
	}
	if value, ok := muo.mutation.IDNumber(); ok {
		_spec.SetField(member.FieldIDNumber, field.TypeString, value)
	}
	if muo.mutation.IDNumberCleared() {
		_spec.ClearField(member.FieldIDNumber, field.TypeString)
	}
	if value, ok := muo.mutation.Surname(); ok {
		_spec.SetField(member.FieldSurname, field.TypeString, value)
	}
	if value, ok := muo.mutation.OtherNames(); ok {
		_spec.SetField(member.FieldOtherNames, field.TypeString, value)
	}
	if value, ok := muo.mutation.Dob(); ok {
		_spec.SetField(member.FieldDob, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Gender(); ok {
		_spec.SetField(member.FieldGender, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Hometown(); ok {
		_spec.SetField(member.FieldHometown, field.TypeString, value)
	}
	if value, ok := muo.mutation.Region(); ok {
		_spec.SetField(member.FieldRegion, field.TypeString, value)
	}
	if value, ok := muo.mutation.Residence(); ok {
		_spec.SetField(member.FieldResidence, field.TypeString, value)
	}
	if muo.mutation.ResidenceCleared() {
		_spec.ClearField(member.FieldResidence, field.TypeString)
	}
	if value, ok := muo.mutation.Address(); ok {
		_spec.SetField(member.FieldAddress, field.TypeString, value)
	}
	if value, ok := muo.mutation.Mobile(); ok {
		_spec.SetField(member.FieldMobile, field.TypeString, value)
	}
	if muo.mutation.MobileCleared() {
		_spec.ClearField(member.FieldMobile, field.TypeString)
	}
	if value, ok := muo.mutation.Email(); ok {
		_spec.SetField(member.FieldEmail, field.TypeString, value)
	}
	if muo.mutation.EmailCleared() {
		_spec.ClearField(member.FieldEmail, field.TypeString)
	}
	if value, ok := muo.mutation.SundaySchoolClass(); ok {
		_spec.SetField(member.FieldSundaySchoolClass, field.TypeString, value)
	}
	if muo.mutation.SundaySchoolClassCleared() {
		_spec.ClearField(member.FieldSundaySchoolClass, field.TypeString)
	}
	if value, ok := muo.mutation.Occupation(); ok {
		_spec.SetField(member.FieldOccupation, field.TypeString, value)
	}
	if value, ok := muo.mutation.HasTitleCard(); ok {
		_spec.SetField(member.FieldHasTitleCard, field.TypeBool, value)
	}
	if value, ok := muo.mutation.TitleCardNumber(); ok {
		_spec.SetField(member.FieldTitleCardNumber, field.TypeString, value)
	}
	if muo.mutation.TitleCardNumberCleared() {
		_spec.ClearField(member.FieldTitleCardNumber, field.TypeString)
	}
	if value, ok := muo.mutation.DayBorn(); ok {
		_spec.SetField(member.FieldDayBorn, field.TypeString, value)
	}
	if muo.mutation.DayBornCleared() {
		_spec.ClearField(member.FieldDayBorn, field.TypeString)
	}
	if value, ok := muo.mutation.HasSpouse(); ok {
		_spec.SetField(member.FieldHasSpouse, field.TypeBool, value)
	}
	if value, ok := muo.mutation.SpouseIDNumber(); ok {
		_spec.SetField(member.FieldSpouseIDNumber, field.TypeString, value)
	}
	if muo.mutation.SpouseIDNumberCleared() {
		_spec.ClearField(member.FieldSpouseIDNumber, field.TypeString)
	}
	if value, ok := muo.mutation.SpouseName(); ok {
		_spec.SetField(member.FieldSpouseName, field.TypeString, value)
	}
	if muo.mutation.SpouseNameCleared() {
		_spec.ClearField(member.FieldSpouseName, field.TypeString)
	}
	if value, ok := muo.mutation.SpouseOccupation(); ok {
		_spec.SetField(member.FieldSpouseOccupation, field.TypeString, value)
	}
	if muo.mutation.SpouseOccupationCleared() {
		_spec.ClearField(member.FieldSpouseOccupation, field.TypeString)
	}
	if value, ok := muo.mutation.SpouseContact(); ok {
		_spec.SetField(member.FieldSpouseContact, field.TypeString, value)
	}
	if muo.mutation.SpouseContactCleared() {
		_spec.ClearField(member.FieldSpouseContact, field.TypeString)
	}
	if value, ok := muo.mutation.IsBaptized(); ok {
		_spec.SetField(member.FieldIsBaptized, field.TypeBool, value)
	}
	if value, ok := muo.mutation.BaptizedBy(); ok {
		_spec.SetField(member.FieldBaptizedBy, field.TypeString, value)
	}
	if muo.mutation.BaptizedByCleared() {
		_spec.ClearField(member.FieldBaptizedBy, field.TypeString)
	}
	if value, ok := muo.mutation.BaptismChurch(); ok {
		_spec.SetField(member.FieldBaptismChurch, field.TypeString, value)
	}
	if muo.mutation.BaptismChurchCleared() {
		_spec.ClearField(member.FieldBaptismChurch, field.TypeString)
	}
	if value, ok := muo.mutation.BaptismCertNumber(); ok {
		_spec.SetField(member.FieldBaptismCertNumber, field.TypeString, value)
	}
	if muo.mutation.BaptismCertNumberCleared() {
		_spec.ClearField(member.FieldBaptismCertNumber, field.TypeString)
	}
	if value, ok := muo.mutation.BaptismDate(); ok {
		_spec.SetField(member.FieldBaptismDate, field.TypeTime, value)
	}
	if muo.mutation.BaptismDateCleared() {
		_spec.ClearField(member.FieldBaptismDate, field.TypeTime)
	}
	if value, ok := muo.mutation.MembershipYear(); ok {
		_spec.SetField(member.FieldMembershipYear, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedMembershipYear(); ok {
		_spec.AddField(member.FieldMembershipYear, field.TypeInt, value)
	}
	if value, ok := muo.mutation.PhotoURL(); ok {
		_spec.SetField(member.FieldPhotoURL, field.TypeString, value)
	}
	if muo.mutation.PhotoURLCleared() {
		_spec.ClearField(member.FieldPhotoURL, field.TypeString)
	}
	if value, ok := muo.mutation.PhotoData(); ok {
		_spec.SetField(member.FieldPhotoData, field.TypeBytes, value)
	}
	if muo.mutation.PhotoDataCleared() {
		_spec.ClearField(member.FieldPhotoData, field.TypeBytes)
	}
	if value, ok := muo.mutation.PhotoHash(); ok {
		_spec.SetField(member.FieldPhotoHash, field.TypeString, value)
	}
	if muo.mutation.PhotoHashCleared() {
		_spec.ClearField(member.FieldPhotoHash, field.TypeString)
	}
	if value, ok := muo.mutation.IsActive(); ok {
		_spec.SetField(member.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
