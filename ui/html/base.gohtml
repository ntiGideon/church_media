{{define "base"}}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
     <title>{{template "title" .}}</title>
    <link rel="icon" type="image/x-icon" href="/static/img/favicon.ico">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/img/apple-touch-icon.png">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
    <link rel="stylesheet" href="animate.min.css" />
    <link rel="stylesheet" href="/static/bulma/css/bulma.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css"
  />
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body>
    <header>
       <div>
           {{template "nav" .}}
       </div>
    </header>

    <div>
        <main>
            {{template "main" .}}
        </main>
    </div>

    <footer>
        {{template "footer" .}}
    </footer>

    <!-- Bulma Toast JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bulma-toast@2.3.2/dist/bulma-toast.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const flashMessage = {{if .Flash | printf "%q" }}{{.Flash}}{{else}}null{{end}};
        console.log("Flash Message:", flashMessage); // Debugging output

        if (flashMessage) {
            bulmaToast.toast({
                message: flashMessage,
                type: "is-success",
                duration: 3000,
                position: "top-right",
                dismissible: true,
                animate: { in: 'fadeIn', out: 'fadeOut' },
                style: {
                    zIndex: 1050,
                }
            });
        }
    });


    // Initialize animations
document.addEventListener('DOMContentLoaded', function() {
    // Simple intersection observer for scroll animations
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate__fadeInUp');
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('.animate-on-scroll').forEach(el => {
        observer.observe(el);
    });

    // Registration modal
    const modal = document.getElementById('registration-modal');
    const registerBtn = document.getElementById('register-button');
    const closeBtns = document.querySelectorAll('.delete, .button:not(.is-success)');

    registerBtn.addEventListener('click', () => {
        modal.classList.add('is-active');
    });

    closeBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            modal.classList.remove('is-active');
        });
    });

    // Simple map initialization (would use Google Maps or Mapbox in production)
    const map = document.getElementById('map');
    if (map) {
        // In a real implementation, you would initialize a map here
        map.innerHTML = '<div class="has-text-centered is-flex is-align-items-center is-justify-content-center" style="height:100%"><span class="icon is-large"><i class="fas fa-map-marked-alt fa-3x"></i></span></div>';
    }

    // Get directions button
    document.getElementById('get-directions').addEventListener('click', function(e) {
        e.preventDefault();
        // This would open directions in Google Maps in a real implementation
        alert('This would open directions to the event location in a real implementation');
    });
});



document.addEventListener('DOMContentLoaded', function() {
    // Filter events
    const filterSelect = document.getElementById('event-filter');
    if (filterSelect) {
        filterSelect.addEventListener('change', function() {
            const filter = this.value;
            const today = new Date().toISOString().split('T')[0];

            document.querySelectorAll('.column.is-one-third').forEach(card => {
                const isFeatured = card.dataset.featured === 'true';
                const eventDate = card.dataset.date;

                let shouldShow = true;

                switch(filter) {
                    case 'upcoming':
                        shouldShow = eventDate >= today;
                        break;
                    case 'past':
                        shouldShow = eventDate < today;
                        break;
                    case 'featured':
                        shouldShow = isFeatured;
                        break;
                }

                card.style.display = shouldShow ? 'block' : 'none';
            });
        });
    }

    // Simple animation on scroll
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate__fadeIn');
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('.event-card').forEach(card => {
        observer.observe(card);
    });
});
</script>

    <script src="/static/js/script.js"></script>
</body>
</html>
{{end}}
