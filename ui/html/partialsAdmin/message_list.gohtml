{{define "message-list"}}
    {{if .Messages}}
        <div class="menu">
            <ul class="menu-list">
                {{range .Messages}}
                <li>
                    <a class="{{if eq .State "UNREAD"}}has-background-danger-light{{end}} message-item"
                       data-message-id="{{.ID}}"
                       onclick="loadMessageView({{.ID}})">
                        <div class="media">
                            <div class="media-left">
                                <span class="icon {{if eq .State "UNREAD"}}has-text-danger{{else}}has-text-grey{{end}}">
                                    <i class="fas fa-envelope{{if ne .State "UNREAD"}}-open{{end}}"></i>
                                </span>
                            </div>
                            <div class="media-content">
                                <p class="has-text-weight-semibold is-capitalized">{{.Name}}</p>
                                <p class="is-size-7 has-text-grey">{{.Email }}</p>
                                <div class="tags are-small mt-1">
                                    <span class="tag is-primary is-light is-capitalized">{{getSubjectDisplayName .Subject}}</span>
                                    <span class="tag is-dark is-light is-capitalized">{{.State}}</span>
                                </div>
                            </div>
                            <div class="media-right">
                                <span class="is-size-7 has-text-grey">{{.CreatedAt.Format "Jan 2"}}</span>
                            </div>
                        </div>
                    </a>
                </li>
                {{end}}
            </ul>
        </div>
    {{else}}
        <div class="has-text-centered py-6">
            <span class="icon is-large has-text-grey-light">
                <i class="fas fa-envelope fa-3x"></i>
            </span>
            <p class="subtitle is-5 has-text-grey mt-3">No messages found</p>
            {{if ne .CurrentFilter "all"}}
                <a class="button is-small is-text" hx-get="/admin/messages/filter/all" hx-target="#message-list-container">
                    Show all messages
                </a>
            {{end}}
        </div>
    {{end}}

    <script>

// Function to load and display message view
async function loadMessageView(messageId) {
    try {
        // Show loading state
        const container = document.getElementById('message-view-container');
        container.innerHTML = `
            <div class="has-text-centered py-6">
                <span class="icon is-large">
                    <i class="fas fa-spinner fa-pulse fa-3x"></i>
                </span>
            </div>
        `;

        // Fetch message data
        const response = await fetch(`/admin/messages/${messageId}`);
        console.log(response)
        if (!response.ok) throw new Error('Failed to load message');

        const html = await response.text();

        // Update the container
        container.innerHTML = html;

        // Highlight selected message
        document.querySelectorAll('.message-item').forEach(item => {
            item.classList.remove('is-active');
        });
        document.querySelector(`.message-item[data-message-id="${messageId}"]`).classList.add('is-active');

        // Scroll to view if needed
        container.scrollIntoView({ behavior: 'smooth', block: 'start' });

    } catch (error) {
        console.error('Error loading message:', error);
        document.getElementById('message-view-container').innerHTML = `
            <div class="notification is-danger">
                Failed to load message. Please try again.
            </div>
        `;
    }
}

// Function to handle reply form submission
async function handleReplyFormSubmit(event, messageId) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    try {
        const response = await fetch(`/admin/messages/${messageId}/reply`, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) throw new Error('Failed to send reply');

        // Reload the message view to show the new response
        await loadMessageView(messageId);

        // Close the modal
        closeModal('reply-modal');

        // Show success message
        bulmaToast.toast({
            message: 'Reply sent successfully',
            type: 'is-success',
            duration: 3000,
            position: 'top-right'
        });

    } catch (error) {
        console.error('Error sending reply:', error);
        bulmaToast.toast({
            message: 'Failed to send reply',
            type: 'is-danger',
            duration: 3000,
            position: 'top-right'
        });
    }
}

// Update your modal form to use this handler
document.addEventListener('DOMContentLoaded', () => {
    const replyForm = document.getElementById('reply-form');
    if (replyForm) {
        replyForm.addEventListener('submit', function(event) {
            const messageId = this.getAttribute('data-message-id');
            handleReplyFormSubmit(event, messageId);
        });
    }
});
</script>
{{end}}