{{define "title"}}Reset Password{{end}}
{{define "description"}}Reset your password and be a part of the system once again{{end}}
{{define "main"}}
<style>
    :root {
        --church-primary: #4a6fa5;
        --church-secondary: #6b8cae;
        --church-accent: #ff7e33;
        --church-light: #f8f9fa;
    }

    body {
        background-color: #f8f9fa;
        min-height: 100vh;
        display: flex;
        align-items: center;
    }

    .reset-container {
        max-width: 500px;
        margin: 0 auto;
        padding: 2rem;
    }

    .reset-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 15px 50px rgba(74, 111, 165, 0.15);
        overflow: hidden;
        transform: translateY(0);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .reset-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 60px rgba(74, 111, 165, 0.2);
    }

    .reset-header {
        background: linear-gradient(135deg, var(--church-primary) 0%, var(--church-secondary) 100%);
        color: white;
        padding: 2.5rem;
        text-align: center;
        position: relative;
        overflow: hidden;
    }

    .reset-header::before {
        content: '';
        position: absolute;
        top: -50px;
        left: -50px;
        width: 150px;
        height: 150px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
    }

    .reset-header::after {
        content: '';
        position: absolute;
        bottom: -80px;
        right: -80px;
        width: 200px;
        height: 200px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
    }

    .reset-icon {
        font-size: 3.5rem;
        margin-bottom: 1.5rem;
        color: white;
        position: relative;
        z-index: 1;
    }

    .reset-body {
        padding: 2.5rem;
    }

    .password-field {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #7a7a7a;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
        z-index: 2;
    }

    .password-strength {
        height: 4px;
        background: #f0f0f0;
        border-radius: 2px;
        margin-top: 0.5rem;
        overflow: hidden;
    }

    .password-strength-bar {
        height: 100%;
        width: 0%;
        background: var(--church-primary);
        transition: width 0.3s ease;
    }

    .strength-weak { background: #ff3860; }
    .strength-medium { background: #ffdd57; }
    .strength-strong { background: #48c774; }

    .input, .button {
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .input:focus {
        border-color: var(--church-primary);
        box-shadow: 0 0 0 3px rgba(74, 111, 165, 0.15);
    }

    .button.is-reset {
        background: var(--church-primary);
        color: white;
        font-weight: 500;
        padding: 1.25em;
        transition: all 0.3s ease;
    }

    .button.is-reset:hover {
        background: var(--church-secondary);
        transform: translateY(-2px);
    }

    .button.is-reset:active {
        transform: translateY(0);
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .animate-fade-in {
        animation: fadeIn 0.6s ease-out forwards;
    }

    .delay-1 { animation-delay: 0.1s; }
    .delay-2 { animation-delay: 0.2s; }
</style>

<div class="reset-container">
    <div class="reset-card animate-fade-in">
        <div class="reset-header">
            <div class="reset-icon">
                <i class="fas fa-key"></i>
            </div>
            <h1 class="title is-3 has-text-white">Reset Your Password</h1>
            <p class="subtitle is-6 has-text-white">Create a new secure password</p>
        </div>

        <div class="reset-body">
            <form id="resetForm" action="/reset-password" method="POST">
                <input type="hidden" name="token" value="{{.Token}}">

                <!-- New Password Field -->
                <div class="password-field animate-fade-in delay-1">
                    <label class="label">New Password</label>
                    <div class="control has-icons-left">
                        <input class="input" type="password" name="new_password" id="newPassword"
                               placeholder="Enter your new password" required minlength="8">
                        <span class="icon is-small is-left">
                            <i class="fas fa-lock"></i>
                        </span>
                        <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <div class="password-strength">
                        <div class="password-strength-bar" id="passwordStrength"></div>
                    </div>
                    <p class="help">Minimum 8 characters with mixed case, numbers, and symbols</p>
                </div>

                <!-- Confirm Password Field -->
                <div class="password-field animate-fade-in delay-2">
                    <label class="label">Confirm New Password</label>
                    <div class="control has-icons-left">
                        <input class="input" type="password" name="confirm_password" id="confirmPassword"
                               placeholder="Re-enter your new password" required>
                        <span class="icon is-small is-left">
                            <i class="fas fa-lock"></i>
                        </span>
                    </div>
                    <p class="help has-text-danger" id="passwordMatchError" style="display: none;">
                        Passwords do not match
                    </p>
                </div>

                <!-- Submit Button -->
                <div class="field mt-5">
                    <div class="control">
                        <button type="submit" class="button is-reset is-fullwidth">
                            <span class="icon">
                                <i class="fas fa-sync-alt"></i>
                            </span>
                            <span>Reset Password</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Password toggle functionality
    function togglePassword(id) {
        const password = document.getElementById(id);
        const icon = password.nextElementSibling.querySelector('i');

        if (password.type === 'password') {
            password.type = 'text';
            icon.classList.replace('fa-eye', 'fa-eye-slash');
        } else {
            password.type = 'password';
            icon.classList.replace('fa-eye-slash', 'fa-eye');
        }
    }

    // Password strength indicator
    document.getElementById('newPassword').addEventListener('input', function(e) {
        const password = e.target.value;
        const strengthBar = document.getElementById('passwordStrength');
        let strength = 0;

        // Length check
        if (password.length >= 8) strength += 20;
        if (password.length >= 12) strength += 20;

        // Character variety checks
        if (password.match(/[a-z]/)) strength += 10;
        if (password.match(/[A-Z]/)) strength += 10;
        if (password.match(/\d/)) strength += 20;
        if (password.match(/[^a-zA-Z\d]/)) strength += 20;

        strengthBar.style.width = strength + '%';

        // Update color based on strength
        strengthBar.classList.remove('strength-weak', 'strength-medium', 'strength-strong');
        if (strength < 50) {
            strengthBar.classList.add('strength-weak');
        } else if (strength < 80) {
            strengthBar.classList.add('strength-medium');
        } else {
            strengthBar.classList.add('strength-strong');
        }
    });

    // Password matching validation
    document.getElementById('confirmPassword').addEventListener('input', function() {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = this.value;
        const errorElement = document.getElementById('passwordMatchError');

        if (newPassword !== confirmPassword && confirmPassword.length > 0) {
            errorElement.style.display = 'block';
            this.classList.add('is-danger');
        } else {
            errorElement.style.display = 'none';
            this.classList.remove('is-danger');
        }
    });

    // Form submission validation
    document.getElementById('resetForm').addEventListener('submit', function(e) {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (newPassword !== confirmPassword) {
            e.preventDefault();
            document.getElementById('passwordMatchError').style.display = 'block';
            document.getElementById('confirmPassword').classList.add('is-danger');
            document.getElementById('confirmPassword').focus();
        }
    });
</script>

{{end}}